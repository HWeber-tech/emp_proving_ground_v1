name: CI
on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      alert_drill:
        description: "Set to true to intentionally fail the workflow and validate CI failure alerts."
        required: false
        default: "false"

permissions:
  contents: read
  actions: write

jobs:
  policy:
    uses: ./.github/workflows/forbidden-integrations.yml@main

  lint:
    runs-on: ubuntu-latest
    needs: [policy]
    steps:
      - uses: ./.github/actions/python-setup
      - name: Ruff (lint)
        run: ruff check .
      - name: Ruff (format)
        run: ruff format --check .

  types:
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
      - uses: ./.github/actions/python-setup
      - name: Guard single mypy source
        run: |
          set -euo pipefail
          if grep -n '^\[tool\.mypy\]' pyproject.toml >/dev/null 2>&1; then
            echo "[tool.mypy] found in pyproject.toml; use mypy.ini"; exit 1; fi
          test -f mypy.ini || { echo "mypy.ini missing"; exit 1; }
      - name: Determine changed Python files
        id: changed-python
        uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36
        with:
          list-files: shell
          filters: |
            python:
              - 'src/**/*.py'

      - name: Strict mypy on changed Python files
        if: steps.changed-python.outputs.python == 'true'
        env:
          CHANGED_PYTHON_FILES: ${{ steps.changed-python.outputs.python_files }}
        run: |
          set -euo pipefail
          python tools/run_mypy_strict_on_changed.py
      - name: mypy
        env:
          MYPY_FORCE_COLOR: '1'
        run: |
          set -euo pipefail
          mypy --config-file mypy.ini src 2>&1 | tee mypy-report.txt
      - name: Upload mypy backlog report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: mypy-report-${{ github.run_id }}
          path: mypy-report.txt
          if-no-files-found: error
      - name: Upload typing snapshot
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: mypy-snapshot-${{ github.run_id }}
          path: .mypy_cache

  tests:
    runs-on: ubuntu-latest
    needs: [types]
    steps:
      - uses: ./.github/actions/python-setup
      - name: Pytest (guardrail suite)
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: |
          set -euo pipefail
          pytest -m guardrail --maxfail=1 -q
      - name: Pytest (coverage)
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: |
          set -euo pipefail
          pytest \
            tests/current \
            tests/data_foundation \
            tests/operations \
            tests/trading \
            tests/runtime \
            tests/observability \
            tests/risk \
            tests/tools \
            --cov=src \
            --junitxml=pytest-report.xml \
            --cov-report=term \
            --cov-report=xml:coverage.xml \
            -q | tee pytest.log
      - name: Pytest guardrails (ingest + risk modules)
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: |
          set -euo pipefail
          python -m tools.telemetry.pytest_guardrails \
            --report pytest-report.xml \
            --require tests.data_foundation.test_timescale_backbone_orchestrator \
            --require tests.data_foundation.test_production_ingest_slice \
            --require tests.trading.test_risk_policy \
            --require tests.trading.test_risk_policy_telemetry \
            > pytest-guardrails.txt
          {
            echo "## Pytest guardrails (ingest + risk)";
            cat pytest-guardrails.txt;
          } >> "$GITHUB_STEP_SUMMARY"
      - name: Coverage matrix (ingest + risk guardrail)
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: |
          set -euo pipefail
          python -m tools.telemetry.coverage_matrix \
            --coverage-report coverage.xml \
            --format markdown \
            --require-file src/data_foundation/ingest/timescale_pipeline.py \
            --require-file src/data_foundation/ingest/production_slice.py \
            --require-file src/data_foundation/ingest/institutional_vertical.py \
            --require-file src/data_foundation/ingest/configuration.py \
            --require-file src/trading/risk/risk_policy.py \
            --require-file src/trading/risk/policy_telemetry.py \
            > coverage-matrix.md
          {
            echo "## Coverage matrix (ingest + risk guardrail)";
            cat coverage-matrix.md;
          } >> "$GITHUB_STEP_SUMMARY"
      - name: Coverage guardrails (critical domains)
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: |
          set -euo pipefail
          python -m tools.telemetry.coverage_guardrails \
            --report coverage.xml \
            --min-percent 82.0 \
            > coverage-guardrails.txt
          {
            echo "## Coverage guardrails (critical domains)";
            cat coverage-guardrails.txt;
          } >> "$GITHUB_STEP_SUMMARY"
      - name: Publish pytest summary
        if: always()
        run: |
          {
            echo "## Pytest summary";
            if [ -f pytest.log ]; then
              tail -n 40 pytest.log;
            else
              echo "pytest.log missing";
            fi
          } >> "$GITHUB_STEP_SUMMARY"
      - name: Upload pytest log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pytest-log-${{ github.run_id }}
          path: pytest.log
          if-no-files-found: ignore
      - name: Alert drill failure sentinel
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.alert_drill == 'true' }}
        run: |
          echo "Intentionally failing CI to exercise the failure-alert workflow."
          exit 1

  tests-full:
    runs-on: ubuntu-latest
    needs: [types]
    if: ${{ github.event_name != 'pull_request' || contains(join(github.event.pull_request.labels.*.name, ','), 'ci:full-tests') }}
    steps:
      - uses: ./.github/actions/python-setup
      - name: Pytest (full suite)
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: |
          set -euo pipefail
          pytest tests --cov=src --cov-report=term -q | tee pytest-full.log
      - name: Publish full-suite pytest summary
        if: always()
        run: |
          {
            echo "## Pytest (full suite)";
            if [ -f pytest-full.log ]; then
              tail -n 40 pytest-full.log;
            else
              echo "pytest-full.log missing";
            fi
          } >> "$GITHUB_STEP_SUMMARY"
      - name: Upload full-suite pytest log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pytest-full-log-${{ github.run_id }}
          path: pytest-full.log
          if-no-files-found: ignore

  paper-trading:
    runs-on: ubuntu-latest
    needs: [tests]
    steps:
      - uses: ./.github/actions/python-setup
      - name: Generate order lifecycle journal
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: |
          set -euo pipefail
          mkdir -p artifacts/order_lifecycle
          python scripts/order_lifecycle_dry_run.py \
            examples/order_lifecycle/orders.json \
            examples/order_lifecycle/events.jsonl \
            --journal artifacts/order_lifecycle/order_events.parquet
      - name: Reconcile paper positions
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: |
          set -euo pipefail
          python scripts/reconcile_positions.py \
            --journal artifacts/order_lifecycle/order_events.parquet \
            --broker examples/order_lifecycle/broker.json \
            --output artifacts/order_lifecycle/reconciliation_report.json \
            --fail-on-discrepancy
      - name: Upload paper trading artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: paper-trading-artifacts-${{ github.run_id }}
          path: artifacts/order_lifecycle

  backtest:
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' || contains(join(github.event.pull_request.labels.*.name, ','), 'ci:backtest')
    needs: [tests]
    steps:
      - uses: ./.github/actions/python-setup
      - name: Prepare fixtures
        run: |
          mkdir -p data/md_capture data/macro docs/reports/backtests
          printf '{"symbol":"EURUSD","timestamp":"2025-01-01T00:00:00","bids":[[1.1,1000000]],"asks":[[1.1002,1200000]]}\n' > data/md_capture/capture.jsonl
          printf '{"timestamp":"2025-01-01T00:30:00","event":"CPI","currency":"EUR"}\n' > data/macro/calendar.jsonl
      - name: Run backtest
        run: |
          set -euo pipefail
          python scripts/backtest_report.py --file data/md_capture/capture.jsonl --macro-file data/macro/calendar.jsonl --out-dir docs/reports/backtests
          if test -f docs/reports/backtests/why_features.csv; then
            python scripts/generate_html_report.py --csv docs/reports/backtests/why_features.csv --out docs/reports/backtests/WHY_FEATURES.html
          else
            echo "why_features.csv missing; skipping HTML."
          fi
      - uses: actions/upload-artifact@v4
        with:
          name: backtest-report
          path: docs/reports/backtests
