from typing import Any, Mapping, Sequence

class Producer:
    def __init__(self, config: Mapping[str, Any]) -> None: ...
    def produce(self, topic: str, value: bytes, key: str | bytes | None = ...) -> Any: ...
    def flush(self, timeout: float | None = ...) -> Any: ...

class Consumer:
    def __init__(self, config: Mapping[str, Any]) -> None: ...
    def subscribe(self, topics: Sequence[str]) -> None: ...
    def poll(self, timeout: float | None = ...) -> Any: ...
    def commit(self, message: Any | None = ..., asynchronous: bool = ...) -> Any: ...
    def close(self) -> None: ...
