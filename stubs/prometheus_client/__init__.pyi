from typing import Dict, Optional, Sequence

# Minimal typing stubs for prometheus_client used by our codebase.

class Counter:
    def __init__(self, name: str, documentation: str, labelnames: Optional[Sequence[str]] = ...) -> None: ...
    def inc(self, amount: float = ...) -> None: ...
    def labels(self, **labels: str) -> "Counter": ...
    # Convenience API sometimes present in wrappers
    def with_labels(self, labels: Dict[str, str]) -> "Counter": ...

class Gauge:
    def __init__(self, name: str, documentation: str, labelnames: Optional[Sequence[str]] = ...) -> None: ...
    def set(self, value: float) -> None: ...
    def inc(self, amount: float = ...) -> None: ...
    def dec(self, amount: float = ...) -> None: ...
    def labels(self, **labels: str) -> "Gauge": ...
    def with_labels(self, labels: Dict[str, str]) -> "Gauge": ...

class Histogram:
    def __init__(
        self,
        name: str,
        documentation: str,
        buckets: Optional[Sequence[float]] = ...,
        labelnames: Optional[Sequence[str]] = ...,
    ) -> None: ...
    def observe(self, value: float) -> None: ...
    def labels(self, **labels: str) -> "Histogram": ...
    def with_labels(self, labels: Dict[str, str]) -> "Histogram": ...

def start_http_server(port: int) -> None: ...