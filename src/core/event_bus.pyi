from __future__ import annotations

from typing import Awaitable, Callable

class Event:
    type: str
    payload: dict[str, object] | object
    timestamp: float
    source: str | None

class SubscriptionHandle:
    id: int
    event_type: str
    handler: Callable[[Event], Awaitable[None]] | Callable[[Event], None]

class AsyncEventBus:
    def subscribe(self, event_type: str, handler: Callable[[Event], Awaitable[None]] | Callable[[Event], None]) -> SubscriptionHandle: ...
    def unsubscribe(self, handle: SubscriptionHandle) -> None: ...
    async def publish(self, event: Event) -> None: ...
    def publish_from_sync(self, event: Event) -> int | None: ...
    async def start(self) -> None: ...
    async def stop(self) -> None: ...
    def is_running(self) -> bool: ...
    async def emit(self, topic: str, payload: dict[str, object] | object, source: str | None = None) -> None: ...

EventBus = AsyncEventBus

class TopicBus:
    def publish_sync(self, topic: str, payload: dict[str, object] | object, source: str | None = None) -> int | None: ...
    def subscribe_topic(self, topic: str, handler: Callable[[str, object], None | Awaitable[None]]) -> SubscriptionHandle: ...
    def publish(self, topic: str, payload: dict[str, object] | object) -> int | None: ...
    def subscribe(self, topic: str, handler: Callable[[object], None | Awaitable[None]]) -> SubscriptionHandle: ...
    def unsubscribe(self, handle: SubscriptionHandle) -> None: ...

event_bus: AsyncEventBus

def get_global_bus() -> TopicBus: ...
async def publish_event(event: Event) -> None: ...
def subscribe_to_event(event_type: str, callback: Callable[[Event], Awaitable[None]] | Callable[[Event], None]) -> SubscriptionHandle: ...
def unsubscribe_from_event(event_type: str, callback: Callable[[Event], Awaitable[None]] | Callable[[Event], None]) -> None: ...
async def start_event_bus() -> None: ...
async def stop_event_bus() -> None: ...