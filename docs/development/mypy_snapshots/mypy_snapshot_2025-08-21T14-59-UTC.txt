src/core/instrument.py:27: error: Function is missing a return type annotation 
[no-untyped-def]
        def __post_init__(self):
        ^
src/core/instrument.py:27: note: Use "-> None" if function does not return a value
src/core/instrument.py:43: error: Explicit "Any" is not allowed  [explicit-any]
        def to_dict(self) -> Dict[str, Any]:
        ^
src/core/instrument.py:59: error: Explicit "Any" is not allowed  [explicit-any]
        def from_dict(cls, data: Dict[str, Any]) -> 'Instrument':
        ^
src/core/instrument.py:64: error: Function is missing a type annotation for one
or more arguments  [no-untyped-def]
        def forex(cls, symbol: str, **kwargs) -> 'Instrument':
        ^
src/core/instrument.py:74: error: Function is missing a type annotation for one
or more arguments  [no-untyped-def]
        def crypto(cls, symbol: str, **kwargs) -> 'Instrument':
        ^
src/config/sensory_config.py:16: error: Incompatible types in assignment
(expression has type "None", variable has type "list[str]")  [assignment]
        timeframes: List[str] = None
                                ^~~~
src/config/sensory_config.py:43: error: Function is missing a return type
annotation  [no-untyped-def]
        def __post_init__(self):
        ^
src/config/sensory_config.py:43: note: Use "-> None" if function does not return a value
src/config/sensory_config.py:45: error: Statement is unreachable  [unreachable]
                self.timeframes = ["M5", "M15", "H1", "H4"]
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/trading/risk/market_regime_detector.py:13: error: Explicit "Any" is not
allowed  [explicit-any]
        async def detect_regime(self, data: Any) -> SimpleNamespace:
        ^
src/thinking/sentient_adaptation_engine.py:24: error: Explicit "Any" is not
allowed  [explicit-any]
        async def adapt_in_real_time(self, *args: Any, **kwargs: Any) -> D...
        ^
src/thinking/adversarial/adversarial_trainer.py:26: error: Explicit "Any" is
not allowed  [explicit-any]
        async def train_generator(
        ^
src/thinking/adversarial/adversarial_trainer.py:84: error: Explicit "Any" is
not allowed  [explicit-any]
        async def train_discriminator(
        ^
src/thinking/adversarial/adversarial_trainer.py:97: error: Explicit "Any" is
not allowed  [explicit-any]
            improved: List[Any] = []
            ^~~~~~~~~~~~~~~~~~~~~~~~
src/sensory/enhanced/why_dimension.py:9: error: Explicit "Any" is not allowed 
[explicit-any]
        def analyze_fundamental_intelligence(self, data: Dict[str, float] ...
        ^
src/sensory/enhanced/how_dimension.py:9: error: Explicit "Any" is not allowed 
[explicit-any]
        def analyze_institutional_intelligence(self, data: Dict[str, float...
        ^
src/sensory/enhanced/anomaly_dimension.py:9: error: Explicit "Any" is not
allowed  [explicit-any]
        def analyze_anomaly_intelligence(self, series: list[float] | Itera...
        ^
src/sensory/enhanced/anomaly/manipulation_detection.py:12: error: Explicit
"Any" is not allowed  [explicit-any]
        async def detect_manipulation(self, data: Any) -> List[Dict[str, A...
        ^
src/sensory/dimensions/why/yield_signal.py:26: error: Statement is unreachable 
[unreachable]
                return
                ^~~~~~
src/sensory/dimensions/why/yield_signal.py:56: error: Name "slope" already
defined on line 32  [no-redef]
        def slope(self, short: str = None, long: str = None) -> Optional[f...
        ^
src/sensory/dimensions/why/yield_signal.py:56: error: Incompatible default for
argument "short" (default has type "None", argument has type "str") 
[assignment]
        def slope(self, short: str = None, long: str = None) -> Optional[f...
                                     ^~~~
src/sensory/dimensions/why/yield_signal.py:56: note: PEP 484 prohibits implicit Optional. Accordingly, mypy has changed its default to no_implicit_optional=True
src/sensory/dimensions/why/yield_signal.py:56: note: Use https://github.com/hauntsaninja/no_implicit_optional to automatically upgrade your codebase
src/sensory/dimensions/why/yield_signal.py:56: error: Incompatible default for
argument "long" (default has type "None", argument has type "str")  [assignment]
    ...  def slope(self, short: str = None, long: str = None) -> Optional[flo...
                                                        ^~~~
src/sensory/dimensions/why/yield_signal.py:66: error: Too many arguments for
"slope" of "YieldSlopeTracker"  [call-arg]
            return self.slope("2Y", "10Y")
                   ^~~~~~~~~~~~~~~~~~~~~~~
src/sensory/dimensions/why/yield_signal.py:69: error: Too many arguments for
"slope" of "YieldSlopeTracker"  [call-arg]
            return self.slope("5Y", "30Y")
                   ^~~~~~~~~~~~~~~~~~~~~~~
src/sensory/anomaly/anomaly_sensor.py:12: error: Explicit "Any" is not allowed 
[explicit-any]
        def process(self, data: Any) -> List[Dict[str, Any]]:
        ^
src/market_intelligence/dimensions/enhanced_why_dimension.py:14: error:
Explicit "Any" is not allowed  [explicit-any]
    def __getattr__(name: str) -> Any:
    ^
src/market_intelligence/dimensions/enhanced_when_dimension.py:14: error:
Explicit "Any" is not allowed  [explicit-any]
    def __getattr__(name: str) -> Any:
    ^
src/market_intelligence/dimensions/enhanced_what_dimension.py:14: error:
Explicit "Any" is not allowed  [explicit-any]
    def __getattr__(name: str) -> Any:
    ^
src/market_intelligence/dimensions/enhanced_how_dimension.py:14: error:
Explicit "Any" is not allowed  [explicit-any]
    def __getattr__(name: str) -> Any:
    ^
src/market_intelligence/dimensions/enhanced_anomaly_dimension.py:14: error:
Explicit "Any" is not allowed  [explicit-any]
    def __getattr__(name: str) -> Any:
    ^
src/governance/safety_manager.py:29: error: Function is missing a type
annotation for one or more arguments  [no-untyped-def]
        def from_config(cls, config) -> "SafetyManager":
        ^
src/evolution/selection/adversarial_selector.py:12: error: Explicit "Any" is
not allowed  [explicit-any]
        def __init__(self, **kwargs: Any) -> None:
        ^
src/evolution/selection/adversarial_selector.py:15: error: Explicit "Any" is
not allowed  [explicit-any]
        def select(self, population: Sequence[Any] | None, k: int = 1) -> ...
        ^
src/data_integration/real_data_integration.py:12: error: Explicit "Any" is not
allowed  [explicit-any]
        def __init__(self, config: Optional[dict[str, Any]] = None) -> Non...
        ^
src/data_integration/real_data_integration.py:15: error: Explicit "Any" is not
allowed  [explicit-any]
        async def get_market_data(self, symbol: str, source: str | None = ...
        ^
src/core/sensory_organ.py:10: error: Explicit "Any" is not allowed 
[explicit-any]
        def process(self, data: Dict[str, Any]) -> Dict[str, Any]:
        ^
src/core/sensory_organ.py:25: error: Explicit "Any" is not allowed 
[explicit-any]
        def process(self, data: Dict[str, Any]) -> Dict[str, Any]:
        ^
src/core/regime.py:19: error: Explicit "Any" is not allowed  [explicit-any]
    class RegimeResult:
    ^~~~~~~~~~~~~~~~~~
src/core/regime.py:23: error: Explicit "Any" is not allowed  [explicit-any]
        metadata: Optional[Dict[str, Any]] = None
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/core/regime.py:34: error: Explicit "Any" is not allowed  [explicit-any]
        async def detect_regime(self, data: Any) -> Optional[RegimeResult]...
        ^
src/core/regime.py:42: error: Explicit "Any" is not allowed  [explicit-any]
        async def detect_regime(self, data: Any) -> Optional[RegimeResult]...
        ^
src/core/market_data.py:25: error: Explicit "Any" is not allowed 
[explicit-any]
        def fetch_data(
        ^
src/core/market_data.py:36: error: Explicit "Any" is not allowed 
[explicit-any]
        async def get_market_data(
        ^
src/core/market_data.py:51: error: Explicit "Any" is not allowed 
[explicit-any]
        def fetch_data(
        ^
src/core/market_data.py:61: error: Explicit "Any" is not allowed 
[explicit-any]
        async def get_market_data(
        ^
src/core/config_access.py:25: error: Explicit "Any" is not allowed 
[explicit-any]
        def get_value(self, key: str, default: Any = None) -> Any:
        ^
src/core/config_access.py:29: error: Explicit "Any" is not allowed 
[explicit-any]
        def get_namespace(self, namespace: str) -> Dict[str, Any]:
        ^
src/core/config_access.py:37: error: Explicit "Any" is not allowed 
[explicit-any]
        def get_value(self, key: str, default: Any = None) -> Any:
        ^
src/core/config_access.py:40: error: Explicit "Any" is not allowed 
[explicit-any]
        def get_namespace(self, namespace: str) -> Dict[str, Any]:
        ^
src/core/anomaly.py:18: error: Explicit "Any" is not allowed  [explicit-any]
    class AnomalyEvent:
    ^~~~~~~~~~~~~~~~~~
src/core/anomaly.py:20: error: Explicit "Any" is not allowed  [explicit-any]
        timestamp: Any
        ^~~~~~~~~~~~~~
src/core/anomaly.py:23: error: Explicit "Any" is not allowed  [explicit-any]
        metadata: Dict[str, Any]
        ^~~~~~~~~~~~~~~~~~~~~~~~
src/core/anomaly.py:30: error: Explicit "Any" is not allowed  [explicit-any]
        async def detect_manipulation(self, data: Any) -> List[Dict[str, A...
        ^
src/core/anomaly.py:43: error: Explicit "Any" is not allowed  [explicit-any]
        async def detect_manipulation(self, data: Any) -> List[Dict[str, A...
        ^
src/core/event_bus.pyi:6: error: Explicit "Any" is not allowed  [explicit-any]
        payload: dict[str, Any] | Any
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/core/event_bus.pyi:23: error: Explicit "Any" is not allowed  [explicit-any]
        async def emit(self, topic: str, payload: dict[str, Any] | Any, so...
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/core/event_bus.pyi:28: error: Explicit "Any" is not allowed  [explicit-any]
        def publish_sync(self, topic: str, payload: dict[str, Any] | Any, ...
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/core/event_bus.pyi:29: error: Explicit "Any" is not allowed  [explicit-any]
        def subscribe_topic(self, topic: str, handler: Callable[[str, Any]...
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/core/event_bus.pyi:30: error: Explicit "Any" is not allowed  [explicit-any]
        def publish(self, topic: str, payload: dict[str, Any] | Any) -> in...
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/core/event_bus.pyi:31: error: Explicit "Any" is not allowed  [explicit-any]
        def subscribe(self, topic: str, handler: Callable[[Any], None | Aw...
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/core/event_bus.pyi:39: error: Explicit "Any" is not allowed  [explicit-any]
    def unsubscribe_from_event(event_type: str, callback: Callable[[Event]...
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/core/evolution/population.py:7: error: Explicit "Any" is not allowed 
[explicit-any]
        def __init__(self, individuals: List[Any] | None = None) -> None:
        ^
src/core/evolution/fitness.py:7: error: Explicit "Any" is not allowed 
[explicit-any]
        def evaluate(self, individual: Any) -> float: ...
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/trading/strategy_engine/testing/strategy_tester.py:43: error: Explicit
"Any" is not allowed  [explicit-any]
        async def test_strategies(
        ^
src/trading/strategy_engine/testing/strategy_tester.py:88: error: Explicit
"Any" is not allowed  [explicit-any]
        async def _evaluate_strategy_performance(self, strategy: Dict[str,...
        ^
src/trading/strategy_engine/testing/strategy_tester.py:108: error: Explicit
"Any" is not allowed  [explicit-any]
        def _calculate_adaptation_score(self, strategy: Dict[str, Any], sc...
        ^
src/trading/order_management/order_book/snapshot.py:46: error: Function is
missing a return type annotation  [no-untyped-def]
        def __post_init__(self):
        ^
src/trading/order_management/order_book/snapshot.py:46: note: Use "-> None" if function does not return a value
src/trading/models/trade.py:27: error: Function is missing a return type
annotation  [no-untyped-def]
        def __post_init__(self):
        ^
src/trading/models/trade.py:27: note: Use "-> None" if function does not return a value
src/trading/models/trade.py:29: error: Statement is unreachable  [unreachable]
                self.timestamp = datetime.fromisoformat(self.timestamp)
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/trading/models/order.py:44: error: Incompatible types in assignment
(expression has type "None", variable has type "datetime")  [assignment]
        created_at: datetime = None
                               ^~~~
src/trading/models/order.py:48: error: Function is missing a return type
annotation  [no-untyped-def]
        def __post_init__(self):
        ^
src/trading/models/order.py:48: note: Use "-> None" if function does not return a value
src/trading/models/order.py:50: error: Statement is unreachable  [unreachable]
                self.created_at = datetime.now()
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/trading/execution/__init__.py:13: error: Function is missing a type
annotation  [no-untyped-def]
    def __getattr__(name):
    ^
src/trading/execution/__init__.py:15: error: Unused "type: ignore" comment 
[unused-ignore]
            from .execution_engine import ExecutionEngine  # type: ignore
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/thinking/models/types.py:17: error: Explicit "Any" is not allowed 
[explicit-any]
        weaknesses: Sequence[Any]
        ^~~~~~~~~~~~~~~~~~~~~~~~~
src/thinking/models/types.py:51: error: Explicit "Any" is not allowed 
[explicit-any]
        parameters: Dict[str, Any]
        ^~~~~~~~~~~~~~~~~~~~~~~~~~
src/thinking/models/types.py:58: error: Explicit "Any" is not allowed 
[explicit-any]
        market_share_analysis: Dict[str, Any]
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/sensory/signals.py:9: error: Explicit "Any" is not allowed  [explicit-any]
    class SensorSignal:
    ^~~~~~~~~~~~~~~~~~
src/sensory/signals.py:13: error: Explicit "Any" is not allowed  [explicit-any]
        value: Any
        ^~~~~~~~~~
src/sensory/signals.py:16: error: Explicit "Any" is not allowed  [explicit-any]
        metadata: Optional[Dict[str, Any]] = None
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/sensory/anomaly/__init__.py:3: error: Unused "type: ignore" comment 
[unused-ignore]
    from .anomaly_sensor import AnomalySensor  # type: ignore
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/operational/md_capture.py:17: error: Function is missing a type annotation
for one or more arguments  [no-untyped-def]
    def _serialize_order_book(symbol: str, order_book) -> Dict[str, Any]:
    ^
src/operational/md_capture.py:17: error: Explicit "Any" is not allowed 
[explicit-any]
    def _serialize_order_book(symbol: str, order_book) -> Dict[str, Any]:
    ^
src/operational/md_capture.py:18: error: Function is missing a type annotation
for one or more arguments  [no-untyped-def]
        def side(entries) -> List[Tuple[float, float]]:
        ^
src/operational/md_capture.py:34: error: Function is missing a type annotation
for one or more arguments  [no-untyped-def]
        def attach_to_manager(self, manager) -> None:
        ^
src/operational/md_capture.py:35: error: Function is missing a type annotation
for one or more arguments  [no-untyped-def]
            def on_md(symbol: str, order_book) -> None:
            ^
src/operational/md_capture.py:53: error: Explicit "Any" is not allowed 
[explicit-any]
        def replay(self, callback: Callable[[str, Dict[str, Any]], None], ...
        ^
src/data_sources/yahoo_finance.py:17: error: Explicit "Any" is not allowed 
[explicit-any]
        def __init__(self, config: Dict[str, Any] | None = None) -> None:
        ^
src/data_foundation/replay/multidim_replayer.py:11: error: Function is missing
a return type annotation  [no-untyped-def]
    def _parse_jsonl(path: str):
    ^
src/data_foundation/replay/multidim_replayer.py:30: error: Missing type
parameters for generic type "dict"  [type-arg]
                   on_md: Optional[Callable[[dict], None]] = None,
                                             ^
src/data_foundation/replay/multidim_replayer.py:31: error: Missing type
parameters for generic type "dict"  [type-arg]
                   on_macro: Optional[Callable[[dict], None]] = None,
                                                ^
src/data_foundation/replay/multidim_replayer.py:32: error: Missing type
parameters for generic type "dict"  [type-arg]
                   on_yield: Optional[Callable[[dict], None]] = None,
                                                ^
src/data_foundation/replay/multidim_replayer.py:48: error: Function is missing
a type annotation  [no-untyped-def]
            def ts(e):
            ^
src/data_foundation/persist/jsonl_writer.py:8: error: Explicit "Any" is not
allowed  [explicit-any]
    def write_events_jsonl(events: List[Dict[str, Any]], out_path: str) ->...
    ^
src/core/validation_models.py:10: error: Explicit "Any" is not allowed 
[explicit-any]
        def __init__(
        ^
src/core/validation_models.py:29: error: Explicit "Any" is not allowed 
[explicit-any]
        def to_dict(self) -> Dict[str, Any]:
        ^
src/core/risk_ports.py:39: error: Explicit "Any" is not allowed  [explicit-any]
        def validate_position(self, position: Dict[str, Any], instrument: ...
        ^
src/core/risk_ports.py:53: error: Explicit "Any" is not allowed  [explicit-any]
        def validate_position(self, position: Dict[str, Any], instrument: ...
        ^
src/core/interfaces.py:19: error: Explicit "Any" is not allowed  [explicit-any]
        def get(self, key: str) -> Optional[Any]: ...
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/core/interfaces.py:20: error: Explicit "Any" is not allowed  [explicit-any]
        def set(self, key: str, value: Any) -> None: ...
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/core/interfaces.py:30: error: Explicit "Any" is not allowed  [explicit-any]
        def publish(self, event: str, payload: Mapping[str, Any] | None = ...
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/core/interfaces.py:42: error: Explicit "Any" is not allowed  [explicit-any]
        def info(self, msg: str, /, **kwargs: Any) -> None: ...
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/core/interfaces.py:43: error: Explicit "Any" is not allowed  [explicit-any]
        def debug(self, msg: str, /, **kwargs: Any) -> None: ...
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/core/interfaces.py:44: error: Explicit "Any" is not allowed  [explicit-any]
        def warning(self, msg: str, /, **kwargs: Any) -> None: ...
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/core/interfaces.py:45: error: Explicit "Any" is not allowed  [explicit-any]
        def error(self, msg: str, /, **kwargs: Any) -> None: ...
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/core/interfaces.py:54: error: Explicit "Any" is not allowed  [explicit-any]
        def get(self, key: str, default: Any | None = ...) -> Any: ...
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/core/interfaces.py:63: error: Explicit "Any" is not allowed  [explicit-any]
        def evaluate_portfolio_risk(
        ^
src/core/interfaces.py:68: error: Explicit "Any" is not allowed  [explicit-any]
        def propose_rebalance(
        ^
src/core/interfaces.py:73: error: Explicit "Any" is not allowed  [explicit-any]
        def update_limits(self, limits: Mapping[str, Any]) -> None: ...
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/core/interfaces.py:93: error: Missing type parameters for generic type
"Callable"  [type-arg]
    ... def initialize_population(self, genome_factory: Callable) -> None: .....
                                                        ^
src/core/interfaces.py:97: error: Explicit "Any" is not allowed  [explicit-any]
        def get_population_statistics(self) -> Dict[str, Any]: ...
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/core/interfaces.py:110: error: Missing type parameters for generic type
"Callable"  [type-arg]
    ... def initialize_population(self, genome_factory: Callable) -> None:  #...
                                                        ^
src/core/interfaces.py:122: error: Explicit "Any" is not allowed 
[explicit-any]
        def get_population_statistics(self) -> Dict[str, Any]:  # pragma: ...
        ^
src/core/interfaces.py:182: error: Explicit "Any" is not allowed 
[explicit-any]
        async def get_portfolio_summary(self) -> Dict[str, Any]: ...
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/core/base.py:35: error: Explicit "Any" is not allowed  [explicit-any]
    class InstrumentMeta:
    ^~~~~~~~~~~~~~~~~~~~
src/core/base.py:40: error: Explicit "Any" is not allowed  [explicit-any]
        extra: Dict[str, Any] = field(default_factory=dict)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/core/base.py:44: error: Explicit "Any" is not allowed  [explicit-any]
    class DimensionalReading:
    ^~~~~~~~~~~~~~~~~~~~~~~~
src/core/base.py:55: error: Explicit "Any" is not allowed  [explicit-any]
        context: Dict[str, Any] = field(default_factory=dict)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/core/base.py:58: error: Explicit "Any" is not allowed  [explicit-any]
        evidence: Dict[str, Any] = field(default_factory=dict)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/core/base.py:83: error: Explicit "Any" is not allowed  [explicit-any]
        def __init__(self, *args: Any, **kwargs: Any) -> None:
        ^
src/core/base.py:88: error: Explicit "Any" is not allowed  [explicit-any]
            ts_raw: Any = kwargs.pop("timestamp", datetime.utcnow())
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/core/base.py:96: error: Unused "type: ignore" comment  [unused-ignore]
                    return float(x)  # type: ignore[arg-type]
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/core/strategy/engine.py:23: error: Function is missing a return type
annotation  [no-untyped-def]
        async def generate_signal(self, market_data, symbol: str):
        ^
src/core/strategy/engine.py:23: error: Function is missing a type annotation
for one or more arguments  [no-untyped-def]
        async def generate_signal(self, market_data, symbol: str):
        ^
src/trading/strategy_engine/__init__.py:6: error: Unused "type: ignore" comment
 [unused-ignore]
    from src.core.strategy.engine import StrategyEngine  # type: ignore
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/thinking/models/normalizers.py:21: error: Explicit "Any" is not allowed 
[explicit-any]
    def _to_float(value: Any, default: float = 0.0) -> float:
    ^
src/thinking/models/normalizers.py:23: error: Unused "type: ignore" comment 
[unused-ignore]
            return float(value)  # type: ignore[arg-type]
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/thinking/models/normalizers.py:95: error: Explicit "Any" is not allowed 
[explicit-any]
    def normalize_attack_report(a: Mapping[str, Any] | object) -> AttackRe...
    ^
src/thinking/models/normalizers.py:107: error: Explicit "Any" is not allowed 
[explicit-any]
        def _as_mapping(obj: object) -> Optional[Mapping[str, Any]]:
        ^
src/thinking/models/normalizers.py:113: error: Unused "type: ignore" comment 
[unused-ignore]
                    d = obj.dict()  # type: ignore[attr-defined]
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/operational/mock_fix.py:18: error: Explicit "Any" is not allowed 
[explicit-any]
        def __init__(self, order_cbs: List[Callable[[Any], None]]):
        ^
src/operational/mock_fix.py:21: error: Explicit "Any" is not allowed 
[explicit-any]
        def send_message_and_track(self, msg: Any) -> bool:
        ^
src/operational/mock_fix.py:24: error: Function is missing a return type
annotation  [no-untyped-def]
                def _emit_reject():
                ^
src/operational/mock_fix.py:24: note: Use "-> None" if function does not return a value
src/operational/mock_fix.py:25: error: Explicit "Any" is not allowed 
[explicit-any]
                    info: Any = type("OrderInfo", (), {})()
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/operational/mock_fix.py:37: error: Function is missing a return type
annotation  [no-untyped-def]
                def _emit_cancel():
                ^
src/operational/mock_fix.py:37: note: Use "-> None" if function does not return a value
src/operational/mock_fix.py:38: error: Explicit "Any" is not allowed 
[explicit-any]
                    info: Any = type("OrderInfo", (), {})()
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/operational/mock_fix.py:50: error: Function is missing a return type
annotation  [no-untyped-def]
            def _emit_new():
            ^
src/operational/mock_fix.py:50: note: Use "-> None" if function does not return a value
src/operational/mock_fix.py:51: error: Explicit "Any" is not allowed 
[explicit-any]
                info: Any = type("OrderInfo", (), {})()
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/operational/mock_fix.py:59: error: Function is missing a return type
annotation  [no-untyped-def]
            def _emit_partial():
            ^
src/operational/mock_fix.py:59: note: Use "-> None" if function does not return a value
src/operational/mock_fix.py:61: error: Explicit "Any" is not allowed 
[explicit-any]
                info: Any = type("OrderInfo", (), {})()
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/operational/mock_fix.py:69: error: Function is missing a return type
annotation  [no-untyped-def]
            def _emit_fill():
            ^
src/operational/mock_fix.py:69: note: Use "-> None" if function does not return a value
src/operational/mock_fix.py:71: error: Explicit "Any" is not allowed 
[explicit-any]
                info: Any = type("OrderInfo", (), {})()
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/operational/mock_fix.py:86: error: Function is missing a return type
annotation  [no-untyped-def]
        def __init__(self):
        ^
src/operational/mock_fix.py:86: note: Use "-> None" if function does not return a value
src/operational/mock_fix.py:87: error: Explicit "Any" is not allowed 
[explicit-any]
            self._md_cbs: List[Callable[[str, Any], None]] = []
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/operational/mock_fix.py:88: error: Explicit "Any" is not allowed 
[explicit-any]
            self._order_cbs: List[Callable[[Any], None]] = []
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/operational/mock_fix.py:92: error: Explicit "Any" is not allowed 
[explicit-any]
        def add_market_data_callback(self, cb: Callable[[str, Any], None])...
        ^
src/operational/mock_fix.py:95: error: Explicit "Any" is not allowed 
[explicit-any]
        def add_order_callback(self, cb: Callable[[Any], None]) -> None:
        ^
src/operational/mock_fix.py:101: error: Function is missing a return type
annotation  [no-untyped-def]
            def _emit_md_loop():
            ^
src/operational/mock_fix.py:101: note: Use "-> None" if function does not return a value
src/operational/mock_fix.py:104: error: Explicit "Any" is not allowed 
[explicit-any]
                    book: Any = type("Book", (), {})()
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/core/strategy/templates/trend_strategies.py:9: error: Explicit "Any" is not
allowed  [explicit-any]
        def __init__(self, strategy_id: str, symbols: List[str], params: D...
        ^
src/core/strategy/templates/trend_strategies.py:13: error: Function is missing
a return type annotation  [no-untyped-def]
        async def generate_signal(self, market_data, symbol: str):
        ^
src/core/strategy/templates/trend_strategies.py:13: error: Function is missing
a type annotation for one or more arguments  [no-untyped-def]
        async def generate_signal(self, market_data, symbol: str):
        ^
src/core/strategy/templates/moving_average.py:9: error: Explicit "Any" is not
allowed  [explicit-any]
        def __init__(self, strategy_id: str, symbols: List[str], params: D...
        ^
src/core/strategy/templates/moving_average.py:14: error: Explicit "Any" is not
allowed  [explicit-any]
        async def generate_signal(self, market_data: List[Any], symbol: st...
        ^
src/core/strategy/templates/mean_reversion.py:9: error: Explicit "Any" is not
allowed  [explicit-any]
        def __init__(self, strategy_id: str, symbols: List[str], params: D...
        ^
src/core/strategy/templates/mean_reversion.py:13: error: Explicit "Any" is not
allowed  [explicit-any]
        async def generate_signal(self, market_data: List[Any], symbol: st...
        ^
src/core/performance/market_data_cache.py:8: error: Explicit "Any" is not
allowed  [explicit-any]
            self._store: Dict[str, Any] = {}
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/core/performance/market_data_cache.py:11: error: Explicit "Any" is not
allowed  [explicit-any]
        def set(self, key: str, value: Any, ttl_seconds: int = 300) -> Non...
        ^
src/core/performance/market_data_cache.py:15: error: Explicit "Any" is not
allowed  [explicit-any]
        def get(self, key: str, default: Any = None) -> Any:
        ^
src/core/performance/market_data_cache.py:27: error: Explicit "Any" is not
allowed  [explicit-any]
            self._data: Dict[str, Dict[str, Any]] = {}
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/core/performance/market_data_cache.py:29: error: Explicit "Any" is not
allowed  [explicit-any]
            self._kv_store: Dict[str, Any] = {}
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/core/performance/market_data_cache.py:40: error: Explicit "Any" is not
allowed  [explicit-any]
        def get_snapshot(self, symbol: str) -> Dict[str, Any] | None:
        ^
src/core/performance/market_data_cache.py:57: error: Explicit "Any" is not
allowed  [explicit-any]
        def set(self, key: str, value: Any, ttl_seconds: int = 300) -> Non...
        ^
src/core/performance/market_data_cache.py:62: error: Explicit "Any" is not
allowed  [explicit-any]
        def get(self, key: str, default: Any = None) -> Any:
        ^
src/core/performance/market_data_cache.py:81: error: Unused "type: ignore"
comment  [unused-ignore]
    LegacyInMemoryCache = _InMemoryCache  # type: ignore
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/validation/phase2_validation_suite.py:20: error: Unused "type: ignore"
comment  [unused-ignore]
        class MultiDimensionalFitnessEvaluator:  # type: ignore
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/validation/phase2_validation_suite.py:28: error: Unused "type: ignore"
comment  [unused-ignore]
        class MarketRegimeDetector:  # type: ignore
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/validation/phase2_validation_suite.py:29: error: Function is missing a
return type annotation  [no-untyped-def]
            def __call__(self):
            ^
src/validation/phase2_validation_suite.py:29: note: Use "-> None" if function does not return a value
src/validation/phase2_validation_suite.py:53: error: Explicit "Any" is not
allowed  [explicit-any]
        async def run_all_tests(self) -> Dict[str, Any]:
        ^
src/validation/phase2_validation_suite.py:75: error: Function is missing a
return type annotation  [no-untyped-def]
        async def _test_response_time(self):
        ^
src/validation/phase2_validation_suite.py:75: note: Use "-> None" if function does not return a value
src/validation/phase2_validation_suite.py:104: error: Function is missing a
return type annotation  [no-untyped-def]
        async def _test_throughput(self):
        ^
src/validation/phase2_validation_suite.py:104: note: Use "-> None" if function does not return a value
src/validation/phase2_validation_suite.py:137: error: Function is missing a
return type annotation  [no-untyped-def]
        async def _test_memory_usage(self):
        ^
src/validation/phase2_validation_suite.py:137: note: Use "-> None" if function does not return a value
src/validation/phase2_validation_suite.py:175: error: Function is missing a
return type annotation  [no-untyped-def]
        async def _test_cpu_usage(self):
        ^
src/validation/phase2_validation_suite.py:175: note: Use "-> None" if function does not return a value
src/validation/phase2_validation_suite.py:201: error: Function is missing a
return type annotation  [no-untyped-def]
        async def _test_anomaly_detection_accuracy(self):
        ^
src/validation/phase2_validation_suite.py:201: note: Use "-> None" if function does not return a value
src/validation/phase2_validation_suite.py:207: error: Unused "type: ignore"
comment  [unused-ignore]
                    df = await self.market_data.get_market_data("EURUSD=X"...
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/validation/phase2_validation_suite.py:341: error: Explicit "Any" is not
allowed  [explicit-any]
        def _generate_summary(self) -> Dict[str, Any]:
        ^
src/validation/performance/memory_profiler.py:17: error: Explicit "Any" is not
allowed  [explicit-any]
    class MemoryProfile:
    ^~~~~~~~~~~~~~~~~~~
src/validation/performance/memory_profiler.py:23: error: Explicit "Any" is not
allowed  [explicit-any]
        details: Dict[str, Any]
        ^~~~~~~~~~~~~~~~~~~~~~~
src/validation/performance/memory_profiler.py:29: error: Function is missing a
return type annotation  [no-untyped-def]
        def __init__(self):
        ^
src/validation/performance/memory_profiler.py:29: note: Use "-> None" if function does not return a value
src/validation/performance/memory_profiler.py:32: error: Function is missing a
return type annotation  [no-untyped-def]
        def start_profiling(self):
        ^
src/validation/performance/memory_profiler.py:32: note: Use "-> None" if function does not return a value
src/validation/performance/memory_profiler.py:53: error: Function is missing a
type annotation for one or more arguments  [no-untyped-def]
        def check_memory_leaks(self, test_func, iterations: int = 100) -> ...
        ^
src/validation/performance/memory_profiler.py:53: error: Explicit "Any" is not
allowed  [explicit-any]
        def check_memory_leaks(self, test_func, iterations: int = 100) -> ...
        ^
src/validation/performance/benchmarker.py:30: error: Function is missing a
return type annotation  [no-untyped-def]
        def __init__(self):
        ^
src/validation/performance/benchmarker.py:30: note: Use "-> None" if function does not return a value
src/validation/performance/benchmarker.py:38: error: Function is missing a type
annotation for one or more arguments  [no-untyped-def]
        def benchmark_response_time(self, func, *args, **kwargs) -> Benchm...
        ^
src/validation/performance/benchmarker.py:53: error: Function is missing a type
annotation for one or more arguments  [no-untyped-def]
        def benchmark_throughput(self, func, iterations: int = 100) -> Ben...
        ^
src/validation/performance/benchmarker.py:99: error: Function is missing a type
annotation for one or more arguments  [no-untyped-def]
        def run_all_benchmarks(self, test_func) -> Dict[str, BenchmarkResu...
        ^
src/trading/monitoring/portfolio_tracker.py:88: error: Function is missing a
type annotation for one or more arguments  [no-untyped-def]
        def attach_to_manager(self, fix_manager) -> None:
        ^
src/trading/monitoring/portfolio_tracker.py:90: error: Function is missing a
type annotation  [no-untyped-def]
            def _on_order(order_info):
            ^
src/trading/monitoring/portfolio_tracker.py:98: error: Function is missing a
type annotation for one or more arguments  [no-untyped-def]
        def _handle_order_info(self, order) -> None:
        ^
src/thinking/learning/meta_cognition_engine.py:12: error: Cannot find
implementation or library stub for module named "src.core.events" 
[import-not-found]
        from src.core.events import ContextPacket, LearningSignal  # legac...
    ^
src/thinking/learning/meta_cognition_engine.py:14: error: Unused "type: ignore"
comment  [unused-ignore]
        LearningSignal = ContextPacket = object  # type: ignore
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/thinking/learning/meta_cognition_engine.py:37: error: Explicit "Any" is not
allowed  [explicit-any]
        async def assess_learning_quality(
        ^
src/thinking/learning/meta_cognition_engine.py:173: error: Returning Any from
function declared to return "float"  [no-any-return]
                return max(0.0, min(1.0, consistency_score))
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/thinking/learning/meta_cognition_engine.py:274: error: Returning Any from
function declared to return "float"  [no-any-return]
            return max(-1.0, min(1.0, correlation))
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/thinking/learning/meta_cognition_engine.py:276: error: Explicit "Any" is
not allowed  [explicit-any]
        async def calibrate_confidence(
        ^
src/thinking/learning/meta_cognition_engine.py:298: error: Returning Any from
function declared to return "Decimal"  [no-any-return]
                    return learning_signal.confidence_of_outcome
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/thinking/learning/meta_cognition_engine.py:320: error: Returning Any from
function declared to return "Decimal"  [no-any-return]
                return learning_signal.confidence_of_outcome
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/thinking/learning/meta_cognition_engine.py:322: error: Explicit "Any" is
not allowed  [explicit-any]
        async def _get_historical_predictions(self, context: ContextPacket...
        ^
src/thinking/learning/meta_cognition_engine.py:375: error: Explicit "Any" is
not allowed  [explicit-any]
        async def _store_learning_assessment(
        ^
src/thinking/learning/meta_cognition_engine.py:412: error: Explicit "Any" is
not allowed  [explicit-any]
        async def get_meta_cognitive_stats(self) -> Dict[str, Any]:
        ^
src/thinking/analysis/volume_analysis.py:12: error: Cannot find implementation
or library stub for module named "numba"  [import-not-found]
        from numba import jit
    ^
src/thinking/analysis/volume_analysis.py:49: error: Explicit "Any" is not
allowed  [explicit-any]
            def _get_config_value(key: str, default: Any) -> Any:
            ^
src/thinking/analysis/volume_analysis.py:51: error: Unused "type: ignore"
comment  [unused-ignore]
                    val = _config_provider.get_value(key, None)  # type: i...
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/thinking/analysis/volume_analysis.py:53: error: Unused "type: ignore"
comment  [unused-ignore]
                        ns = _config_provider.get_namespace("system")  # t...
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/thinking/analysis/volume_analysis.py:61: error: Unused "type: ignore"
comment  [unused-ignore]
                calculate_delta = jit(nopython=True)(calculate_delta)  # t...
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/sensory/services/symbol_mapper.py:96: error: Argument 1 to "SymbolInfo" has
incompatible type "**dict[str, object]"; expected "int"  [arg-type]
                self._symbols = {name: SymbolInfo(**info) for name, info i...
                                                    ^~~~
src/sensory/services/symbol_mapper.py:96: error: Argument 1 to "SymbolInfo" has
incompatible type "**dict[str, object]"; expected "str"  [arg-type]
                self._symbols = {name: SymbolInfo(**info) for name, info i...
                                                    ^~~~
src/sensory/services/symbol_mapper.py:96: error: Argument 1 to "SymbolInfo" has
incompatible type "**dict[str, object]"; expected "float"  [arg-type]
                self._symbols = {name: SymbolInfo(**info) for name, info i...
                                                    ^~~~
src/sensory/organs/sentiment_organ.py:12: error: Module "src.core.base" has no
attribute "SensoryOrgan"  [attr-defined]
    from src.core.base import MarketData, SensoryOrgan, SensoryReading
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/sentiment_organ.py:12: error: Module "src.core.base" has no
attribute "SensoryReading"  [attr-defined]
    from src.core.base import MarketData, SensoryOrgan, SensoryReading
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/sentiment_organ.py:17: error: Class cannot subclass
"SensoryOrgan" (has type "Any")  [misc]
    class SentimentOrgan(SensoryOrgan):
                         ^~~~~~~~~~~~
src/sensory/organs/sentiment_organ.py:20: error: Explicit "Any" is not allowed 
[explicit-any]
        def __init__(self, config: Optional[Dict[str, Any]] = None):
        ^
src/sensory/organs/news_organ.py:12: error: Module "src.core.base" has no
attribute "SensoryOrgan"  [attr-defined]
    from src.core.base import MarketData, SensoryOrgan, SensoryReading
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/news_organ.py:12: error: Module "src.core.base" has no
attribute "SensoryReading"  [attr-defined]
    from src.core.base import MarketData, SensoryOrgan, SensoryReading
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/news_organ.py:17: error: Class cannot subclass
"SensoryOrgan" (has type "Any")  [misc]
    class NewsOrgan(SensoryOrgan):
                    ^~~~~~~~~~~~
src/sensory/organs/news_organ.py:20: error: Explicit "Any" is not allowed 
[explicit-any]
        def __init__(self, config: Optional[Dict[str, Any]] = None):
        ^
src/sensory/organs/economic_organ.py:12: error: Module "src.core.base" has no
attribute "SensoryOrgan"  [attr-defined]
    from src.core.base import MarketData, SensoryOrgan, SensoryReading
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/economic_organ.py:12: error: Module "src.core.base" has no
attribute "SensoryReading"  [attr-defined]
    from src.core.base import MarketData, SensoryOrgan, SensoryReading
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/economic_organ.py:17: error: Class cannot subclass
"SensoryOrgan" (has type "Any")  [misc]
    class EconomicOrgan(SensoryOrgan):
                        ^~~~~~~~~~~~
src/sensory/organs/economic_organ.py:20: error: Explicit "Any" is not allowed 
[explicit-any]
        def __init__(self, config: Optional[Dict[str, Any]] = None):
        ^
src/sensory/organs/economic_organ.py:51: error: Missing type parameters for
generic type "tuple"  [type-arg]
    ...lculate_mock_economic_signals(self, market_data: MarketData) -> tuple:
                                                                       ^
src/operational/state_store.py:18: error: Function is missing a return type
annotation  [no-untyped-def]
        def __init__(self):
        ^
src/operational/state_store.py:18: note: Use "-> None" if function does not return a value
src/intelligence/adversarial_training.py:43: error: Explicit "Any" is not
allowed  [explicit-any]
    def __getattr__(name: str) -> Any:
    ^
src/intelligence/__init__.py:51: error: Explicit "Any" is not allowed 
[explicit-any]
    def __getattr__(name: str) -> Any:
    ^
src/intelligence/__init__.py:87: error: Unused "type: ignore" comment 
[unused-ignore]
            SentientAdaptationEngine = __getattr__("SentientAdaptationEngi...
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/intelligence/__init__.py:88: error: Unused "type: ignore" comment 
[unused-ignore]
            PredictiveMarketModeler = __getattr__("PredictiveMarketModeler...
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/intelligence/__init__.py:89: error: Unused "type: ignore" comment 
[unused-ignore]
            MarketGAN = __getattr__("MarketGAN")  # type: ignore
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/intelligence/__init__.py:90: error: Unused "type: ignore" comment 
[unused-ignore]
            AdversarialTrainer = __getattr__("AdversarialTrainer")  # type...
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/intelligence/__init__.py:91: error: Unused "type: ignore" comment 
[unused-ignore]
            RedTeamAI = __getattr__("RedTeamAI")  # type: ignore
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/intelligence/__init__.py:92: error: Unused "type: ignore" comment 
[unused-ignore]
            SpecializedPredatorEvolution = __getattr__("SpecializedPredato...
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/intelligence/__init__.py:93: error: Unused "type: ignore" comment 
[unused-ignore]
            PortfolioEvolutionEngine = __getattr__("PortfolioEvolutionEngi...
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/intelligence/__init__.py:94: error: Unused "type: ignore" comment 
[unused-ignore]
            CompetitiveIntelligenceSystem = __getattr__("CompetitiveIntell...
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/intelligence/__init__.py:124: error: Explicit "Any" is not allowed 
[explicit-any]
        async def run_intelligence_cycle(self, market_data: Dict[str, Any]...
        ^
src/intelligence/__init__.py:129: error: Statement is unreachable 
[unreachable]
            assert self.predictive_modeler is not None
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/intelligence/__init__.py:149: error: Unused "type: ignore" comment 
[unused-ignore]
                adaptation = await self.sentient_engine.adapt_in_real_time...
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/intelligence/__init__.py:153: error: Unused "type: ignore" comment 
[unused-ignore]
            predictions = await self.predictive_modeler.predict_market_sce...
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/intelligence/__init__.py:159: error: Unused "type: ignore" comment 
[unused-ignore]
            improved_strategies = await self.adversarial_trainer.train_adv...
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/intelligence/__init__.py:167: error: Unused "type: ignore" comment 
[unused-ignore]
                findings = await self.red_team.attack_strategy(strategy)  ...
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/intelligence/__init__.py:172: error: Unused "type: ignore" comment 
[unused-ignore]
            specialized_predators = await self.specialized_evolution.evolv...
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/intelligence/__init__.py:176: error: Unused "type: ignore" comment 
[unused-ignore]
            portfolio_result = await self.portfolio_evolution.evolve_portf...
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/intelligence/__init__.py:182: error: Unused "type: ignore" comment 
[unused-ignore]
            competitive_analysis = await self.competitive_intelligence.ana...
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/intelligence/__init__.py:189: error: Explicit "Any" is not allowed 
[explicit-any]
        async def get_phase3_status(self) -> Dict[str, Any]:
        ^
src/intelligence/__init__.py:192: error: Statement is unreachable 
[unreachable]
            assert self.predictive_modeler is not None
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/intelligence/__init__.py:200: error: Unused "type: ignore" comment 
[unused-ignore]
                "sentient_engine": self.sentient_engine.get_status(),  # t...
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/intelligence/__init__.py:201: error: Unused "type: ignore" comment 
[unused-ignore]
                "predictive_modeler": self.predictive_modeler.get_status()...
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/intelligence/__init__.py:202: error: Unused "type: ignore" comment 
[unused-ignore]
                "adversarial_trainer": self.adversarial_trainer.get_status...
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/intelligence/__init__.py:203: error: Unused "type: ignore" comment 
[unused-ignore]
                "red_team": self.red_team.get_status(),  # type: ignore[at...
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/intelligence/__init__.py:204: error: Unused "type: ignore" comment 
[unused-ignore]
                "specialized_evolution": self.specialized_evolution.get_st...
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/intelligence/__init__.py:205: error: Unused "type: ignore" comment 
[unused-ignore]
                "portfolio_evolution": self.portfolio_evolution.get_evolut...
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/intelligence/__init__.py:206: error: Unused "type: ignore" comment 
[unused-ignore]
                "competitive_intelligence": self.competitive_intelligence....
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/governance/strategy_registry.py:27: error: Function is missing a return
type annotation  [no-untyped-def]
        def _initialize_database(self):
        ^
src/governance/strategy_registry.py:27: note: Use "-> None" if function does not return a value
src/governance/strategy_registry.py:69: error: Function is missing a type
annotation for one or more arguments  [no-untyped-def]
        def register_champion(self, genome, fitness_report: Dict[str, Any]...
        ^
src/governance/strategy_registry.py:69: error: Explicit "Any" is not allowed 
[explicit-any]
        def register_champion(self, genome, fitness_report: Dict[str, Any]...
        ^
src/governance/strategy_registry.py:127: error: Explicit "Any" is not allowed 
[explicit-any]
        def get_strategy(self, strategy_id: str) -> Optional[Dict[str, Any...
        ^
src/governance/strategy_registry.py:197: error: Explicit "Any" is not allowed 
[explicit-any]
        def get_champion_strategies(self, limit: int = 10) -> List[Dict[st...
        ^
src/governance/strategy_registry.py:240: error: Explicit "Any" is not allowed 
[explicit-any]
        def get_strategies_by_status(self, status: str) -> List[Dict[str, ...
        ^
src/governance/strategy_registry.py:276: error: Explicit "Any" is not allowed 
[explicit-any]
        def get_registry_summary(self) -> Dict[str, Any]:
        ^
src/governance/strategy_registry.py:314: error: Function is missing a return
type annotation  [no-untyped-def]
        def close(self):
        ^
src/governance/strategy_registry.py:314: note: Use "-> None" if function does not return a value
src/governance/strategy_registry.py:320: error: Function is missing a type
annotation  [no-untyped-def]
        def __del__(self):
        ^
src/governance/audit_logger.py:27: error: Function is missing a return type
annotation  [no-untyped-def]
        def log_decision(self, decision_type: str, strategy_id: str, genom...
        ^
src/governance/audit_logger.py:27: error: Explicit "Any" is not allowed 
[explicit-any]
        def log_decision(self, decision_type: str, strategy_id: str, genom...
        ^
src/governance/audit_logger.py:45: error: Function is missing a return type
annotation  [no-untyped-def]
        def log_fitness_evaluation(self, genome_id: str, strategy_id: str,
        ^
src/governance/audit_logger.py:45: error: Explicit "Any" is not allowed 
[explicit-any]
        def log_fitness_evaluation(self, genome_id: str, strategy_id: str,
        ^
src/governance/audit_logger.py:64: error: Function is missing a return type
annotation  [no-untyped-def]
        def log_strategy_registration(self, strategy_id: str, genome_id: s...
        ^
src/governance/audit_logger.py:64: error: Explicit "Any" is not allowed 
[explicit-any]
        def log_strategy_registration(self, strategy_id: str, genome_id: s...
        ^
src/governance/audit_logger.py:79: error: Function is missing a return type
annotation  [no-untyped-def]
        def log_approval_workflow(self, workflow_id: str, strategy_id: str...
        ^
src/governance/audit_logger.py:79: error: Explicit "Any" is not allowed 
[explicit-any]
        def log_approval_workflow(self, workflow_id: str, strategy_id: str...
        ^
src/governance/audit_logger.py:98: error: Function is missing a return type
annotation  [no-untyped-def]
        def log_system_event(self, event_type: str, component: str,
        ^
src/governance/audit_logger.py:98: error: Explicit "Any" is not allowed 
[explicit-any]
        def log_system_event(self, event_type: str, component: str,
        ^
src/governance/audit_logger.py:124: error: Function is missing a return type
annotation  [no-untyped-def]
        def log_compliance_check(self, check_type: str, strategy_id: str,
        ^
src/governance/audit_logger.py:124: error: Explicit "Any" is not allowed 
[explicit-any]
        def log_compliance_check(self, check_type: str, strategy_id: str,
        ^
src/governance/audit_logger.py:145: error: Function is missing a return type
annotation  [no-untyped-def]
        def _write_log_entry(self, entry: Dict[str, Any]):
        ^
src/governance/audit_logger.py:145: error: Explicit "Any" is not allowed 
[explicit-any]
        def _write_log_entry(self, entry: Dict[str, Any]):
        ^
src/governance/audit_logger.py:153: error: Explicit "Any" is not allowed 
[explicit-any]
        def get_audit_history(self, strategy_id: Optional[str] = None,
        ^
src/governance/audit_logger.py:199: error: Explicit "Any" is not allowed 
[explicit-any]
        def get_audit_statistics(self) -> Dict[str, Any]:
        ^
src/governance/audit_logger.py:228: error: Need type annotation for
"event_types" (hint: "event_types: dict[<type>, <type>] = ...")  [var-annotated]
                event_types = {}
                ^~~~~~~~~~~
src/governance/audit_logger.py:229: error: Need type annotation for
"strategies" (hint: "strategies: dict[<type>, <type>] = ...")  [var-annotated]
                strategies = {}
                ^~~~~~~~~~
src/governance/audit_logger.py:271: error: Function is missing a return type
annotation  [no-untyped-def]
        def clear_audit_log(self):
        ^
src/governance/audit_logger.py:271: note: Use "-> None" if function does not return a value
src/governance/audit_logger.py:280: error: Function is missing a return type
annotation  [no-untyped-def]
        def export_audit_log(self, export_file: str):
        ^
src/genome/models/genome.py:20: error: Explicit "Any" is not allowed 
[explicit-any]
    def _to_float(value: Any) -> Optional[float]:
    ^
src/genome/models/genome.py:30: error: Explicit "Any" is not allowed 
[explicit-any]
    def _coerce_numeric_mapping(mapping: Any) -> Dict[str, float]:
    ^
src/genome/models/genome.py:37: error: Unused "type: ignore" comment 
[unused-ignore]
                items = vars(mapping).items()  # type: ignore[arg-type]
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/genome/models/genome.py:52: error: Explicit "Any" is not allowed 
[explicit-any]
    def _force_str_list(value: Any) -> List[str]:
    ^
src/genome/models/genome.py:59: error: Unused "type: ignore" comment 
[unused-ignore]
            for item in list(value):  # type: ignore[arg-type]
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/genome/models/genome.py:66: error: Explicit "Any" is not allowed 
[explicit-any]
    def _to_mutation_tag(entry: Any) -> Optional[str]:
    ^
src/genome/models/genome.py:109: error: Explicit "Any" is not allowed 
[explicit-any]
        def to_dict(self) -> Dict[str, Any]:
        ^
src/genome/models/genome.py:124: error: Explicit "Any" is not allowed 
[explicit-any]
        def from_dict(cls, data: Dict[str, Any]) -> "DecisionGenome":
        ^
src/genome/models/genome.py:135: error: Statement is unreachable  [unreachable]
                    try:
                    ^
src/genome/models/genome.py:136: error: Unused "type: ignore" comment 
[unused-ignore]
                        data = dict(vars(data))  # type: ignore[arg-type]
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/genome/models/genome.py:212: error: Explicit "Any" is not allowed 
[explicit-any]
        def with_updated(self, **kwargs: Any) -> "DecisionGenome":
        ^
src/genome/models/genome.py:237: error: Argument 1 to "DecisionGenome" has
incompatible type
"**dict[str, list[str] | dict[str, float] | float | str | None]"; expected "str"
 [arg-type]
            return DecisionGenome(**data)
                                    ^~~~
src/genome/models/genome.py:237: error: Argument 1 to "DecisionGenome" has
incompatible type
"**dict[str, list[str] | dict[str, float] | float | str | None]"; expected
"dict[str, float]"  [arg-type]
            return DecisionGenome(**data)
                                    ^~~~
src/genome/models/genome.py:237: error: Argument 1 to "DecisionGenome" has
incompatible type
"**dict[str, list[str] | dict[str, float] | float | str | None]"; expected
"float | None"  [arg-type]
            return DecisionGenome(**data)
                                    ^~~~
src/genome/models/genome.py:237: error: Argument 1 to "DecisionGenome" has
incompatible type
"**dict[str, list[str] | dict[str, float] | float | str | None]"; expected "int"
 [arg-type]
            return DecisionGenome(**data)
                                    ^~~~
src/genome/models/genome.py:237: error: Argument 1 to "DecisionGenome" has
incompatible type
"**dict[str, list[str] | dict[str, float] | float | str | None]"; expected
"str | None"  [arg-type]
            return DecisionGenome(**data)
                                    ^~~~
src/genome/models/genome.py:237: error: Argument 1 to "DecisionGenome" has
incompatible type
"**dict[str, list[str] | dict[str, float] | float | str | None]"; expected
"list[str]"  [arg-type]
            return DecisionGenome(**data)
                                    ^~~~
src/genome/models/genome.py:237: error: Argument 1 to "DecisionGenome" has
incompatible type
"**dict[str, list[str] | dict[str, float] | float | str | None]"; expected
"float"  [arg-type]
            return DecisionGenome(**data)
                                    ^~~~
src/evolution/mutation/gaussian_mutation.py:11: error: Module
"src.core.interfaces" has no attribute "IMutationStrategy"  [attr-defined]
    from src.core.interfaces import DecisionGenome, IMutationStrategy
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/evolution/mutation/gaussian_mutation.py:16: error: Class cannot subclass
"IMutationStrategy" (has type "Any")  [misc]
    class GaussianMutation(IMutationStrategy):
                           ^~~~~~~~~~~~~~~~~
src/evolution/mutation/gaussian_mutation.py:50: error: "DecisionGenome" has no
attribute "genome_id"  [attr-defined]
            mutated.genome_id = f"{genome.genome_id}_mutated_{random.randi...
            ^~~~~~~~~~~~~~~~~
src/evolution/mutation/gaussian_mutation.py:51: error: "DecisionGenome" has no
attribute "mutation_count"  [attr-defined]
            mutated.mutation_count = genome.mutation_count + 1
            ^~~~~~~~~~~~~~~~~~~~~~
src/evolution/mutation/gaussian_mutation.py:55: error: "DecisionGenome" has no
attribute "strategy"  [attr-defined]
                mutated.strategy.entry_threshold = self._mutate_parameter(
                ^~~~~~~~~~~~~~~~
src/evolution/mutation/gaussian_mutation.py:56: error: "DecisionGenome" has no
attribute "strategy"  [attr-defined]
                    mutated.strategy.entry_threshold, 0.0, 1.0
                    ^~~~~~~~~~~~~~~~
src/evolution/mutation/gaussian_mutation.py:59: error: "DecisionGenome" has no
attribute "strategy"  [attr-defined]
                mutated.strategy.exit_threshold = self._mutate_parameter(
                ^~~~~~~~~~~~~~~~
src/evolution/mutation/gaussian_mutation.py:60: error: "DecisionGenome" has no
attribute "strategy"  [attr-defined]
                    mutated.strategy.exit_threshold, 0.0, 1.0
                    ^~~~~~~~~~~~~~~~
src/evolution/mutation/gaussian_mutation.py:63: error: "DecisionGenome" has no
attribute "strategy"  [attr-defined]
                mutated.strategy.momentum_weight = self._mutate_parameter(
                ^~~~~~~~~~~~~~~~
src/evolution/mutation/gaussian_mutation.py:64: error: "DecisionGenome" has no
attribute "strategy"  [attr-defined]
                    mutated.strategy.momentum_weight, 0.0, 1.0
                    ^~~~~~~~~~~~~~~~
src/evolution/mutation/gaussian_mutation.py:67: error: "DecisionGenome" has no
attribute "strategy"  [attr-defined]
                mutated.strategy.trend_weight = self._mutate_parameter(
                ^~~~~~~~~~~~~~~~
src/evolution/mutation/gaussian_mutation.py:68: error: "DecisionGenome" has no
attribute "strategy"  [attr-defined]
                    mutated.strategy.trend_weight, 0.0, 1.0
                    ^~~~~~~~~~~~~~~~
src/evolution/mutation/gaussian_mutation.py:71: error: "DecisionGenome" has no
attribute "strategy"  [attr-defined]
                mutated.strategy.volume_weight = self._mutate_parameter(
                ^~~~~~~~~~~~~~~~
src/evolution/mutation/gaussian_mutation.py:72: error: "DecisionGenome" has no
attribute "strategy"  [attr-defined]
                    mutated.strategy.volume_weight, 0.0, 1.0
                    ^~~~~~~~~~~~~~~~
src/evolution/mutation/gaussian_mutation.py:75: error: "DecisionGenome" has no
attribute "strategy"  [attr-defined]
                mutated.strategy.sentiment_weight = self._mutate_parameter...
                ^~~~~~~~~~~~~~~~
src/evolution/mutation/gaussian_mutation.py:76: error: "DecisionGenome" has no
attribute "strategy"  [attr-defined]
                    mutated.strategy.sentiment_weight, 0.0, 1.0
                    ^~~~~~~~~~~~~~~~
src/evolution/mutation/gaussian_mutation.py:79: error: "DecisionGenome" has no
attribute "strategy"  [attr-defined]
                mutated.strategy.lookback_period = int(self._mutate_parame...
                ^~~~~~~~~~~~~~~~
src/evolution/mutation/gaussian_mutation.py:80: error: "DecisionGenome" has no
attribute "strategy"  [attr-defined]
                    mutated.strategy.lookback_period, 1, 100
                    ^~~~~~~~~~~~~~~~
src/evolution/mutation/gaussian_mutation.py:85: error: "DecisionGenome" has no
attribute "risk"  [attr-defined]
                mutated.risk.risk_tolerance = self._mutate_parameter(
                ^~~~~~~~~~~~
src/evolution/mutation/gaussian_mutation.py:86: error: "DecisionGenome" has no
attribute "risk"  [attr-defined]
                    mutated.risk.risk_tolerance, 0.0, 1.0
                    ^~~~~~~~~~~~
src/evolution/mutation/gaussian_mutation.py:89: error: "DecisionGenome" has no
attribute "risk"  [attr-defined]
                mutated.risk.position_size_multiplier = self._mutate_param...
                ^~~~~~~~~~~~
src/evolution/mutation/gaussian_mutation.py:90: error: "DecisionGenome" has no
attribute "risk"  [attr-defined]
                    mutated.risk.position_size_multiplier, 0.1, 5.0
                    ^~~~~~~~~~~~
src/evolution/mutation/gaussian_mutation.py:93: error: "DecisionGenome" has no
attribute "risk"  [attr-defined]
                mutated.risk.stop_loss_threshold = self._mutate_parameter(
                ^~~~~~~~~~~~
src/evolution/mutation/gaussian_mutation.py:94: error: "DecisionGenome" has no
attribute "risk"  [attr-defined]
                    mutated.risk.stop_loss_threshold, 0.001, 0.1
                    ^~~~~~~~~~~~
src/evolution/mutation/gaussian_mutation.py:97: error: "DecisionGenome" has no
attribute "risk"  [attr-defined]
                mutated.risk.take_profit_threshold = self._mutate_paramete...
                ^~~~~~~~~~~~
src/evolution/mutation/gaussian_mutation.py:98: error: "DecisionGenome" has no
attribute "risk"  [attr-defined]
                    mutated.risk.take_profit_threshold, 0.001, 0.2
                    ^~~~~~~~~~~~
src/evolution/mutation/gaussian_mutation.py:101: error: "DecisionGenome" has no
attribute "risk"  [attr-defined]
                mutated.risk.max_drawdown_limit = self._mutate_parameter(
                ^~~~~~~~~~~~
src/evolution/mutation/gaussian_mutation.py:102: error: "DecisionGenome" has no
attribute "risk"  [attr-defined]
                    mutated.risk.max_drawdown_limit, 0.01, 0.5
                    ^~~~~~~~~~~~
src/evolution/mutation/gaussian_mutation.py:105: error: "DecisionGenome" has no
attribute "risk"  [attr-defined]
                mutated.risk.volatility_threshold = self._mutate_parameter...
                ^~~~~~~~~~~~
src/evolution/mutation/gaussian_mutation.py:106: error: "DecisionGenome" has no
attribute "risk"  [attr-defined]
                    mutated.risk.volatility_threshold, 0.01, 1.0
                    ^~~~~~~~~~~~
src/evolution/mutation/gaussian_mutation.py:109: error: "DecisionGenome" has no
attribute "risk"  [attr-defined]
                mutated.risk.correlation_threshold = self._mutate_paramete...
                ^~~~~~~~~~~~
src/evolution/mutation/gaussian_mutation.py:110: error: "DecisionGenome" has no
attribute "risk"  [attr-defined]
                    mutated.risk.correlation_threshold, 0.0, 1.0
                    ^~~~~~~~~~~~
src/evolution/mutation/gaussian_mutation.py:115: error: "DecisionGenome" has no
attribute "timing"  [attr-defined]
                mutated.timing.holding_period_min = max(0, int(self._mutat...
                ^~~~~~~~~~~~~~
src/evolution/mutation/gaussian_mutation.py:116: error: "DecisionGenome" has no
attribute "timing"  [attr-defined]
                    mutated.timing.holding_period_min, 0, 10
                    ^~~~~~~~~~~~~~
src/evolution/mutation/gaussian_mutation.py:119: error: "DecisionGenome" has no
attribute "timing"  [attr-defined]
                mutated.timing.holding_period_max = max(
                ^~~~~~~~~~~~~~
src/evolution/mutation/gaussian_mutation.py:120: error: "DecisionGenome" has no
attribute "timing"  [attr-defined]
                    mutated.timing.holding_period_min + 1,
                    ^~~~~~~~~~~~~~
src/evolution/mutation/gaussian_mutation.py:121: error: "DecisionGenome" has no
attribute "timing"  [attr-defined]
                    int(self._mutate_parameter(mutated.timing.holding_peri...
                                               ^~~~~~~~~~~~~~
src/evolution/mutation/gaussian_mutation.py:124: error: "DecisionGenome" has no
attribute "timing"  [attr-defined]
                mutated.timing.reentry_delay = max(0, int(self._mutate_par...
                ^~~~~~~~~~~~~~
src/evolution/mutation/gaussian_mutation.py:125: error: "DecisionGenome" has no
attribute "timing"  [attr-defined]
                    mutated.timing.reentry_delay, 0, 20
                    ^~~~~~~~~~~~~~
src/evolution/mutation/gaussian_mutation.py:134: error: "DecisionGenome" has no
attribute "sensory"  [attr-defined]
                    setattr(mutated.sensory, weight_name, 
                            ^~~~~~~~~~~~~~~
src/evolution/mutation/gaussian_mutation.py:135: error: "DecisionGenome" has no
attribute "sensory"  [attr-defined]
    ...                  self._mutate_parameter(getattr(mutated.sensory, weig...
                                                        ^~~~~~~~~~~~~~~
src/evolution/mutation/gaussian_mutation.py:143: error: "DecisionGenome" has no
attribute "thinking"  [attr-defined]
                    setattr(mutated.thinking, weight_name, 
                            ^~~~~~~~~~~~~~~~
src/evolution/mutation/gaussian_mutation.py:144: error: "DecisionGenome" has no
attribute "thinking"  [attr-defined]
    ...                  self._mutate_parameter(getattr(mutated.thinking, wei...
                                                        ^~~~~~~~~~~~~~~~
src/evolution/mutation/gaussian_mutation.py:148: error: "DecisionGenome" has no
attribute "_normalize_weights"  [attr-defined]
            mutated._normalize_weights()
            ^~~~~~~~~~~~~~~~~~~~~~~~~~
src/evolution/ambusher/ambusher_orchestrator.py:15: error: Explicit "Any" is
not allowed  [explicit-any]
    AmbusherGenome = Dict[str, Any]  # simplified alias for compatibility
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/evolution/ambusher/ambusher_orchestrator.py:20: error: Function is missing
a type annotation  [no-untyped-def]
            def __init__(self, *_args, **_kwargs):
            ^
src/evolution/ambusher/ambusher_orchestrator.py:28: error: Explicit "Any" is
not allowed  [explicit-any]
        def __init__(self, config: Dict[str, Any]):
        ^
src/evolution/ambusher/ambusher_orchestrator.py:33: error: Too many arguments
for "AmbusherFitnessFunction"  [call-arg]
            self.fitness_function = AmbusherFitnessFunction(config.get('fi...
                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/evolution/ambusher/ambusher_orchestrator.py:38: error: Explicit "Any" is
not allowed  [explicit-any]
            self.evolution_history: List[Dict[str, Any]] = []
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/evolution/ambusher/ambusher_orchestrator.py:54: error: Function is missing
a return type annotation  [no-untyped-def]
        async def start(self):
        ^
src/evolution/ambusher/ambusher_orchestrator.py:54: note: Use "-> None" if function does not return a value
src/evolution/ambusher/ambusher_orchestrator.py:61: error: "EvolutionEngine"
has no attribute "load_genome"  [attr-defined]
                self.current_genome = self.genetic_engine.load_genome(str(...
                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/evolution/ambusher/ambusher_orchestrator.py:66: error: Function is missing
a return type annotation  [no-untyped-def]
        async def stop(self):
        ^
src/evolution/ambusher/ambusher_orchestrator.py:66: note: Use "-> None" if function does not return a value
src/evolution/ambusher/ambusher_orchestrator.py:71: error: Explicit "Any" is
not allowed  [explicit-any]
        async def evolve_strategy(self, market_data: Dict[str, Any], trade...
        ^
src/evolution/ambusher/ambusher_orchestrator.py:80: error: "evolve" of
"EvolutionEngine" does not return a value (it only ever returns None) 
[func-returns-value]
            _ = self.genetic_engine.evolve()
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/evolution/ambusher/ambusher_orchestrator.py:115: error: Explicit "Any" is
not allowed  [explicit-any]
        def get_current_strategy(self) -> Optional[Dict[str, Any]]:
        ^
src/evolution/ambusher/ambusher_orchestrator.py:119: error: Returning Any from
function declared to return "dict[str, Any] | None"  [no-any-return]
                    return self.current_genome.to_dict()
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/evolution/ambusher/ambusher_orchestrator.py:123: error: Explicit "Any" is
not allowed  [explicit-any]
        def get_performance_metrics(self) -> Dict[str, Any]:
        ^
src/evolution/ambusher/ambusher_orchestrator.py:127: error: Explicit "Any" is
not allowed  [explicit-any]
        def get_evolution_history(self) -> List[Dict[str, Any]]:
        ^
src/evolution/ambusher/ambusher_orchestrator.py:131: error: Function is missing
a return type annotation  [no-untyped-def]
        async def reset(self):
        ^
src/evolution/ambusher/ambusher_orchestrator.py:131: note: Use "-> None" if function does not return a value
src/evolution/ambusher/ambusher_orchestrator.py:155: error: Function is missing
a return type annotation  [no-untyped-def]
        def update_trade_metrics(self, trade_data: Dict[str, Any]):
        ^
src/evolution/ambusher/ambusher_orchestrator.py:155: error: Explicit "Any" is
not allowed  [explicit-any]
        def update_trade_metrics(self, trade_data: Dict[str, Any]):
        ^
src/ecosystem/species/factories.py:21: error: Cannot instantiate protocol class
"DecisionGenome"  [misc]
            genome = DecisionGenome(
                     ^
src/ecosystem/species/factories.py:21: error: Unexpected keyword argument
"species_type" for "DecisionGenome"  [call-arg]
            genome = DecisionGenome(
                     ^
.venv_mypy/lib/python3.12/site-packages/mypy/typeshed/stdlib/builtins.pyi:114: note: "DecisionGenome" defined here
src/ecosystem/species/factories.py:21: error: Unexpected keyword argument
"parameters" for "DecisionGenome"  [call-arg]
            genome = DecisionGenome(
                     ^
src/ecosystem/species/factories.py:21: error: Unexpected keyword argument
"indicators" for "DecisionGenome"  [call-arg]
            genome = DecisionGenome(
                     ^
src/ecosystem/species/factories.py:21: error: Unexpected keyword argument
"rules" for "DecisionGenome"  [call-arg]
            genome = DecisionGenome(
                     ^
src/ecosystem/species/factories.py:21: error: Unexpected keyword argument
"risk_profile" for "DecisionGenome"  [call-arg]
            genome = DecisionGenome(
                     ^
src/ecosystem/species/factories.py:84: error: Cannot instantiate protocol class
"DecisionGenome"  [misc]
            genome = DecisionGenome(
                     ^
src/ecosystem/species/factories.py:84: error: Unexpected keyword argument
"species_type" for "DecisionGenome"  [call-arg]
            genome = DecisionGenome(
                     ^
src/ecosystem/species/factories.py:84: error: Unexpected keyword argument
"parameters" for "DecisionGenome"  [call-arg]
            genome = DecisionGenome(
                     ^
src/ecosystem/species/factories.py:84: error: Unexpected keyword argument
"indicators" for "DecisionGenome"  [call-arg]
            genome = DecisionGenome(
                     ^
src/ecosystem/species/factories.py:84: error: Unexpected keyword argument
"rules" for "DecisionGenome"  [call-arg]
            genome = DecisionGenome(
                     ^
src/ecosystem/species/factories.py:84: error: Unexpected keyword argument
"risk_profile" for "DecisionGenome"  [call-arg]
            genome = DecisionGenome(
                     ^
src/ecosystem/species/factories.py:147: error: Cannot instantiate protocol
class "DecisionGenome"  [misc]
            genome = DecisionGenome(
                     ^
src/ecosystem/species/factories.py:147: error: Unexpected keyword argument
"species_type" for "DecisionGenome"  [call-arg]
            genome = DecisionGenome(
                     ^
src/ecosystem/species/factories.py:147: error: Unexpected keyword argument
"parameters" for "DecisionGenome"  [call-arg]
            genome = DecisionGenome(
                     ^
src/ecosystem/species/factories.py:147: error: Unexpected keyword argument
"indicators" for "DecisionGenome"  [call-arg]
            genome = DecisionGenome(
                     ^
src/ecosystem/species/factories.py:147: error: Unexpected keyword argument
"rules" for "DecisionGenome"  [call-arg]
            genome = DecisionGenome(
                     ^
src/ecosystem/species/factories.py:147: error: Unexpected keyword argument
"risk_profile" for "DecisionGenome"  [call-arg]
            genome = DecisionGenome(
                     ^
src/ecosystem/species/factories.py:208: error: Cannot instantiate protocol
class "DecisionGenome"  [misc]
            genome = DecisionGenome(
                     ^
src/ecosystem/species/factories.py:208: error: Unexpected keyword argument
"species_type" for "DecisionGenome"  [call-arg]
            genome = DecisionGenome(
                     ^
src/ecosystem/species/factories.py:208: error: Unexpected keyword argument
"parameters" for "DecisionGenome"  [call-arg]
            genome = DecisionGenome(
                     ^
src/ecosystem/species/factories.py:208: error: Unexpected keyword argument
"indicators" for "DecisionGenome"  [call-arg]
            genome = DecisionGenome(
                     ^
src/ecosystem/species/factories.py:208: error: Unexpected keyword argument
"rules" for "DecisionGenome"  [call-arg]
            genome = DecisionGenome(
                     ^
src/ecosystem/species/factories.py:208: error: Unexpected keyword argument
"risk_profile" for "DecisionGenome"  [call-arg]
            genome = DecisionGenome(
                     ^
src/ecosystem/species/factories.py:266: error: Cannot instantiate protocol
class "DecisionGenome"  [misc]
            genome = DecisionGenome(
                     ^
src/ecosystem/species/factories.py:266: error: Unexpected keyword argument
"species_type" for "DecisionGenome"  [call-arg]
            genome = DecisionGenome(
                     ^
src/ecosystem/species/factories.py:266: error: Unexpected keyword argument
"parameters" for "DecisionGenome"  [call-arg]
            genome = DecisionGenome(
                     ^
src/ecosystem/species/factories.py:266: error: Unexpected keyword argument
"indicators" for "DecisionGenome"  [call-arg]
            genome = DecisionGenome(
                     ^
src/ecosystem/species/factories.py:266: error: Unexpected keyword argument
"rules" for "DecisionGenome"  [call-arg]
            genome = DecisionGenome(
                     ^
src/ecosystem/species/factories.py:266: error: Unexpected keyword argument
"risk_profile" for "DecisionGenome"  [call-arg]
            genome = DecisionGenome(
                     ^
src/ecosystem/species/factories.py:332: error: Incompatible return value type
(got "ISpecialistGenomeFactory | None", expected "ISpecialistGenomeFactory") 
[return-value]
        return SPECIES_FACTORIES.get(species_type)
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/data_integration/__init__.py:17: error: Unused "type: ignore" comment 
[unused-ignore]
    class RealDataManager:  # type: ignore
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/data_integration/__init__.py:18: error: Function is missing a type
annotation for one or more arguments  [no-untyped-def]
        def __init__(self, *_args, **_kwargs) -> None:
        ^
src/data_integration/__init__.py:20: error: Function is missing a type
annotation  [no-untyped-def]
        async def get_market_data(self, *_args, **_kwargs):
        ^
src/data_integration/__init__.py:22: error: Unused "type: ignore" comment 
[unused-ignore]
    class DataSourceConfig:  # type: ignore
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/data_integration/__init__.py:24: error: Unused "type: ignore" comment 
[unused-ignore]
    class YahooFinanceDataProvider:  # type: ignore
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/data_integration/__init__.py:26: error: Unused "type: ignore" comment 
[unused-ignore]
    class AlphaVantageDataProvider:  # type: ignore
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/data_integration/__init__.py:28: error: Unused "type: ignore" comment 
[unused-ignore]
    class FREDDataProvider:  # type: ignore
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/data_integration/__init__.py:30: error: Unused "type: ignore" comment 
[unused-ignore]
    class NewsAPIDataProvider:  # type: ignore
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/data_integration/__init__.py:33: error: Unused "type: ignore" comment 
[unused-ignore]
    class MarketDataValidator:  # type: ignore
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/data_integration/__init__.py:35: error: Unused "type: ignore" comment 
[unused-ignore]
    class DataConsistencyChecker:  # type: ignore
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/data_integration/__init__.py:37: error: Unused "type: ignore" comment 
[unused-ignore]
    class DataQualityMonitor:  # type: ignore
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/data_integration/__init__.py:39: error: Unused "type: ignore" comment 
[unused-ignore]
    class ValidationLevel:  # type: ignore
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/data_integration/__init__.py:44: error: Unused "type: ignore" comment 
[unused-ignore]
    class DataQualityThresholds:  # type: ignore
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/data_integration/__init__.py:46: error: Unused "type: ignore" comment 
[unused-ignore]
    class DataIssue:  # type: ignore
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/core/adaptation.py:33: error: Explicit "Any" is not allowed  [explicit-any]
        async def adapt_in_real_time(
        ^
src/core/adaptation.py:64: error: Explicit "Any" is not allowed  [explicit-any]
        async def adapt_in_real_time(
        ^
src/ui/ui_manager.py:16: error: Module "src.governance.strategy_registry" has
no attribute "StrategyStatus"  [attr-defined]
        from src.governance.strategy_registry import StrategyRegistry, Str...
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/ui/ui_manager.py:19: error: Name "EventBus" already defined (possibly by an
import)  [no-redef]
        class EventBus:
        ^
src/ui/ui_manager.py:20: error: Function is missing a return type annotation 
[no-untyped-def]
            def __init__(self):
            ^
src/ui/ui_manager.py:20: note: Use "-> None" if function does not return a value
src/ui/ui_manager.py:23: error: Function is missing a return type annotation 
[no-untyped-def]
            async def connect(self):
            ^
src/ui/ui_manager.py:23: note: Use "-> None" if function does not return a value
src/ui/ui_manager.py:26: error: Function is missing a return type annotation 
[no-untyped-def]
            async def disconnect(self):
            ^
src/ui/ui_manager.py:26: note: Use "-> None" if function does not return a value
src/ui/ui_manager.py:29: error: Function is missing a return type annotation 
[no-untyped-def]
            async def publish(self, subject: str, data: Dict[str, Any]):
            ^
src/ui/ui_manager.py:29: error: Explicit "Any" is not allowed  [explicit-any]
            async def publish(self, subject: str, data: Dict[str, Any]):
            ^
src/ui/ui_manager.py:32: error: Name "StrategyStatus" already defined (possibly
by an import)  [no-redef]
        class StrategyStatus:
        ^
src/ui/ui_manager.py:38: error: Name "StrategyRegistry" already defined
(possibly by an import)  [no-redef]
        class StrategyRegistry:
        ^
src/ui/ui_manager.py:39: error: Function is missing a return type annotation 
[no-untyped-def]
            def __init__(self):
            ^
src/ui/ui_manager.py:39: note: Use "-> None" if function does not return a value
src/ui/ui_manager.py:42: error: Explicit "Any" is not allowed  [explicit-any]
            def register_strategy(self, strategy_id: str, config: Dict[str...
            ^
src/ui/ui_manager.py:51: error: Explicit "Any" is not allowed  [explicit-any]
            def get_strategy(self, strategy_id: str) -> Optional[Dict[str,...
            ^
src/ui/ui_manager.py:54: error: Explicit "Any" is not allowed  [explicit-any]
            def list_strategies(self) -> List[Dict[str, Any]]:
            ^
src/ui/ui_manager.py:75: error: Function is missing a return type annotation 
[no-untyped-def]
        def __init__(self):
        ^
src/ui/ui_manager.py:75: note: Use "-> None" if function does not return a value
src/ui/ui_manager.py:83: error: "AsyncEventBus" has no attribute "connect" 
[attr-defined]
                await self.event_bus.connect()
                      ^~~~~~~~~~~~~~~~~~~~~~
src/ui/ui_manager.py:90: error: Function is missing a return type annotation 
[no-untyped-def]
        async def shutdown(self):
        ^
src/ui/ui_manager.py:90: note: Use "-> None" if function does not return a value
src/ui/ui_manager.py:93: error: "AsyncEventBus" has no attribute "disconnect" 
[attr-defined]
                await self.event_bus.disconnect()
                      ^~~~~~~~~~~~~~~~~~~~~~~~~
src/ui/ui_manager.py:96: error: Explicit "Any" is not allowed  [explicit-any]
        def get_system_status(self) -> Dict[str, Any]:
        ^
src/ui/ui_manager.py:101: error: "StrategyRegistry" has no attribute
"list_strategies"  [attr-defined]
                "total_strategies": len(self.strategy_registry.list_strate...
                                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/ui/ui_manager.py:103: error: "StrategyRegistry" has no attribute
"list_strategies"  [attr-defined]
                    s for s in self.strategy_registry.list_strategies()
                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/ui/ui_manager.py:108: error: Explicit "Any" is not allowed  [explicit-any]
        def list_strategies(self) -> List[Dict[str, Any]]:
        ^
src/ui/ui_manager.py:110: error: Returning Any from function declared to return
"list[dict[str, Any]]"  [no-any-return]
            return self.strategy_registry.list_strategies()
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/ui/ui_manager.py:110: error: "StrategyRegistry" has no attribute
"list_strategies"  [attr-defined]
            return self.strategy_registry.list_strategies()
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/ui/ui_manager.py:112: error: Explicit "Any" is not allowed  [explicit-any]
        def get_strategy_details(self, strategy_id: str) -> Optional[Dict[...
        ^
src/ui/ui_manager.py:134: error: Function is missing a return type annotation 
[no-untyped-def]
        async def broadcast_event(self, event_type: str, data: Dict[str, A...
        ^
src/ui/ui_manager.py:134: error: Explicit "Any" is not allowed  [explicit-any]
        async def broadcast_event(self, event_type: str, data: Dict[str, A...
        ^
src/ui/ui_manager.py:137: error: Too many arguments for "publish" of
"AsyncEventBus"  [call-arg]
                await self.event_bus.publish(f"ui.{event_type}", data)
                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/ui/ui_manager.py:137: error: Argument 1 to "publish" of "AsyncEventBus" has
incompatible type "str"; expected "Event"  [arg-type]
                await self.event_bus.publish(f"ui.{event_type}", data)
                                             ^~~~~~~~~~~~~~~~~~
src/ui/ui_manager.py:139: error: Explicit "Any" is not allowed  [explicit-any]
        def format_strategy_table(self, strategies: List[Dict[str, Any]]) ...
        ^
src/trading/monitoring/parity_checker.py:14: error: Function is missing a type
annotation for one or more arguments  [no-untyped-def]
        def __init__(self, fix_manager) -> None:
        ^
src/trading/monitoring/parity_checker.py:17: error: Explicit "Any" is not
allowed  [explicit-any]
        def check_orders(self, broker_orders: Dict[str, Any]) -> int:
        ^
src/trading/monitoring/parity_checker.py:44: error: Explicit "Any" is not
allowed  [explicit-any]
        def compare_order_fields(self, local_order: Any, broker_order: Dic...
        ^
src/trading/monitoring/parity_checker.py:48: error: Explicit "Any" is not
allowed  [explicit-any]
            diffs: Dict[str, Any] = {}
            ^~~~~~~~~~~~~~~~~~~~~~~~~~
src/trading/monitoring/parity_checker.py:50: error: Function is missing a type
annotation  [no-untyped-def]
                def norm(v):
                ^
src/trading/monitoring/parity_checker.py:70: error: Explicit "Any" is not
allowed  [explicit-any]
        def check_positions(self, broker_positions: Dict[str, Any]) -> int...
        ^
src/genome/models/adapters.py:13: error: Explicit "Any" is not allowed 
[explicit-any]
    def _get(obj: Any, key: str, default: Any = None) -> Any:
    ^
src/genome/models/adapters.py:22: error: Explicit "Any" is not allowed 
[explicit-any]
    def from_legacy(obj: Any) -> DecisionGenome:
    ^
src/genome/models/adapters.py:31: error: Explicit "Any" is not allowed 
[explicit-any]
            data: Dict[str, Any] = {
            ^
src/genome/models/adapters.py:59: error: Explicit "Any" is not allowed 
[explicit-any]
    def to_legacy_view(genome: DecisionGenome) -> Dict[str, Any]:
    ^
src/evolution/engine/__init__.py:8: error: Unused "type: ignore" comment 
[unused-ignore]
    from src.core.evolution.engine import EvolutionConfig, EvolutionEngine...
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/evolution/engine/__init__.py:11: error: Unused "type: ignore" comment 
[unused-ignore]
    from src.core.evolution.population import Population  # type: ignore
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/evolution/__init__.py:17: error: Unused "type: ignore" comment 
[unused-ignore]
    from src.core.evolution.engine import EvolutionConfig, EvolutionEngine...
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/evolution/__init__.py:18: error: Unused "type: ignore" comment 
[unused-ignore]
    from src.core.evolution.fitness import FitnessEvaluator  # type: ignor...
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/evolution/__init__.py:20: error: Unused "type: ignore" comment 
[unused-ignore]
    from src.core.evolution.population import Population  # type: ignore
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/data_foundation/config/why_config.py:10: error: Incompatible types in
assignment (expression has type "None", variable has type Module)  [assignment]
        yaml = None
               ^~~~
src/data_foundation/config/sizing_config.py:10: error: Incompatible types in
assignment (expression has type "None", variable has type Module)  [assignment]
        yaml = None
               ^~~~
src/data_foundation/config/sizing_config.py:18: error: Missing type parameters
for generic type "dict"  [type-arg]
        regime_multipliers: dict = None # e.g., {"calm":1.0,"normal":0.8,"...
                            ^
src/data_foundation/config/sizing_config.py:18: error: Incompatible types in
assignment (expression has type "None", variable has type "dict[Any, Any]") 
[assignment]
        regime_multipliers: dict = None # e.g., {"calm":1.0,"normal":0.8,"...
                                   ^~~~
src/data_foundation/config/risk_portfolio_config.py:10: error: Incompatible
types in assignment (expression has type "None", variable has type Module) 
[assignment]
        yaml = None
               ^~~~
src/data_foundation/config/execution_config.py:10: error: Incompatible types in
assignment (expression has type "None", variable has type Module)  [assignment]
        yaml = None
               ^~~~
src/core/configuration.py:22: error: Explicit "Any" is not allowed 
[explicit-any]
    class Configuration:
    ^~~~~~~~~~~~~~~~~~~
src/core/configuration.py:32: error: Explicit "Any" is not allowed 
[explicit-any]
        sensory: Dict[str, Any] = field(default_factory=dict)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/core/configuration.py:33: error: Explicit "Any" is not allowed 
[explicit-any]
        thinking: Dict[str, Any] = field(default_factory=dict)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/core/configuration.py:34: error: Explicit "Any" is not allowed 
[explicit-any]
        trading: Dict[str, Any] = field(default_factory=dict)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/core/configuration.py:35: error: Explicit "Any" is not allowed 
[explicit-any]
        evolution: Dict[str, Any] = field(default_factory=dict)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/core/configuration.py:36: error: Explicit "Any" is not allowed 
[explicit-any]
        governance: Dict[str, Any] = field(default_factory=dict)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/core/configuration.py:37: error: Explicit "Any" is not allowed 
[explicit-any]
        operational: Dict[str, Any] = field(default_factory=dict)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/core/configuration.py:40: error: Explicit "Any" is not allowed 
[explicit-any]
        redis: Dict[str, Any] = field(default_factory=dict)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/core/configuration.py:41: error: Explicit "Any" is not allowed 
[explicit-any]
        postgresql: Dict[str, Any] = field(default_factory=dict)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/core/configuration.py:42: error: Explicit "Any" is not allowed 
[explicit-any]
        nats: Dict[str, Any] = field(default_factory=dict)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/core/configuration.py:43: error: Explicit "Any" is not allowed 
[explicit-any]
        ctrader: Dict[str, Any] = field(default_factory=dict)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/core/configuration.py:45: error: Function is missing a return type
annotation  [no-untyped-def]
        def __post_init__(self):
        ^
src/core/configuration.py:45: note: Use "-> None" if function does not return a value
src/core/configuration.py:49: error: Function is missing a return type
annotation  [no-untyped-def]
        def _load_environment_variables(self):
        ^
src/core/configuration.py:49: note: Use "-> None" if function does not return a value
src/core/configuration.py:70: error: Function is missing a return type
annotation  [no-untyped-def]
        def to_yaml(self, config_path: Union[str, Path]):
        ^
src/core/configuration.py:99: error: Explicit "Any" is not allowed 
[explicit-any]
        def get(self, key: str, default: Any = None) -> Any:
        ^
src/core/configuration.py:112: error: Function is missing a return type
annotation  [no-untyped-def]
        def set(self, key: str, value: Any):
        ^
src/core/configuration.py:112: error: Explicit "Any" is not allowed 
[explicit-any]
        def set(self, key: str, value: Any):
        ^
src/core/configuration.py:122: error: Unsupported target for indexed assignment
("Configuration")  [index]
            config[keys[-1]] = value
            ^~~~~~~~~~~~~~~~
src/trading/execution/execution_model.py:16: error: Function is missing a type
annotation for one or more arguments  [no-untyped-def]
    def estimate_slippage_bps(ctx: ExecContext, cfg) -> float:
    ^
src/genome/models/genome_adapter.py:24: error: Unused "type: ignore" comment 
[unused-ignore]
        from src.genome.models.genome import (  # type: ignore
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/genome/models/genome_adapter.py:30: error: Cannot assign to a type  [misc]
        _DecisionGenome = None  # type: ignore[assignment]
        ^~~~~~~~~~~~~~~
src/genome/models/genome_adapter.py:30: note: Error code "misc" not covered by "type: ignore" comment
src/genome/models/genome_adapter.py:31: error: Incompatible types in assignment
(expression has type "None", variable has type
"Callable[[DecisionGenome, str, dict[str, float]], DecisionGenome]") 
[assignment]
        _mutate = None
                  ^~~~
src/genome/models/genome_adapter.py:32: error: Incompatible types in assignment
(expression has type "None", variable has type
"Callable[[str, dict[str, float], int, str | None], DecisionGenome]") 
[assignment]
        _new_genome = None
                      ^~~~
src/genome/models/genome_adapter.py:35: error: Unused "type: ignore" comment 
[unused-ignore]
        from src.genome.models.adapters import (  # type: ignore
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/genome/models/genome_adapter.py:40: error: Incompatible types in assignment
(expression has type "None", variable has type
"Callable[[Any], DecisionGenome]")  [assignment]
        _from_legacy = None
                       ^~~~
src/genome/models/genome_adapter.py:41: error: Incompatible types in assignment
(expression has type "None", variable has type
"Callable[[DecisionGenome], dict[str, Any]]")  [assignment]
        _to_legacy_view = None
                          ^~~~
src/genome/models/genome_adapter.py:44: error: Explicit "Any" is not allowed 
[explicit-any]
    def _coerce_float_map(mapping: Any) -> Dict[str, float]:
    ^
src/genome/models/genome_adapter.py:48: error: Unused "type: ignore" comment 
[unused-ignore]
            items = mapping.items() if isinstance(mapping, dict) else vars...
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/genome/models/genome_adapter.py:85: error: Explicit "Any" is not allowed 
[explicit-any]
        def with_updated(self, **kwargs: Any) -> "_FallbackGenome":
        ^
src/genome/models/genome_adapter.py:106: error: Explicit "Any" is not allowed 
[explicit-any]
        def to_dict(self) -> Dict[str, Any]:
        ^
src/genome/models/genome_adapter.py:128: error: Explicit "Any" is not allowed 
[explicit-any]
        def new_genome(
        ^
src/genome/models/genome_adapter.py:161: error: Explicit "Any" is not allowed 
[explicit-any]
        def mutate(self, genome: Any, mutation: str, new_params: Dict[str,...
        ^
src/genome/models/genome_adapter.py:163: error: Unused "type: ignore" comment 
[unused-ignore]
                if callable(_mutate) and _DecisionGenome is not None and i...
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/genome/models/genome_adapter.py:164: error: Unused "type: ignore" comment 
[unused-ignore]
                    return _mutate(genome, mutation, new_params)  # type: ...
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/genome/models/genome_adapter.py:201: error: Explicit "Any" is not allowed 
[explicit-any]
        def from_legacy(self, obj: Any) -> Any:
        ^
src/genome/models/genome_adapter.py:204: error: Unused "type: ignore" comment 
[unused-ignore]
                    return _from_legacy(obj)  # type: ignore[misc]
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/genome/models/genome_adapter.py:224: error: Explicit "Any" is not allowed 
[explicit-any]
        def to_legacy_view(self, genome: Any) -> Dict[str, Any] | Any:
        ^
src/genome/models/genome_adapter.py:226: error: Unused "type: ignore" comment 
[unused-ignore]
                if callable(_to_legacy_view) and _DecisionGenome is not No...
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/genome/models/genome_adapter.py:227: error: Unused "type: ignore" comment 
[unused-ignore]
                    return _to_legacy_view(genome)  # type: ignore[misc]
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/dimensions/base_organ.py:69: error: Explicit "Any" is not
allowed  [explicit-any]
    class SensoryReading(BaseModel):
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/dimensions/base_organ.py:74: error: Explicit "Any" is not
allowed  [explicit-any]
        data: Dict[str, Any] = Field(default_factory=dict)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/dimensions/base_organ.py:75: error: Explicit "Any" is not
allowed  [explicit-any]
        metadata: Dict[str, Any] = Field(default_factory=dict)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/dimensions/base_organ.py:80: error: Explicit "Any" is not
allowed  [explicit-any]
        def __init__(self, name: str, config: Dict[str, Any]):
        ^
src/sensory/organs/dimensions/base_organ.py:102: error: Explicit "Any" is not
allowed  [explicit-any]
    class InstrumentMeta(BaseModel):
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/dimensions/base_organ.py:130: error: Function is missing a
type annotation  [no-untyped-def]
        def validate_sessions(cls, v):
        ^
src/sensory/organs/dimensions/base_organ.py:142: error: Explicit "Any" is not
allowed  [explicit-any]
    class DimensionalReading(BaseModel):
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/dimensions/base_organ.py:163: error: Explicit "Any" is not
allowed  [explicit-any]
        context: Dict[str, Any] = Field(
        ^
src/sensory/organs/dimensions/base_organ.py:182: error: Function is missing a
type annotation  [no-untyped-def]
        def validate_signal_strength(cls, v):
        ^
src/sensory/organs/dimensions/base_organ.py:189: error: Function is missing a
type annotation  [no-untyped-def]
        def validate_confidence(cls, v):
        ^
src/sensory/organs/dimensions/base_organ.py:195: error: Explicit "Any" is not
allowed  [explicit-any]
    class MarketData(BaseModel):
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/dimensions/base_organ.py:228: error: Function is missing a
return type annotation  [no-untyped-def]
        def calculate_derived_fields(self):
        ^
src/sensory/organs/dimensions/base_organ.py:234: error: Explicit "Any" is not
allowed  [explicit-any]
    class EconomicEvent(BaseModel):
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/dimensions/base_organ.py:304: error: Explicit "Any" is not
allowed  [explicit-any]
    class SystemHealth(BaseModel):
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/domain/models.py:23: error: Explicit "Any" is not allowed  [explicit-any]
    class ExecutionReport(BaseModel):
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/domain/models.py:52: error: Explicit "Any" is not allowed  [explicit-any]
    def __getattr__(name: str) -> Any:
    ^
src/domain/models.py:65: error: Unused "type: ignore" comment  [unused-ignore]
            obj = type(name, (), {})  # type: ignore[type-arg]
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/data_foundation/schemas.py:9: error: Explicit "Any" is not allowed 
[explicit-any]
    class MarketDataEvent(BaseModel):
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/data_foundation/schemas.py:24: error: Explicit "Any" is not allowed 
[explicit-any]
    class MacroEvent(BaseModel):
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~
src/data_foundation/schemas.py:37: error: Explicit "Any" is not allowed 
[explicit-any]
    class SessionEvent(BaseModel):
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/data_foundation/schemas.py:45: error: Explicit "Any" is not allowed 
[explicit-any]
    class VolSignal(BaseModel):
    ^~~~~~~~~~~~~~~~~~~~~~~~~~
src/data_foundation/schemas.py:57: error: Explicit "Any" is not allowed 
[explicit-any]
    class YieldEvent(BaseModel):
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~
src/core/genome.py:29: error: Explicit "Any" is not allowed  [explicit-any]
        def new_genome(
        ^
src/core/genome.py:41: error: Explicit "Any" is not allowed  [explicit-any]
        def mutate(self, genome: Any, mutation: str, new_params: Dict[str,...
        ^
src/core/genome.py:46: error: Explicit "Any" is not allowed  [explicit-any]
        def from_legacy(self, obj: Any) -> Any:
        ^
src/core/genome.py:51: error: Explicit "Any" is not allowed  [explicit-any]
        def to_legacy_view(self, genome: Any) -> Dict[str, Any] | Any:
        ^
src/core/genome.py:78: error: Explicit "Any" is not allowed  [explicit-any]
        def with_updated(self, **kwargs: Any) -> "_CoreGenomeStub":
        ^
src/core/genome.py:102: error: Explicit "Any" is not allowed  [explicit-any]
        def to_dict(self) -> Dict[str, Any]:
        ^
src/core/genome.py:117: error: Explicit "Any" is not allowed  [explicit-any]
    def _coerce_numeric_mapping(mapping: Any) -> Dict[str, float]:
    ^
src/core/genome.py:121: error: Unused "type: ignore" comment  [unused-ignore]
            items = mapping.items() if isinstance(mapping, dict) else vars...
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/core/genome.py:153: error: Explicit "Any" is not allowed  [explicit-any]
        def new_genome(
        ^
src/core/genome.py:175: error: Explicit "Any" is not allowed  [explicit-any]
        def mutate(self, genome: Any, mutation: str, new_params: Dict[str,...
        ^
src/core/genome.py:194: error: Explicit "Any" is not allowed  [explicit-any]
        def from_legacy(self, obj: Any) -> Any:
        ^
src/core/genome.py:215: error: Explicit "Any" is not allowed  [explicit-any]
        def to_legacy_view(self, genome: Any) -> Dict[str, Any] | Any:
        ^
src/core/genome.py:259: error: Unused "type: ignore" comment  [unused-ignore]
            from src.genome.models.genome_adapter import GenomeProviderAda...
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/core/context_packet.py:12: error: Explicit "Any" is not allowed 
[explicit-any]
    class ContextPacket(BaseModel):
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/core/context_packet.py:39: error: Explicit "Any" is not allowed 
[explicit-any]
        metadata: Dict[str, Any] = Field(default_factory=dict)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/core/context_packet.py:41: error: Function is missing a type annotation 
[no-untyped-def]
        def __str__(self):
        ^
src/config/risk/risk_config.py:8: error: Explicit "Any" is not allowed 
[explicit-any]
    class RiskConfig(BaseModel):
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~
src/thinking/patterns/cvd_divergence_detector.py:44: error: Need type
annotation for "price_history"  [var-annotated]
            self.price_history = deque(maxlen=self.lookback)
                                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~
src/thinking/patterns/cvd_divergence_detector.py:45: error: Need type
annotation for "cvd_history"  [var-annotated]
            self.cvd_history = deque(maxlen=self.lookback)
                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~
src/thinking/patterns/cvd_divergence_detector.py:46: error: Need type
annotation for "timestamp_history"  [var-annotated]
            self.timestamp_history = deque(maxlen=self.lookback)
                                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~
src/thinking/patterns/cvd_divergence_detector.py:96: error: Explicit "Any" is
not allowed  [explicit-any]
        def _get_config_value(self, key: str, default: Any) -> Any:
        ^
src/thinking/patterns/cvd_divergence_detector.py:104: error: Unused
"type: ignore" comment  [unused-ignore]
                val = self.config.get_value(key, None)  # type: ignore[att...
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/thinking/patterns/cvd_divergence_detector.py:106: error: Unused
"type: ignore" comment  [unused-ignore]
                    ns = self.config.get_namespace("system")  # type: igno...
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/thinking/patterns/cvd_divergence_detector.py:155: error: Explicit "Any" is
not allowed  [explicit-any]
        def create_context_packet(self, current_price: float, current_cvd:...
        ^
src/thinking/patterns/cvd_divergence_detector.py:176: error: Explicit "Any" is
not allowed  [explicit-any]
            return cast(Any, ContextPacket)(
                   ^
src/thinking/patterns/cvd_divergence_detector.py:192: error: Function is
missing a return type annotation  [no-untyped-def]
        def reset(self):
        ^
src/thinking/patterns/cvd_divergence_detector.py:192: note: Use "-> None" if function does not return a value
src/thinking/patterns/cvd_divergence_detector.py:199: error: Missing type
parameters for generic type "dict"  [type-arg]
        def get_stats(self) -> dict:
                               ^
src/sensory/models/__init__.py:13: error: Unused "type: ignore" comment 
[unused-ignore]
        SensoryReading as SensoryReading,  # type: ignore
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/sensory/models/__init__.py:49: error: Function is missing a return type
annotation  [no-untyped-def]
        def __post_init__(self):
        ^
src/sensory/models/__init__.py:49: note: Use "-> None" if function does not return a value
src/sensory/models/__init__.py:70: error: Function is missing a return type
annotation  [no-untyped-def]
        def __post_init__(self):
        ^
src/sensory/models/__init__.py:70: note: Use "-> None" if function does not return a value
src/sensory/enhanced/when_dimension.py:32: error: Explicit "Any" is not allowed
 [explicit-any]
            context: Dict[str, Any] = {
            ^
src/sensory/enhanced/when_dimension.py:43: error: Argument "regime" to
"DimensionalReading" has incompatible type
"src.sensory.organs.dimensions.base_organ.MarketRegime"; expected
"src.core.base.MarketRegime"  [arg-type]
                regime=MarketRegime.UNKNOWN,
                       ^~~~~~~~~~~~~~~~~~~~
src/sensory/enhanced/what_dimension.py:29: error: Explicit "Any" is not allowed
 [explicit-any]
            context: Dict[str, Any] = {
            ^
src/sensory/enhanced/what_dimension.py:43: error: Argument "regime" to
"DimensionalReading" has incompatible type
"src.sensory.organs.dimensions.base_organ.MarketRegime"; expected
"src.core.base.MarketRegime"  [arg-type]
                regime=MarketRegime.UNKNOWN,
                       ^~~~~~~~~~~~~~~~~~~~
src/trading/risk_management/__init__.py:13: error: Unused "type: ignore"
comment  [unused-ignore]
        from src.core.risk.manager import RiskManager  # type: ignore
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/phase3_integration.py:28: error: Explicit "Any" is not allowed 
[explicit-any]
        def __init__(self, config: Dict[str, Any] = None):
        ^
src/phase3_integration.py:28: error: Incompatible default for argument "config"
(default has type "None", argument has type "dict[str, Any]")  [assignment]
        def __init__(self, config: Dict[str, Any] = None):
                                                    ^~~~
src/phase3_integration.py:28: note: PEP 484 prohibits implicit Optional. Accordingly, mypy has changed its default to no_implicit_optional=True
src/phase3_integration.py:28: note: Use https://github.com/hauntsaninja/no_implicit_optional to automatically upgrade your codebase
src/phase3_integration.py:37: error: Explicit "Any" is not allowed 
[explicit-any]
        async def run_sentient_predator(self, market_data: Dict[str, Any])...
        ^
src/phase3_integration.py:77: error: Explicit "Any" is not allowed 
[explicit-any]
        async def run_paranoid_predator(self, strategy_population: List[An...
        ^
src/phase3_integration.py:104: error: Explicit "Any" is not allowed 
[explicit-any]
        async def run_apex_ecosystem(self, 
        ^
src/phase3_integration.py:145: error: Explicit "Any" is not allowed 
[explicit-any]
        async def run_competitive_intelligence(self, market_data: Dict[str...
        ^
src/phase3_integration.py:175: error: Explicit "Any" is not allowed 
[explicit-any]
        async def run_full_phase3(self, 
        ^
src/phase3_integration.py:209: error: Explicit "Any" is not allowed 
[explicit-any]
        async def get_phase3_status(self) -> Dict[str, Any]:
        ^
src/phase3_integration.py:223: error: Function is missing a return type
annotation  [no-untyped-def]
    async def main():
    ^
src/phase3_integration.py:223: note: Use "-> None" if function does not return a value
src/phase3_integration.py:246: error: Need type annotation for
"strategy_population" (hint: "strategy_population: list[<type>] = ...") 
[var-annotated]
        strategy_population = []  # Would be populated with real strategie...
        ^~~~~~~~~~~~~~~~~~~
src/phase3_integration.py:247: error: Need type annotation for
"species_populations"  [var-annotated]
        species_populations = {
                              ^
src/validation/performance/load_tester.py:24: error: Missing type parameters
for generic type "list"  [type-arg]
        errors: list
                ^
src/validation/performance/load_tester.py:30: error: Function is missing a
return type annotation  [no-untyped-def]
        def __init__(self):
        ^
src/validation/performance/load_tester.py:30: note: Use "-> None" if function does not return a value
src/validation/performance/load_tester.py:34: error: Missing type parameters
for generic type "Callable"  [type-arg]
                         test_function: Callable, 
                                        ^
src/validation/performance/load_tester.py:45: error: Function is missing a
return type annotation  [no-untyped-def]
            async def user_session():
            ^
src/validation/performance/load_tester.py:45: note: Use "-> None" if function does not return a value
src/validation/performance/load_tester.py:55: error: Incompatible types in
assignment (expression has type "float", variable has type "int")  [assignment]
                        total_response_time += elapsed
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/validation/performance/load_tester.py:81: error: Explicit "Any" is not
allowed  [explicit-any]
        async def stress_test(self, test_function: Callable) -> Dict[str, ...
        ^
src/validation/performance/load_tester.py:81: error: Missing type parameters
for generic type "Callable"  [type-arg]
        async def stress_test(self, test_function: Callable) -> Dict[str, ...
                                                   ^
src/trading/monitoring/portfolio_monitor.py:12: error: Cannot find
implementation or library stub for module named "redis"  [import-not-found]
    import redis
    ^
src/trading/monitoring/portfolio_monitor.py:15: error: Cannot find
implementation or library stub for module named "src.core.events" 
[import-not-found]
        from src.core.events import ExecutionReport  # legacy
    ^
src/trading/monitoring/portfolio_monitor.py:17: error: Unused "type: ignore"
comment  [unused-ignore]
        ExecutionReport = object  # type: ignore
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/trading/monitoring/portfolio_monitor.py:40: error: Explicit "Any" is not
allowed  [explicit-any]
        def _load_initial_state(self) -> Dict[str, Any]:
        ^
src/trading/monitoring/portfolio_monitor.py:47: error: Returning Any from
function declared to return "dict[str, Any]"  [no-any-return]
                    return state
                    ^~~~~~~~~~~~
src/trading/monitoring/portfolio_monitor.py:124: error: Explicit "Any" is not
allowed  [explicit-any]
        def get_portfolio(self) -> Dict[str, Any]:
        ^
src/trading/monitoring/portfolio_monitor.py:128: error: Explicit "Any" is not
allowed  [explicit-any]
        def get_position(self, symbol: str) -> Optional[Dict[str, Any]]:
        ^
src/trading/monitoring/portfolio_monitor.py:130: error: Returning Any from
function declared to return "dict[str, Any] | None"  [no-any-return]
            return self.portfolio['open_positions'].get(symbol)
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/trading/monitoring/portfolio_monitor.py:140: error: Returning Any from
function declared to return "float"  [no-any-return]
            return total_value
            ^~~~~~~~~~~~~~~~~~
src/trading/monitoring/portfolio_monitor.py:159: error: Function is missing a
return type annotation  [no-untyped-def]
        async def test_portfolio_monitor():
        ^
src/trading/monitoring/portfolio_monitor.py:159: note: Use "-> None" if function does not return a value
src/trading/integration/fix_broker_interface.py:25: error: Function is missing
a type annotation  [no-untyped-def]
        def __init__(self, event_bus, trade_queue, fix_initiator):
        ^
src/trading/integration/fix_broker_interface.py:41: error: Function is missing
a return type annotation  [no-untyped-def]
        async def start(self):
        ^
src/trading/integration/fix_broker_interface.py:41: note: Use "-> None" if function does not return a value
src/trading/integration/fix_broker_interface.py:49: error: Function is missing
a return type annotation  [no-untyped-def]
        async def stop(self):
        ^
src/trading/integration/fix_broker_interface.py:49: note: Use "-> None" if function does not return a value
src/trading/integration/fix_broker_interface.py:54: error: Function is missing
a return type annotation  [no-untyped-def]
        async def _process_trade_messages(self):
        ^
src/trading/integration/fix_broker_interface.py:54: note: Use "-> None" if function does not return a value
src/trading/integration/fix_broker_interface.py:72: error: Function is missing
a type annotation  [no-untyped-def]
        async def _handle_execution_report(self, message):
        ^
src/trading/integration/fix_broker_interface.py:171: error: Function is missing
a type annotation  [no-untyped-def]
        async def _handle_order_cancel_reject(self, message):
        ^
src/trading/integration/fix_broker_interface.py:190: error: Missing return
statement  [return]
        async def place_market_order(self, symbol: str, side: str, quantit...
        ^
src/trading/integration/fix_broker_interface.py:247: error: Missing return
statement  [return]
        async def cancel_order(self, order_id: str) -> bool:
        ^
src/trading/integration/fix_broker_interface.py:275: error: Explicit "Any" is
not allowed  [explicit-any]
        def get_order_status(self, order_id: str) -> Optional[Dict[str, An...
        ^
src/trading/integration/fix_broker_interface.py:287: error: Explicit "Any" is
not allowed  [explicit-any]
        def get_all_orders(self) -> Dict[str, Dict[str, Any]]:
        ^
src/trading/integration/fix_broker_interface.py:292: error: Function is missing
a type annotation  [no-untyped-def]
        def add_order_update_listener(self, callback):
        ^
src/trading/integration/fix_broker_interface.py:303: error: Function is missing
a type annotation  [no-untyped-def]
        def remove_order_update_listener(self, callback):
        ^
src/trading/execution/fix_executor.py:16: error: Module "src.core.interfaces"
has no attribute "IExecutionEngine"  [attr-defined]
        from src.core.interfaces import IExecutionEngine
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/trading/execution/fix_executor.py:33: error: Class cannot subclass
"IExecutionEngine" (has type "Any")  [misc]
    class FIXExecutor(IExecutionEngine):
                      ^~~~~~~~~~~~~~~~
src/trading/execution/fix_executor.py:39: error: Explicit "Any" is not allowed 
[explicit-any]
        def __init__(self, fix_config: Optional[Dict[str, Any]] = None):
        ^
src/trading/execution/fix_executor.py:43: error: Explicit "Any" is not allowed 
[explicit-any]
            self.execution_history: List[Dict[str, Any]] = []
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/trading/execution/fix_executor.py:200: error: Unsupported operand types for
* ("None" and "float")  [operator]
                     order.average_price * order.filled_quantity) / positi...
                     ^
src/trading/execution/fix_executor.py:200: note: Left operand is of type "float | None"
src/trading/execution/fix_executor.py:204: error: Unsupported operand types for
- ("None" and "float")  [operator]
                position.realized_pnl += (order.average_price - position.a...
                                          ^
src/trading/execution/fix_executor.py:204: note: Left operand is of type "float | None"
src/sensory/organs/fix_sensory_organ.py:17: error: Function is missing a type
annotation  [no-untyped-def]
        def __init__(self, event_bus, price_queue, config):
        ^
src/sensory/organs/fix_sensory_organ.py:33: error: Function is missing a return
type annotation  [no-untyped-def]
        async def start(self):
        ^
src/sensory/organs/fix_sensory_organ.py:33: note: Use "-> None" if function does not return a value
src/sensory/organs/fix_sensory_organ.py:41: error: Function is missing a return
type annotation  [no-untyped-def]
        async def stop(self):
        ^
src/sensory/organs/fix_sensory_organ.py:41: note: Use "-> None" if function does not return a value
src/sensory/organs/fix_sensory_organ.py:46: error: Function is missing a return
type annotation  [no-untyped-def]
        async def _process_price_messages(self):
        ^
src/sensory/organs/fix_sensory_organ.py:46: note: Use "-> None" if function does not return a value
src/sensory/organs/fix_sensory_organ.py:64: error: Function is missing a type
annotation  [no-untyped-def]
        async def _handle_market_data_snapshot(self, message):
        ^
src/sensory/organs/fix_sensory_organ.py:90: error: Function is missing a type
annotation  [no-untyped-def]
        async def _handle_market_data_incremental(self, message):
        ^
src/sensory/organs/fix_sensory_organ.py:114: error: Function is missing a type
annotation for one or more arguments  [no-untyped-def]
        def _extract_market_data(self, message) -> Dict[str, Any]:
        ^
src/sensory/organs/fix_sensory_organ.py:114: error: Explicit "Any" is not
allowed  [explicit-any]
        def _extract_market_data(self, message) -> Dict[str, Any]:
        ^
src/sensory/organs/fix_sensory_organ.py:116: error: Explicit "Any" is not
allowed  [explicit-any]
            data: Dict[str, Any] = {}
            ^~~~~~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/fix_sensory_organ.py:168: error: Function is missing a
return type annotation  [no-untyped-def]
        def subscribe_to_symbols(self, symbols: List[str]):
        ^
src/sensory/organs/fix_sensory_organ.py:173: error: Explicit "Any" is not
allowed  [explicit-any]
        def get_market_data(self, symbol: str) -> Dict[str, Any]:
        ^
src/sensory/organs/fix_sensory_organ.py:175: error: Returning Any from function
declared to return "dict[str, Any]"  [no-any-return]
            return self.market_data.get(symbol, {})
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/fix_sensory_organ.py:177: error: Explicit "Any" is not
allowed  [explicit-any]
        def get_all_market_data(self) -> Dict[str, Dict[str, Any]]:
        ^
src/risk/risk_manager_impl.py:260: error: Argument 2 of
"evaluate_portfolio_risk" is incompatible with supertype
"src.core.interfaces.RiskManager"; supertype defines the argument type as
"Mapping[str, Any] | None"  [override]
            context: JSONObject | None = None,
            ^~~~~~~~~~~~~~~~~~~~~~~~~~
src/risk/risk_manager_impl.py:260: note: This violates the Liskov substitution principle
src/risk/risk_manager_impl.py:260: note: See https://mypy.readthedocs.io/en/stable/common_issues.html#incompatible-overrides
src/risk/risk_manager_impl.py:272: error: Argument 2 of "propose_rebalance" is
incompatible with supertype "src.core.interfaces.RiskManager"; supertype defines
the argument type as "Mapping[str, Any] | None"  [override]
            constraints: JSONObject | None = None,
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/risk/risk_manager_impl.py:272: note: This violates the Liskov substitution principle
src/risk/risk_manager_impl.py:272: note: See https://mypy.readthedocs.io/en/stable/common_issues.html#incompatible-overrides
src/orchestration/enhanced_intelligence_engine.py:147: error: Returning Any
from function declared to return "float"  [no-any-return]
            return max(-1.0, min(1.0, corr))
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/orchestration/enhanced_intelligence_engine.py:213: error: Explicit "Any" is
not allowed  [explicit-any]
            def _safe(f: Any, default: float = 0.0) -> float:
            ^
src/orchestration/enhanced_intelligence_engine.py:269: error: Explicit "Any" is
not allowed  [explicit-any]
        def get_diagnostic_information(self) -> Dict[str, Any]:
        ^
src/operational/health_monitor.py:28: error: Need type annotation for
"health_history" (hint: "health_history: list[<type>] = ...")  [var-annotated]
            self.health_history = []
            ^~~~~~~~~~~~~~~~~~~
src/operational/health_monitor.py:62: error: Explicit "Any" is not allowed 
[explicit-any]
        async def _perform_health_check(self) -> Dict[str, Any]:
        ^
src/operational/health_monitor.py:77: error: Explicit "Any" is not allowed 
[explicit-any]
        async def _check_state_store(self) -> Dict[str, Any]:
        ^
src/operational/health_monitor.py:86: error: Explicit "Any" is not allowed 
[explicit-any]
        async def _check_event_bus(self) -> Dict[str, Any]:
        ^
src/operational/health_monitor.py:93: error: Explicit "Any" is not allowed 
[explicit-any]
        async def _check_memory(self) -> Dict[str, Any]:
        ^
src/operational/health_monitor.py:106: error: Explicit "Any" is not allowed 
[explicit-any]
        async def _check_cpu(self) -> Dict[str, Any]:
        ^
src/operational/health_monitor.py:118: error: Explicit "Any" is not allowed 
[explicit-any]
        async def _check_disk(self) -> Dict[str, Any]:
        ^
src/operational/health_monitor.py:131: error: Explicit "Any" is not allowed 
[explicit-any]
        async def _store_health_check(self, health_check: Dict[str, Any]) ...
        ^
src/operational/health_monitor.py:145: error: Explicit "Any" is not allowed 
[explicit-any]
        async def get_health_summary(self) -> Dict[str, Any]:
        ^
src/operational/fix_connection_manager.py:31: error: Unused "type: ignore"
comment  [unused-ignore]
        GenuineFIXManager = None  # type: ignore
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/operational/fix_connection_manager.py:32: error: Unused "type: ignore"
comment  [unused-ignore]
        ICMarketsConfig = None  # type: ignore
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/operational/fix_connection_manager.py:35: error: Unused "type: ignore"
comment  [unused-ignore]
        from src.operational.mock_fix import MockFIXManager  # type: ignor...
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/operational/fix_connection_manager.py:48: error: Missing type parameters
for generic type "Queue"  [type-arg]
            self._queue: Optional[asyncio.Queue] = None
                                  ^
src/operational/fix_connection_manager.py:50: error: Missing type parameters
for generic type "Queue"  [type-arg]
        def set_message_queue(self, queue: asyncio.Queue) -> None:
                                           ^
src/operational/fix_connection_manager.py:53: error: Explicit "Any" is not
allowed  [explicit-any]
        async def _put(self, message: Dict[str, Any]) -> None:
        ^
src/operational/fix_connection_manager.py:61: error: Explicit "Any" is not
allowed  [explicit-any]
        def __init__(self, manager: Any):
        ^
src/operational/fix_connection_manager.py:64: error: Explicit "Any" is not
allowed  [explicit-any]
        def send_message(self, msg: Any) -> bool:
        ^
src/operational/fix_connection_manager.py:69: error: Returning Any from
function declared to return "bool"  [no-any-return]
            return self._manager.trade_connection.send_message_and_track(m...
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/operational/fix_connection_manager.py:75: error: Function is missing a type
annotation for one or more arguments  [no-untyped-def]
        def __init__(self, system_config) -> None:
        ^
src/operational/fix_connection_manager.py:107: error: Statement is unreachable 
[unreachable]
                        logger.error("MockFIXManager not available")
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/operational/fix_connection_manager.py:123: error: Function is missing a
type annotation for one or more arguments  [no-untyped-def]
                def on_market_data(symbol: str, order_book) -> None:
                ^
src/operational/fix_connection_manager.py:132: error: Explicit "Any" is not
allowed  [explicit-any]
                        msg: Dict[Any, Any] = {
                        ^
src/operational/fix_connection_manager.py:157: error: Function is missing a
type annotation for one or more arguments  [no-untyped-def]
                def on_order_update(order_info) -> None:
                ^
src/operational/fix_connection_manager.py:163: error: Explicit "Any" is not
allowed  [explicit-any]
                        msg: Dict[Any, Any] = {
                        ^
src/core/_event_bus_impl.py:30: error: Explicit "Any" is not allowed 
[explicit-any]
    class Event:
    ^~~~~~~~~~~
src/core/_event_bus_impl.py:32: error: Explicit "Any" is not allowed 
[explicit-any]
        payload: dict[str, Any] | Any = None
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/core/_event_bus_impl.py:58: error: Explicit "Any" is not allowed 
[explicit-any]
            self._subscribers: Dict[str, Set[Callable[[Event], Any]]] = {}
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/core/_event_bus_impl.py:59: error: Explicit "Any" is not allowed 
[explicit-any]
            self._pair_to_id: Dict[Tuple[str, Callable[[Event], Any]], int...
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/core/_event_bus_impl.py:60: error: Explicit "Any" is not allowed 
[explicit-any]
            self._id_to_pair: Dict[int, Tuple[str, Callable[[Event], Any]]...
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/core/_event_bus_impl.py:178: error: Explicit "Any" is not allowed 
[explicit-any]
        async def emit(self, topic: str, payload: dict[str, Any] | Any, so...
        ^
src/core/_event_bus_impl.py:204: error: Explicit "Any" is not allowed 
[explicit-any]
            handlers_snapshot: list[Callable[[Event], Any]]
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/core/_event_bus_impl.py:211: error: Explicit "Any" is not allowed 
[explicit-any]
            tasks: list[asyncio.Task[Any]] = []
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/core/_event_bus_impl.py:223: error: Explicit "Any" is not allowed 
[explicit-any]
        async def _invoke_handler(self, handler: Callable[[Event], Any], e...
        ^
src/core/_event_bus_impl.py:257: error: Explicit "Any" is not allowed 
[explicit-any]
            self._adapter_map: Dict[Tuple[str, Callable[..., Any]], Callab...
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/core/_event_bus_impl.py:259: error: Explicit "Any" is not allowed 
[explicit-any]
        def publish_sync(self, topic: str, payload: dict[str, Any] | Any, ...
        ^
src/core/_event_bus_impl.py:279: error: Explicit "Any" is not allowed 
[explicit-any]
        def subscribe_topic(
        ^
src/core/_event_bus_impl.py:287: error: Explicit "Any" is not allowed 
[explicit-any]
                def _adapter(ev: Event) -> Any:
                ^
src/core/_event_bus_impl.py:299: error: Explicit "Any" is not allowed 
[explicit-any]
        def publish(self, topic: str, payload: dict[str, Any] | Any) -> in...
        ^
src/core/_event_bus_impl.py:309: error: Explicit "Any" is not allowed 
[explicit-any]
        def subscribe(self, topic: str, handler: Callable[[Any], None | Aw...
        ^
src/core/_event_bus_impl.py:319: error: Explicit "Any" is not allowed 
[explicit-any]
            def adapter(_type: str, payload: Any) -> Any:
            ^
src/core/_event_bus_impl.py:402: error: Explicit "Any" is not allowed 
[explicit-any]
    def unsubscribe_from_event(event_type: str, callback: Callable[[Event]...
    ^
src/trading/trading_manager.py:10: error: Cannot find implementation or library
stub for module named "redis"  [import-not-found]
    import redis
    ^
src/trading/trading_manager.py:13: error: Cannot find implementation or library
stub for module named "src.core.events"  [import-not-found]
        from src.core.events import TradeIntent  # legacy
    ^
src/trading/trading_manager.py:15: error: Unused "type: ignore" comment 
[unused-ignore]
        TradeIntent = TradeRejected = object  # type: ignore
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/trading/trading_manager.py:35: error: Function is missing a type annotation
for one or more arguments  [no-untyped-def]
        def __init__(
        ^
src/trading/trading_manager.py:63: error: Missing positional arguments
"risk_per_trade", "stop_loss_pct" in call to "position_size"  [call-arg]
            self.position_sizer = PositionSizer(risk_per_trade)
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/trading/trading_manager.py:63: error: Argument 1 to "position_size" has
incompatible type "float"; expected "Decimal"  [arg-type]
            self.position_sizer = PositionSizer(risk_per_trade)
                                                ^~~~~~~~~~~~~~
src/trading/trading_manager.py:64: error: "None" not callable  [misc]
            self.risk_gateway = RiskGateway(
                                ^
src/trading/trading_manager.py:94: error: "PortfolioMonitor" has no attribute
"get_state"  [attr-defined]
                portfolio_state = self.portfolio_monitor.get_state()
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/trading/trading_manager.py:110: error: "PortfolioMonitor" has no attribute
"increment_positions"  [attr-defined]
                    self.portfolio_monitor.increment_positions()
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/trading/trading_manager.py:124: error: Function is missing a return type
annotation  [no-untyped-def]
        async def start(self):
        ^
src/trading/trading_manager.py:124: note: Use "-> None" if function does not return a value
src/trading/trading_manager.py:130: error: Function is missing a return type
annotation  [no-untyped-def]
        async def stop(self):
        ^
src/trading/trading_manager.py:130: note: Use "-> None" if function does not return a value
src/trading/trading_manager.py:134: error: Missing type parameters for generic
type "dict"  [type-arg]
        def get_risk_status(self) -> dict:
                                     ^
src/trading/trading_manager.py:143: error: "PortfolioMonitor" has no attribute
"get_state"  [attr-defined]
                "portfolio_state": self.portfolio_monitor.get_state()
                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/trading/execution/liquidity_prober.py:30: error: Explicit "Any" is not
allowed  [explicit-any]
        def __init__(self, broker_interface: FIXBrokerInterface, config: O...
        ^
src/trading/execution/liquidity_prober.py:47: error: Missing type parameters
for generic type "Task"  [type-arg]
            self.active_probes: Dict[str, asyncio.Task] = {}
                                          ^
src/trading/execution/liquidity_prober.py:48: error: Missing type parameters
for generic type "Dict"  [type-arg]
            self.probe_results: Dict[str, Dict] = {}
                                          ^
src/trading/execution/liquidity_prober.py:105: error:
"Coroutine[Any, Any, float]" has no attribute "done"  [attr-defined]
                    if task.done() and not task.exception():
                       ^~~~~~~~~
src/trading/execution/liquidity_prober.py:105: error:
"Coroutine[Any, Any, float]" has no attribute "exception"  [attr-defined]
                    if task.done() and not task.exception():
                                           ^~~~~~~~~~~~~~
src/trading/execution/liquidity_prober.py:106: error:
"Coroutine[Any, Any, float]" has no attribute "result"  [attr-defined]
                        results[price] = task.result()
                                         ^~~~~~~~~~~
src/trading/execution/liquidity_prober.py:115: error: Missing type parameters
for generic type "tuple"  [type-arg]
    ...sync def _execute_probes(self, probe_tasks: List[tuple]) -> List[tuple...
                                                        ^
src/trading/execution/liquidity_prober.py:253: error: Explicit "Any" is not
allowed  [explicit-any]
        def get_probe_summary(self, probe_results: Dict[float, float]) -> ...
        ^
src/trading/execution/liquidity_prober.py:281: error: Explicit "Any" is not
allowed  [explicit-any]
        async def health_check(self) -> Dict[str, Any]:
        ^
stubs/sklearn/ensemble.pyi:9: error: Explicit "Any" is not allowed 
[explicit-any]
        def __init__(
        ^
stubs/sklearn/covariance.pyi:9: error: Explicit "Any" is not allowed 
[explicit-any]
        def __init__(self, **kwargs: Any) -> None: ...
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
stubs/sklearn/preprocessing.pyi:9: error: Explicit "Any" is not allowed 
[explicit-any]
        def __init__(self, **kwargs: Any) -> None: ...
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
stubs/sklearn/preprocessing.pyi:16: error: Explicit "Any" is not allowed 
[explicit-any]
        def __init__(self, **kwargs: Any) -> None: ...
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
stubs/sklearn/preprocessing.pyi:17: error: Explicit "Any" is not allowed 
[explicit-any]
        def fit(self, y: Sequence[Any]) -> LabelEncoder: ...
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
stubs/sklearn/preprocessing.pyi:18: error: Explicit "Any" is not allowed 
[explicit-any]
        def transform(self, y: Sequence[Any]) -> NDArray[np.int64]: ...
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
stubs/sklearn/preprocessing.pyi:19: error: Explicit "Any" is not allowed 
[explicit-any]
        def fit_transform(self, y: Sequence[Any]) -> NDArray[np.int64]: .....
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
stubs/sklearn/preprocessing.pyi:20: error: Explicit "Any" is not allowed 
[explicit-any]
        def inverse_transform(self, y: Sequence[int] | NDArray[np.int64]) ...
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
stubs/sklearn/cluster.pyi:9: error: Explicit "Any" is not allowed 
[explicit-any]
        def __init__(self, n_clusters: int = ..., random_state: int | None...
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
stubs/sklearn/cluster.pyi:15: error: Explicit "Any" is not allowed 
[explicit-any]
        def __init__(self, n_clusters: int = ..., **kwargs: Any) -> None: ...
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
stubs/sklearn/cluster.pyi:24: error: Explicit "Any" is not allowed 
[explicit-any]
        def __init__(self, eps: float = ..., min_samples: int = ..., **kwa...
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/trading/strategies/order_book_analyzer.py:85: error: Missing type
parameters for generic type "deque"  [type-arg]
            self.order_book_history: Dict[str, deque] = defaultdict(
                                               ^
src/trading/strategies/order_book_analyzer.py:90: error: Missing type
parameters for generic type "deque"  [type-arg]
            self.microstructure_history: Dict[str, deque] = defaultdict(
                                                   ^
src/trading/strategies/order_book_analyzer.py:246: error: Returning Any from
function declared to return "float"  [no-any-return]
            return avg_imbalance
            ^~~~~~~~~~~~~~~~~~~~
src/trading/strategies/order_book_analyzer.py:266: error: Returning Any from
function declared to return "float"  [no-any-return]
            return sum(bid_liquidity_trend) / len(bid_liquidity_trend)
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/trading/strategies/order_book_analyzer.py:286: error: Returning Any from
function declared to return "float"  [no-any-return]
            return sum(ask_liquidity_trend) / len(ask_liquidity_trend)
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/trading/strategies/order_book_analyzer.py:330: error: Returning Any from
function declared to return "float"  [no-any-return]
            return np.std(price_changes)
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/trading/strategies/order_book_analyzer.py:350: error: Returning Any from
function declared to return "float"  [no-any-return]
            return np.std(liquidity_changes)
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/trading/strategies/order_book_analyzer.py:352: error: Explicit "Any" is not
allowed  [explicit-any]
        def get_market_analysis(self, symbol: str) -> Dict[str, Any]:
        ^
src/trading/strategies/order_book_analyzer.py:449: error: Returning Any from
function declared to return "float"  [no-any-return]
            return latest.mid_price
            ^~~~~~~~~~~~~~~~~~~~~~~
src/trading/strategies/order_book_analyzer.py:451: error: Explicit "Any" is not
allowed  [explicit-any]
        def _generate_trading_signals(self, microstructure: MarketMicrostr...
        ^
src/trading/strategies/order_book_analyzer.py:496: error: Explicit "Any" is not
allowed  [explicit-any]
        def get_liquidity_analysis(self, symbol: str, volume: float) -> Di...
        ^
src/trading/strategies/order_book_analyzer.py:546: error: Returning Any from
function declared to return "OrderBookSnapshot | None"  [no-any-return]
            return self.order_book_history[symbol][-1]
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/trading/strategies/order_book_analyzer.py:584: error: "Sequence[str]" has
no attribute "append"  [attr-defined]
                data['snapshots'].append(snapshot_data)
                ^~~~~~~~~~~~~~~~~~~~~~~~
src/thinking/prediction/predictive_market_modeler.py:19: error: Cannot find
implementation or library stub for module named "src.core.events" 
[import-not-found]
        from src.core.events import ContextPacket, PredictionResult  # leg...
    ^
src/thinking/prediction/predictive_market_modeler.py:21: error: Unused
"type: ignore" comment  [unused-ignore]
        ContextPacket = PredictionResult = object  # type: ignore
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/thinking/prediction/predictive_market_modeler.py:45: error: Function is
missing a return type annotation  [no-untyped-def]
        def __init__(self):
        ^
src/thinking/prediction/predictive_market_modeler.py:45: note: Use "-> None" if function does not return a value
src/thinking/prediction/predictive_market_modeler.py:69: error: Explicit "Any"
is not allowed  [explicit-any]
        async def generate_scenarios(
        ^
src/thinking/prediction/predictive_market_modeler.py:148: error: Explicit "Any"
is not allowed  [explicit-any]
        def _calculate_scenario_confidence(
        ^
src/thinking/prediction/predictive_market_modeler.py:173: error: Function is
missing a return type annotation  [no-untyped-def]
        def __init__(self):
        ^
src/thinking/prediction/predictive_market_modeler.py:173: note: Use "-> None" if function does not return a value
src/thinking/prediction/predictive_market_modeler.py:180: error: Explicit "Any"
is not allowed  [explicit-any]
        async def calculate_probabilities(
        ^
src/thinking/prediction/predictive_market_modeler.py:212: error: Explicit "Any"
is not allowed  [explicit-any]
        def _calculate_likelihood(
        ^
src/thinking/prediction/predictive_market_modeler.py:237: error: Function is
missing a return type annotation  [no-untyped-def]
        def __init__(self):
        ^
src/thinking/prediction/predictive_market_modeler.py:237: note: Use "-> None" if function does not return a value
src/thinking/prediction/predictive_market_modeler.py:244: error: Explicit "Any"
is not allowed  [explicit-any]
        async def predict_outcome(
        ^
src/thinking/prediction/predictive_market_modeler.py:318: error: Function is
missing a return type annotation  [no-untyped-def]
        def __init__(self):
        ^
src/thinking/prediction/predictive_market_modeler.py:318: note: Use "-> None" if function does not return a value
src/thinking/prediction/predictive_market_modeler.py:321: error: Explicit "Any"
is not allowed  [explicit-any]
        async def calibrate_confidence(
        ^
src/thinking/prediction/predictive_market_modeler.py:343: error: Explicit "Any"
is not allowed  [explicit-any]
                    result = cast(Any, PredictionResult)(
                             ^
src/thinking/prediction/predictive_market_modeler.py:360: error: Explicit "Any"
is not allowed  [explicit-any]
        def _calculate_calibration_factor(self, prediction_history: Dict[s...
        ^
src/thinking/prediction/predictive_market_modeler.py:397: error: Explicit "Any"
is not allowed  [explicit-any]
        async def predict_market_scenarios(
        ^
src/thinking/prediction/predictive_market_modeler.py:461: error: Explicit "Any"
is not allowed  [explicit-any]
        async def _get_historical_data(self) -> Dict[str, Any]:
        ^
src/thinking/prediction/predictive_market_modeler.py:468: error: Returning Any
from function declared to return "dict[str, Any]"  [no-any-return]
                        return literal_eval(data)
                        ^~~~~~~~~~~~~~~~~~~~~~~~~
src/thinking/prediction/predictive_market_modeler.py:484: error: Explicit "Any"
is not allowed  [explicit-any]
        async def _get_prediction_history(self) -> Dict[str, Any]:
        ^
src/thinking/prediction/predictive_market_modeler.py:496: error: Explicit "Any"
is not allowed  [explicit-any]
                payload_list: List[Dict[str, Any]] = []
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/thinking/prediction/predictive_market_modeler.py:507: error: Explicit "Any"
is not allowed  [explicit-any]
        async def get_prediction_accuracy(self, days: int = 30) -> Dict[st...
        ^
src/thinking/patterns/trend_detector.py:16: error: Module "src.core.interfaces"
has no attribute "AnalysisResult"  [attr-defined]
        from src.core.interfaces import AnalysisResult, SensorySignal, Thi...
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/thinking/patterns/trend_detector.py:16: error: Module "src.core.interfaces"
has no attribute "SensorySignal"  [attr-defined]
        from src.core.interfaces import AnalysisResult, SensorySignal, Thi...
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/thinking/patterns/trend_detector.py:16: error: Module "src.core.interfaces"
has no attribute "ThinkingPattern"  [attr-defined]
        from src.core.interfaces import AnalysisResult, SensorySignal, Thi...
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/thinking/patterns/trend_detector.py:18: error: Unused "type: ignore"
comment  [unused-ignore]
        ThinkingPattern = SensorySignal = AnalysisResult = object  # type:...
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/thinking/patterns/trend_detector.py:19: error: Module "src.core.exceptions"
has no attribute "ThinkingException"; maybe "TradingException"?  [attr-defined]
    from src.core.exceptions import ThinkingException
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/thinking/patterns/trend_detector.py:25: error: Explicit "Any" is not
allowed  [explicit-any]
    class TrendAnalysis:
    ^~~~~~~~~~~~~~~~~~~
src/thinking/patterns/trend_detector.py:31: error: Explicit "Any" is not
allowed  [explicit-any]
        metadata: Dict[str, Any]
        ^~~~~~~~~~~~~~~~~~~~~~~~
src/thinking/patterns/trend_detector.py:34: error: Class cannot subclass
"ThinkingPattern" (has type "Any")  [misc]
    class TrendDetector(ThinkingPattern):
                        ^~~~~~~~~~~~~~~
src/thinking/patterns/trend_detector.py:37: error: Explicit "Any" is not
allowed  [explicit-any]
        def __init__(self, config: Optional[Dict[str, Any]] = None):
        ^
src/thinking/patterns/trend_detector.py:90: error: Explicit "Any" is not
allowed  [explicit-any]
        def learn(self, feedback: Dict[str, Any]) -> bool:
        ^
src/thinking/patterns/trend_detector.py:117: error: Function is missing a
return type annotation  [no-untyped-def]
        def _update_signal_history(self, signals: List[SensorySignal]):
        ^
src/thinking/patterns/trend_detector.py:306: error: Argument "key" to "max" has
incompatible type overloaded function; expected
"Callable[[str], SupportsDunderLT[Any] | SupportsDunderGT[Any]]"  [arg-type]
    ... composite_direction = max(direction_scores, key=direction_scores.get)
                                                        ^~~~~~~~~~~~~~~~~~~~
src/thinking/patterns/trend_detector.py:326: error: Argument "confidence" to
"TrendAnalysis" has incompatible type "floating[Any]"; expected "float" 
[arg-type]
                confidence=composite_confidence,
                           ^~~~~~~~~~~~~~~~~~~~
src/thinking/patterns/cycle_detector.py:16: error: Module "src.core.interfaces"
has no attribute "AnalysisResult"  [attr-defined]
        from src.core.interfaces import AnalysisResult, SensorySignal, Thi...
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/thinking/patterns/cycle_detector.py:16: error: Module "src.core.interfaces"
has no attribute "SensorySignal"  [attr-defined]
        from src.core.interfaces import AnalysisResult, SensorySignal, Thi...
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/thinking/patterns/cycle_detector.py:16: error: Module "src.core.interfaces"
has no attribute "ThinkingPattern"  [attr-defined]
        from src.core.interfaces import AnalysisResult, SensorySignal, Thi...
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/thinking/patterns/cycle_detector.py:18: error: Unused "type: ignore"
comment  [unused-ignore]
        ThinkingPattern = SensorySignal = AnalysisResult = object  # type:...
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/thinking/patterns/cycle_detector.py:19: error: Module "src.core.exceptions"
has no attribute "ThinkingException"; maybe "TradingException"?  [attr-defined]
    from src.core.exceptions import ThinkingException
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/thinking/patterns/cycle_detector.py:25: error: Explicit "Any" is not
allowed  [explicit-any]
    class CycleAnalysis:
    ^~~~~~~~~~~~~~~~~~~
src/thinking/patterns/cycle_detector.py:31: error: Explicit "Any" is not
allowed  [explicit-any]
        metadata: Dict[str, Any]
        ^~~~~~~~~~~~~~~~~~~~~~~~
src/thinking/patterns/cycle_detector.py:34: error: Class cannot subclass
"ThinkingPattern" (has type "Any")  [misc]
    class CycleDetector(ThinkingPattern):
                        ^~~~~~~~~~~~~~~
src/thinking/patterns/cycle_detector.py:37: error: Explicit "Any" is not
allowed  [explicit-any]
        def __init__(self, config: Optional[Dict[str, Any]] = None):
        ^
src/thinking/patterns/cycle_detector.py:80: error: Explicit "Any" is not
allowed  [explicit-any]
        def learn(self, feedback: Dict[str, Any]) -> bool:
        ^
src/thinking/patterns/cycle_detector.py:99: error: Function is missing a return
type annotation  [no-untyped-def]
        def _update_signal_history(self, signals: List[SensorySignal]):
        ^
src/thinking/patterns/cycle_detector.py:286: error: Value of type variable
"SupportsRichComparisonT" of "min" cannot be "float | floating[Any] | int" 
[type-var]
            strength_confidence = min(signal_strength * 10, 1.0)
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/thinking/patterns/cycle_detector.py:290: error: Value of type variable
"SupportsRichComparisonT" of "max" cannot be "floating[Any] | float"  [type-var]
            return max(0.0, min(1.0, overall_confidence))
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/thinking/patterns/cycle_detector.py:290: error: Incompatible return value
type (got "floating[Any] | float", expected "float")  [return-value]
            return max(0.0, min(1.0, overall_confidence))
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/thinking/patterns/cycle_detector.py:290: error: Value of type variable
"SupportsRichComparisonT" of "min" cannot be "floating[Any] | float"  [type-var]
            return max(0.0, min(1.0, overall_confidence))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/thinking/patterns/anomaly_detector.py:16: error: Module
"src.core.interfaces" has no attribute "AnalysisResult"  [attr-defined]
        from src.core.interfaces import AnalysisResult, SensorySignal, Thi...
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/thinking/patterns/anomaly_detector.py:16: error: Module
"src.core.interfaces" has no attribute "SensorySignal"  [attr-defined]
        from src.core.interfaces import AnalysisResult, SensorySignal, Thi...
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/thinking/patterns/anomaly_detector.py:16: error: Module
"src.core.interfaces" has no attribute "ThinkingPattern"  [attr-defined]
        from src.core.interfaces import AnalysisResult, SensorySignal, Thi...
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/thinking/patterns/anomaly_detector.py:18: error: Unused "type: ignore"
comment  [unused-ignore]
        ThinkingPattern = SensorySignal = AnalysisResult = object  # type:...
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/thinking/patterns/anomaly_detector.py:19: error: Module
"src.core.exceptions" has no attribute "ThinkingException"; maybe
"TradingException"?  [attr-defined]
    from src.core.exceptions import ThinkingException
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/thinking/patterns/anomaly_detector.py:25: error: Explicit "Any" is not
allowed  [explicit-any]
    class AnomalyDetectionResult:
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/thinking/patterns/anomaly_detector.py:32: error: Explicit "Any" is not
allowed  [explicit-any]
        metadata: Dict[str, Any]
        ^~~~~~~~~~~~~~~~~~~~~~~~
src/thinking/patterns/anomaly_detector.py:38: error: Class cannot subclass
"ThinkingPattern" (has type "Any")  [misc]
    class AnomalyDetector(ThinkingPattern):
                          ^~~~~~~~~~~~~~~
src/thinking/patterns/anomaly_detector.py:41: error: Explicit "Any" is not
allowed  [explicit-any]
        def __init__(self, config: Optional[Dict[str, Any]] = None):
        ^
src/thinking/patterns/anomaly_detector.py:88: error: Explicit "Any" is not
allowed  [explicit-any]
        def learn(self, feedback: Dict[str, Any]) -> bool:
        ^
src/thinking/patterns/anomaly_detector.py:107: error: Function is missing a
return type annotation  [no-untyped-def]
        def _update_signal_history(self, signals: List[SensorySignal]):
        ^
src/thinking/patterns/anomaly_detector.py:323: error: Argument "confidence" to
"AnomalyDetectionResult" has incompatible type "floating[Any]"; expected "float"
 [arg-type]
                confidence=combined_confidence,
                           ^~~~~~~~~~~~~~~~~~~
src/thinking/memory/pattern_memory.py:23: error: Explicit "Any" is not allowed 
[explicit-any]
    class PatternMemoryEntry:
    ^~~~~~~~~~~~~~~~~~~~~~~~
src/thinking/memory/pattern_memory.py:26: error: Explicit "Any" is not allowed 
[explicit-any]
        latent_vector: np.ndarray
        ^~~~~~~~~~~~~~~~~~~~~~~~~
src/thinking/memory/pattern_memory.py:27: error: Explicit "Any" is not allowed 
[explicit-any]
        market_context: Dict[str, Any]
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/thinking/memory/pattern_memory.py:28: error: Explicit "Any" is not allowed 
[explicit-any]
        trading_outcome: Dict[str, Any]
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/thinking/memory/pattern_memory.py:29: error: Explicit "Any" is not allowed 
[explicit-any]
        metadata: Dict[str, Any]
        ^~~~~~~~~~~~~~~~~~~~~~~~
src/thinking/memory/pattern_memory.py:58: error: Explicit "Any" is not allowed 
[explicit-any]
        async def store_context(
        ^
src/thinking/memory/pattern_memory.py:85: error: Explicit "Any" is not allowed 
[explicit-any]
        async def find_similar_contexts(
        ^
src/thinking/memory/pattern_memory.py:125: error: Explicit "Any" is not allowed
 [explicit-any]
        def _calculate_similarity(self, vec1: np.ndarray, vec2: np.ndarray...
        ^
src/thinking/memory/pattern_memory.py:140: error: Explicit "Any" is not allowed
 [explicit-any]
        async def get_pattern_statistics(self) -> Dict[str, Any]:
        ^
src/thinking/memory/pattern_memory.py:219: error: Explicit "Any" is not allowed
 [explicit-any]
        async def get_memory_context(self, query_vector: np.ndarray) -> Op...
        ^
src/thinking/competitive/competitive_intelligence_system.py:18: error: Cannot
find implementation or library stub for module named "src.core.events" 
[import-not-found]
        from src.core.events import AlgorithmSignature, CompetitorBehavior...
    ^
src/thinking/competitive/competitive_intelligence_system.py:20: error: Unused
"type: ignore" comment  [unused-ignore]
        AlgorithmSignature = CompetitorBehavior = CounterStrategy = object...
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/thinking/competitive/competitive_intelligence_system.py:28: error: Explicit
"Any" is not allowed  [explicit-any]
    def _to_mapping(obj: object, keys: Sequence[str] | None = None) -> Dic...
    ^
src/thinking/competitive/competitive_intelligence_system.py:37: error: Unused
"type: ignore" comment  [unused-ignore]
                d = obj.dict()  # type: ignore[attr-defined]
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/thinking/competitive/competitive_intelligence_system.py:48: error: Explicit
"Any" is not allowed  [explicit-any]
        out: Dict[str, Any] = {}
        ^~~~~~~~~~~~~~~~~~~~~~~~
src/thinking/competitive/competitive_intelligence_system.py:74: error: Function
is missing a return type annotation  [no-untyped-def]
        def __init__(self):
        ^
src/thinking/competitive/competitive_intelligence_system.py:74: note: Use "-> None" if function does not return a value
src/thinking/competitive/competitive_intelligence_system.py:103: error:
Explicit "Any" is not allowed  [explicit-any]
        async def identify_signatures(
        ^
src/thinking/competitive/competitive_intelligence_system.py:118: error:
Explicit "Any" is not allowed  [explicit-any]
                        signature = cast(Any, AlgorithmSignature)(
                                    ^
src/thinking/competitive/competitive_intelligence_system.py:140: error:
Explicit "Any" is not allowed  [explicit-any]
        async def _analyze_trading_patterns(
        ^
src/thinking/competitive/competitive_intelligence_system.py:168: error:
Explicit "Any" is not allowed  [explicit-any]
        def _matches_known_pattern(
        ^
src/thinking/competitive/competitive_intelligence_system.py:188: error:
Explicit "Any" is not allowed  [explicit-any]
        def _calculate_pattern_similarity(
        ^
src/thinking/competitive/competitive_intelligence_system.py:211: error:
Explicit "Any" is not allowed  [explicit-any]
        def _calculate_confidence(self, pattern: Dict[str, Any]) -> Decima...
        ^
src/thinking/competitive/competitive_intelligence_system.py:231: error:
Function is missing a return type annotation  [no-untyped-def]
        def __init__(self):
        ^
src/thinking/competitive/competitive_intelligence_system.py:231: note: Use "-> None" if function does not return a value
src/thinking/competitive/competitive_intelligence_system.py:240: error:
Explicit "Any" is not allowed  [explicit-any]
        async def analyze_behavior(
        ^
src/thinking/competitive/competitive_intelligence_system.py:262: error:
Explicit "Any" is not allowed  [explicit-any]
                behavior = cast(Any, CompetitorBehavior)(
                           ^
src/thinking/competitive/competitive_intelligence_system.py:293: error:
Explicit "Any" is not allowed  [explicit-any]
        async def _extract_behavior_data(
        ^
src/thinking/competitive/competitive_intelligence_system.py:313: error:
Explicit "Any" is not allowed  [explicit-any]
        def _calculate_behavior_metrics(
        ^
src/thinking/competitive/competitive_intelligence_system.py:332: error:
Explicit "Any" is not allowed  [explicit-any]
        def _identify_behavior_patterns(
        ^
src/thinking/competitive/competitive_intelligence_system.py:368: error:
Incompatible types in assignment (expression has type "float", variable has type
"int")  [assignment]
                threat_score += metrics.get('efficiency', 0) * 0.3
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/thinking/competitive/competitive_intelligence_system.py:369: error:
Incompatible types in assignment (expression has type "float", variable has type
"int")  [assignment]
                threat_score += metrics.get('aggressiveness', 0) * 0.2
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/thinking/competitive/competitive_intelligence_system.py:370: error:
Incompatible types in assignment (expression has type "float", variable has type
"int")  [assignment]
                threat_score += metrics.get('sophistication', 0) * 0.3
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/thinking/competitive/competitive_intelligence_system.py:371: error:
Incompatible types in assignment (expression has type "float", variable has type
"int")  [assignment]
                threat_score += metrics.get('consistency', 0) * 0.2
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/thinking/competitive/competitive_intelligence_system.py:375: error:
Incompatible types in assignment (expression has type "float", variable has type
"int")  [assignment]
                    threat_score += 0.1
                    ^~~~~~~~~~~~~~~~~~~
src/thinking/competitive/competitive_intelligence_system.py:377: error:
Incompatible types in assignment (expression has type "float", variable has type
"int")  [assignment]
                    threat_score += 0.2
                    ^~~~~~~~~~~~~~~~~~~
src/thinking/competitive/competitive_intelligence_system.py:391: error:
Explicit "Any" is not allowed  [explicit-any]
        def _estimate_market_share(
        ^
src/thinking/competitive/competitive_intelligence_system.py:407: error:
Explicit "Any" is not allowed  [explicit-any]
        def _estimate_performance(
        ^
src/thinking/competitive/competitive_intelligence_system.py:428: error:
Function is missing a return type annotation  [no-untyped-def]
        def __init__(self):
        ^
src/thinking/competitive/competitive_intelligence_system.py:428: note: Use "-> None" if function does not return a value
src/thinking/competitive/competitive_intelligence_system.py:457: error:
Explicit "Any" is not allowed  [explicit-any]
        async def develop_counter(
        ^
src/thinking/competitive/competitive_intelligence_system.py:486: error:
Explicit "Any" is not allowed  [explicit-any]
                counter_strategy = cast(Any, CounterStrategy)(
                                   ^
src/thinking/competitive/competitive_intelligence_system.py:520: error:
Explicit "Any" is not allowed  [explicit-any]
        def _customize_counter_strategy(
        ^
src/thinking/competitive/competitive_intelligence_system.py:566: error:
Explicit "Any" is not allowed  [explicit-any]
        def _calculate_expected_impact(
        ^
src/thinking/competitive/competitive_intelligence_system.py:587: error:
Returning Any from function declared to return "float"  [no-any-return]
                return min(effectiveness, 1.0)
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/thinking/competitive/competitive_intelligence_system.py:597: error:
Function is missing a return type annotation  [no-untyped-def]
        def __init__(self):
        ^
src/thinking/competitive/competitive_intelligence_system.py:597: note: Use "-> None" if function does not return a value
src/thinking/competitive/competitive_intelligence_system.py:605: error:
Explicit "Any" is not allowed  [explicit-any]
        async def analyze_share_changes(
        ^
src/thinking/competitive/competitive_intelligence_system.py:664: error:
Explicit "Any" is not allowed  [explicit-any]
        def _calculate_share_trends(
        ^
src/thinking/competitive/competitive_intelligence_system.py:687: error:
Explicit "Any" is not allowed  [explicit-any]
        def _identify_competitive_threats(
        ^
src/thinking/competitive/competitive_intelligence_system.py:712: error:
Explicit "Any" is not allowed  [explicit-any]
        def _calculate_competitive_position(
        ^
src/thinking/competitive/competitive_intelligence_system.py:768: error:
Explicit "Any" is not allowed  [explicit-any]
        async def identify_competitors(
        ^
src/thinking/competitive/competitive_intelligence_system.py:852: error:
Explicit "Any" is not allowed  [explicit-any]
        async def _get_known_patterns(self) -> Dict[str, Any]:
        ^
src/thinking/competitive/competitive_intelligence_system.py:860: error:
Explicit "Any" is not allowed  [explicit-any]
        async def _get_historical_data(self) -> Dict[str, Any]:
        ^
src/thinking/competitive/competitive_intelligence_system.py:874: error:
Explicit "Any" is not allowed  [explicit-any]
        async def _get_our_capabilities(self) -> Dict[str, Any]:
        ^
src/thinking/competitive/competitive_intelligence_system.py:888: error:
Explicit "Any" is not allowed  [explicit-any]
        async def _get_our_performance(self) -> Dict[str, Any]:
        ^
src/thinking/competitive/competitive_intelligence_system.py:903: error:
Explicit "Any" is not allowed  [explicit-any]
        async def _store_intelligence(
        ^
src/thinking/competitive/competitive_intelligence_system.py:937: error:
Explicit "Any" is not allowed  [explicit-any]
        async def get_intelligence_stats(self) -> Dict[str, Any]:
        ^
src/thinking/analysis/correlation_analyzer.py:15: error: Module
"src.core.interfaces" has no attribute "AnalysisResult"  [attr-defined]
        from src.core.interfaces import AnalysisResult, SensorySignal, Thi...
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/thinking/analysis/correlation_analyzer.py:15: error: Module
"src.core.interfaces" has no attribute "SensorySignal"  [attr-defined]
        from src.core.interfaces import AnalysisResult, SensorySignal, Thi...
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/thinking/analysis/correlation_analyzer.py:15: error: Module
"src.core.interfaces" has no attribute "ThinkingPattern"  [attr-defined]
        from src.core.interfaces import AnalysisResult, SensorySignal, Thi...
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/thinking/analysis/correlation_analyzer.py:17: error: Unused "type: ignore"
comment  [unused-ignore]
        ThinkingPattern = SensorySignal = AnalysisResult = object  # type:...
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/thinking/analysis/correlation_analyzer.py:18: error: Module
"src.core.exceptions" has no attribute "ThinkingException"; maybe
"TradingException"?  [attr-defined]
    from src.core.exceptions import ThinkingException
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/thinking/analysis/correlation_analyzer.py:23: error: Class cannot subclass
"ThinkingPattern" (has type "Any")  [misc]
    class CorrelationAnalyzer(ThinkingPattern):
                              ^~~~~~~~~~~~~~~
src/thinking/analysis/correlation_analyzer.py:26: error: Explicit "Any" is not
allowed  [explicit-any]
        def __init__(self, config: Optional[Dict[str, Any]] = None):
        ^
src/thinking/analysis/correlation_analyzer.py:69: error: Explicit "Any" is not
allowed  [explicit-any]
        def learn(self, feedback: Dict[str, Any]) -> bool:
        ^
src/thinking/analysis/correlation_analyzer.py:88: error: Function is missing a
return type annotation  [no-untyped-def]
        def _update_signal_history(self, signals: List[SensorySignal]):
        ^
src/thinking/analysis/correlation_analyzer.py:105: error: Need type annotation
for "correlation_matrix" (hint:
"correlation_matrix: dict[<type>, <type>] = ...")  [var-annotated]
            correlation_matrix = {}
            ^~~~~~~~~~~~~~~~~~
src/thinking/analysis/correlation_analyzer.py:145: error: Explicit "Any" is not
allowed  [explicit-any]
        def _identify_significant_correlations(self, correlation_matrix: D...
        ^
src/thinking/analysis/correlation_analyzer.py:166: error: Explicit "Any" is not
allowed  [explicit-any]
        def _analyze_correlation_clusters(self, correlation_matrix: Dict[s...
        ^
src/thinking/analysis/correlation_analyzer.py:169: error: Need type annotation
for "clusters" (hint: "clusters: list[<type>] = ...")  [var-annotated]
            clusters = []
            ^~~~~~~~
src/thinking/analysis/correlation_analyzer.py:170: error: Need type annotation
for "processed" (hint: "processed: set[<type>] = ...")  [var-annotated]
            processed = set()
            ^~~~~~~~~
src/thinking/analysis/correlation_analyzer.py:191: error: Missing type
parameters for generic type "set"  [type-arg]
                                    processed: set) -> List[str]:
                                               ^
src/thinking/analysis/correlation_analyzer.py:217: error: Incompatible return
value type (got "floating[Any] | float", expected "float")  [return-value]
            return np.mean(correlations) if correlations else 1.0
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/thinking/analysis/correlation_analyzer.py:237: error: Value of type
variable "SupportsRichComparisonT" of "max" cannot be "floating[Any] | float" 
[type-var]
            return max(0.0, min(1.0, diversification_score))
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/thinking/analysis/correlation_analyzer.py:237: error: Incompatible return
value type (got "floating[Any] | float", expected "float")  [return-value]
            return max(0.0, min(1.0, diversification_score))
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/thinking/analysis/correlation_analyzer.py:237: error: Value of type
variable "SupportsRichComparisonT" of "min" cannot be "floating[Any] | float" 
[type-var]
            return max(0.0, min(1.0, diversification_score))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/thinking/analysis/correlation_analyzer.py:239: error: Explicit "Any" is not
allowed  [explicit-any]
        def _assess_risk_concentration(self, correlation_matrix: Dict[str,...
        ^
src/thinking/adversarial/red_team_ai.py:17: error: Cannot find implementation
or library stub for module named "src.core.events"  [import-not-found]
        from src.core.events import AttackResult, ExploitResult, StrategyA...
    ^
src/thinking/adversarial/red_team_ai.py:19: error: Unused "type: ignore"
comment  [unused-ignore]
        StrategyAnalysis = AttackResult = ExploitResult = object  # type: ...
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/thinking/adversarial/red_team_ai.py:27: error: Explicit "Any" is not
allowed  [explicit-any]
    def _to_mapping(obj: Any) -> Dict[str, Any]:
    ^
src/thinking/adversarial/red_team_ai.py:37: error: Unused "type: ignore"
comment  [unused-ignore]
                d = obj.dict()  # type: ignore[attr-defined]
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/thinking/adversarial/red_team_ai.py:45: error: Explicit "Any" is not
allowed  [explicit-any]
        out: Dict[str, Any] = {}
        ^~~~~~~~~~~~~~~~~~~~~~~~
src/thinking/adversarial/red_team_ai.py:58: error: Function is missing a return
type annotation  [no-untyped-def]
        def __init__(self):
        ^
src/thinking/adversarial/red_team_ai.py:58: note: Use "-> None" if function does not return a value
src/thinking/adversarial/red_team_ai.py:67: error: Explicit "Any" is not
allowed  [explicit-any]
        async def analyze_behavior(
        ^
src/thinking/adversarial/red_team_ai.py:115: error: Explicit "Any" is not
allowed  [explicit-any]
        async def _simulate_strategy_behavior(
        ^
src/thinking/adversarial/red_team_ai.py:135: error: Explicit "Any" is not
allowed  [explicit-any]
        def _calculate_behavior_metrics(
        ^
src/thinking/adversarial/red_team_ai.py:178: error: Explicit "Any" is not
allowed  [explicit-any]
        def _identify_performance_patterns(
        ^
src/thinking/adversarial/red_team_ai.py:200: error: Function is missing a
return type annotation  [no-untyped-def]
        def __init__(self):
        ^
src/thinking/adversarial/red_team_ai.py:200: note: Use "-> None" if function does not return a value
src/thinking/adversarial/red_team_ai.py:210: error: Explicit "Any" is not
allowed  [explicit-any]
        async def find_weaknesses(
        ^
src/thinking/adversarial/red_team_ai.py:239: error: Explicit "Any" is not
allowed  [explicit-any]
        def _check_vulnerability(
        ^
src/thinking/adversarial/red_team_ai.py:248: error: Returning Any from function
declared to return "bool"  [no-any-return]
                    return behavior_profile.get('volatility_sensitivity', ...
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/thinking/adversarial/red_team_ai.py:251: error: Returning Any from function
declared to return "bool"  [no-any-return]
                    return behavior_profile.get('trend_following_strength'...
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/thinking/adversarial/red_team_ai.py:254: error: Returning Any from function
declared to return "bool"  [no-any-return]
                    return behavior_profile.get('mean_reversion_tendency',...
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/thinking/adversarial/red_team_ai.py:262: error: Explicit "Any" is not
allowed  [explicit-any]
        def _detect_new_weaknesses(
        ^
src/thinking/adversarial/red_team_ai.py:285: error: Function is missing a
return type annotation  [no-untyped-def]
        def __init__(self):
        ^
src/thinking/adversarial/red_team_ai.py:285: note: Use "-> None" if function does not return a value
src/thinking/adversarial/red_team_ai.py:304: error: Explicit "Any" is not
allowed  [explicit-any]
        async def create_attack(
        ^
src/thinking/adversarial/red_team_ai.py:353: error: Explicit "Any" is not
allowed  [explicit-any]
        def _generate_attack_parameters(
        ^
src/thinking/adversarial/red_team_ai.py:394: error: Function is missing a
return type annotation  [no-untyped-def]
        def __init__(self):
        ^
src/thinking/adversarial/red_team_ai.py:394: note: Use "-> None" if function does not return a value
src/thinking/adversarial/red_team_ai.py:413: error: Explicit "Any" is not
allowed  [explicit-any]
        async def develop_exploits(
        ^
src/thinking/adversarial/red_team_ai.py:438: error: Explicit "Any" is not
allowed  [explicit-any]
        async def _create_exploit(
        ^
src/thinking/adversarial/red_team_ai.py:468: error: Explicit "Any" is not
allowed  [explicit-any]
        def _generate_exploit_parameters(self, weakness: str) -> Dict[str,...
        ^
src/thinking/adversarial/red_team_ai.py:511: error: Explicit "Any" is not
allowed  [explicit-any]
        async def attack_strategy(
        ^
src/thinking/adversarial/red_team_ai.py:608: error: Explicit "Any" is not
allowed  [explicit-any]
        async def _generate_test_scenarios(self) -> List[Dict[str, Any]]:
        ^
src/thinking/adversarial/red_team_ai.py:636: error: Explicit "Any" is not
allowed  [explicit-any]
        async def _execute_attack(
        ^
src/thinking/adversarial/red_team_ai.py:672: error: Explicit "Any" is not
allowed  [explicit-any]
        async def _store_attack_results(
        ^
src/thinking/adversarial/red_team_ai.py:713: error: Explicit "Any" is not
allowed  [explicit-any]
        async def _generate_improvements(
        ^
src/thinking/adversarial/red_team_ai.py:742: error: Explicit "Any" is not
allowed  [explicit-any]
        async def get_red_team_stats(self) -> Dict[str, Any]:
        ^
src/sentient/memory/faiss_pattern_memory.py:20: error: Explicit "Any" is not
allowed  [explicit-any]
    class MemoryEntry:
    ^~~~~~~~~~~~~~~~~
src/sentient/memory/faiss_pattern_memory.py:22: error: Explicit "Any" is not
allowed  [explicit-any]
        vector: np.ndarray
        ^~~~~~~~~~~~~~~~~~
src/sentient/memory/faiss_pattern_memory.py:23: error: Explicit "Any" is not
allowed  [explicit-any]
        metadata: Dict[str, Any]
        ^~~~~~~~~~~~~~~~~~~~~~~~
src/sentient/memory/faiss_pattern_memory.py:30: error: Returning Any from
function declared to return "dict[str, float]"  [no-any-return]
            return self.metadata.get('features', {})
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/sentient/memory/faiss_pattern_memory.py:35: error: Returning Any from
function declared to return "dict[str, float]"  [no-any-return]
            return self.metadata.get('outcome', {})
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/sentient/memory/faiss_pattern_memory.py:40: error: Explicit "Any" is not
allowed  [explicit-any]
        def __init__(self, config: Dict[str, Any]):
        ^
src/sentient/memory/faiss_pattern_memory.py:51: error: Need type annotation for
"metadata" (hint: "metadata: dict[<type>, <type>] = ...")  [var-annotated]
            self.metadata = {}
            ^~~~~~~~~~~~~
src/sentient/memory/faiss_pattern_memory.py:57: error: Function is missing a
return type annotation  [no-untyped-def]
        def _initialize_index(self):
        ^
src/sentient/memory/faiss_pattern_memory.py:57: note: Use "-> None" if function does not return a value
src/sentient/memory/faiss_pattern_memory.py:60: error: Incompatible types in
assignment (expression has type "Index", variable has type "None")  [assignment]
                self.index = faiss.read_index(str(self.index_path))
                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/sentient/memory/faiss_pattern_memory.py:61: error: "None" has no attribute
"ntotal"  [attr-defined]
    ...           logger.info(f"Loaded FAISS index with {self.index.ntotal} e...
                                                        ^~~~~~~~~~~~~~~~~~
src/sentient/memory/faiss_pattern_memory.py:64: error: Incompatible types in
assignment (expression has type "IndexFlatL2", variable has type "None") 
[assignment]
                self.index = faiss.IndexFlatL2(self.dimension)
                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/sentient/memory/faiss_pattern_memory.py:67: error: Function is missing a
return type annotation  [no-untyped-def]
        def _load_metadata(self):
        ^
src/sentient/memory/faiss_pattern_memory.py:67: note: Use "-> None" if function does not return a value
src/sentient/memory/faiss_pattern_memory.py:74: error: Function is missing a
return type annotation  [no-untyped-def]
        def _save_metadata(self):
        ^
src/sentient/memory/faiss_pattern_memory.py:74: note: Use "-> None" if function does not return a value
src/sentient/memory/faiss_pattern_memory.py:79: error: Explicit "Any" is not
allowed  [explicit-any]
        def add_experience(self, vector: np.ndarray, metadata: Dict[str, A...
        ^
src/sentient/memory/faiss_pattern_memory.py:90: error: "None" has no attribute
"add"  [attr-defined]
            self.index.add(vector.reshape(1, -1))
            ^~~~~~~~~~~~~~
src/sentient/memory/faiss_pattern_memory.py:101: error: "None" has no attribute
"ntotal"  [attr-defined]
                'index_position': self.index.ntotal - 1
                                  ^~~~~~~~~~~~~~~~~
src/sentient/memory/faiss_pattern_memory.py:108: error: Argument 1 to
"write_index" has incompatible type "None"; expected "Index"  [arg-type]
            faiss.write_index(self.index, str(self.index_path))
                              ^~~~~~~~~~
src/sentient/memory/faiss_pattern_memory.py:113: error: Explicit "Any" is not
allowed  [explicit-any]
        def search_similar(self, query_vector: np.ndarray, k: int = 10) ->...
        ^
src/sentient/memory/faiss_pattern_memory.py:124: error: "None" has no attribute
"search"  [attr-defined]
            distances, indices = self.index.search(query_vector.reshape(1,...
                                 ^~~~~~~~~~~~~~~~~
src/sentient/memory/faiss_pattern_memory.py:149: error: Explicit "Any" is not
allowed  [explicit-any]
        def get_memory_stats(self) -> Dict[str, Any]:
        ^
src/sentient/memory/faiss_pattern_memory.py:152: error: "None" has no attribute
"ntotal"  [attr-defined]
                'total_memories': self.index.ntotal,
                                  ^~~~~~~~~~~~~~~~~
src/sentient/memory/faiss_pattern_memory.py:159: error: Function is missing a
return type annotation  [no-untyped-def]
        def clear_memory(self):
        ^
src/sentient/memory/faiss_pattern_memory.py:159: note: Use "-> None" if function does not return a value
src/sentient/memory/faiss_pattern_memory.py:161: error: Incompatible types in
assignment (expression has type "IndexFlatL2", variable has type "None") 
[assignment]
            self.index = faiss.IndexFlatL2(self.dimension)
                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/sentient/memory/faiss_pattern_memory.py:173: error: Explicit "Any" is not
allowed  [explicit-any]
        def get_recent_memories(self, count: int = 100) -> List[Dict[str, ...
        ^
src/sentient/learning/real_time_learning_engine.py:26: error: Explicit "Any" is
not allowed  [explicit-any]
    class LearningSignal:
    ^~~~~~~~~~~~~~~~~~~~
src/sentient/learning/real_time_learning_engine.py:31: error: Explicit "Any" is
not allowed  [explicit-any]
        context: Dict[str, Any]  # Market conditions at trade time
        ^~~~~~~~~~~~~~~~~~~~~~~
src/sentient/learning/real_time_learning_engine.py:34: error: Explicit "Any" is
not allowed  [explicit-any]
        metadata: Dict[str, Any]  # Additional context
        ^~~~~~~~~~~~~~~~~~~~~~~~
src/sentient/learning/real_time_learning_engine.py:54: error: Explicit "Any" is
not allowed  [explicit-any]
        def __init__(self, config: Dict[str, Any]):
        ^
src/sentient/learning/real_time_learning_engine.py:60: error: Explicit "Any" is
not allowed  [explicit-any]
        async def process_closed_trade(self, trade_data: Dict[str, Any]) -...
        ^
src/sentient/learning/real_time_learning_engine.py:115: error: Explicit "Any"
is not allowed  [explicit-any]
        def _detect_liquidity_grab(self, trade_data: Dict[str, Any]) -> bo...
        ^
src/sentient/learning/real_time_learning_engine.py:122: error: Returning Any
from function declared to return "bool"  [no-any-return]
            return price_change > 0.001 and volume > 3 * avg_volume
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/sentient/learning/real_time_learning_engine.py:124: error: Explicit "Any"
is not allowed  [explicit-any]
        def _detect_stop_cascade(self, trade_data: Dict[str, Any]) -> bool...
        ^
src/sentient/learning/real_time_learning_engine.py:134: error: Explicit "Any"
is not allowed  [explicit-any]
        def _extract_context(self, trade_data: Dict[str, Any]) -> Dict[str...
        ^
src/sentient/learning/real_time_learning_engine.py:145: error: Explicit "Any"
is not allowed  [explicit-any]
        def _extract_features(self, trade_data: Dict[str, Any]) -> Dict[st...
        ^
src/sentient/learning/real_time_learning_engine.py:164: error: Explicit "Any"
is not allowed  [explicit-any]
        def get_performance_summary(self) -> Dict[str, Any]:
        ^
src/sentient/adaptation/adaptation_controller.py:27: error: Explicit "Any" is
not allowed  [explicit-any]
    class TacticalAdaptation:
    ^~~~~~~~~~~~~~~~~~~~~~~~
src/sentient/adaptation/adaptation_controller.py:31: error: Explicit "Any" is
not allowed  [explicit-any]
        parameters: Dict[str, Any]
        ^~~~~~~~~~~~~~~~~~~~~~~~~~
src/sentient/adaptation/adaptation_controller.py:50: error: Explicit "Any" is
not allowed  [explicit-any]
        def __init__(self, config: Dict[str, Any]):
        ^
src/sentient/adaptation/adaptation_controller.py:56: error: Explicit "Any" is
not allowed  [explicit-any]
        async def generate_adaptations(self, 
        ^
src/sentient/adaptation/adaptation_controller.py:86: error: Explicit "Any" is
not allowed  [explicit-any]
        def _analyze_memory_patterns(self, memories: List[Dict[str, Any]])...
        ^
src/sentient/adaptation/adaptation_controller.py:112: error: Explicit "Any" is
not allowed  [explicit-any]
        def _generate_risk_adaptations(self, patterns: Dict[str, Any], con...
        ^
src/sentient/adaptation/adaptation_controller.py:140: error: Explicit "Any" is
not allowed  [explicit-any]
        def _generate_position_size_adaptations(self, patterns: Dict[str, ...
        ^
src/sentient/adaptation/adaptation_controller.py:159: error: Explicit "Any" is
not allowed  [explicit-any]
        def _generate_timing_adaptations(self, patterns: Dict[str, Any], c...
        ^
src/sentient/adaptation/adaptation_controller.py:178: error: Explicit "Any" is
not allowed  [explicit-any]
        def _generate_strategy_adaptations(self, patterns: Dict[str, Any],...
        ^
src/sentient/adaptation/adaptation_controller.py:197: error: Explicit "Any" is
not allowed  [explicit-any]
        def _generate_liquidity_adaptations(self, patterns: Dict[str, Any]...
        ^
src/sentient/adaptation/adaptation_controller.py:215: error: Explicit "Any" is
not allowed  [explicit-any]
        def get_adaptation_summary(self) -> Dict[str, Any]:
        ^
src/sensory/organs/volume_organ.py:15: error: Module "src.core.exceptions" has
no attribute "SensoryException"; maybe "ResourceException"?  [attr-defined]
    from src.core.exceptions import SensoryException
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/volume_organ.py:16: error: Module "src.core.base" has no
attribute "SensoryOrgan"  [attr-defined]
    from src.core.base import MarketData, SensoryOrgan
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/volume_organ.py:23: error: Explicit "Any" is not allowed 
[explicit-any]
    class VolumeSignal:
    ^~~~~~~~~~~~~~~~~~
src/sensory/organs/volume_organ.py:29: error: Explicit "Any" is not allowed 
[explicit-any]
        metadata: Dict[str, Any]
        ^~~~~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/volume_organ.py:32: error: Class cannot subclass
"SensoryOrgan" (has type "Any")  [misc]
    class VolumeOrgan(SensoryOrgan):
                      ^~~~~~~~~~~~
src/sensory/organs/volume_organ.py:35: error: Explicit "Any" is not allowed 
[explicit-any]
        def __init__(self, config: Optional[Dict[str, Any]] = None):
        ^
src/sensory/organs/volume_organ.py:322: error: Incompatible types in assignment
(expression has type "float", variable has type "int")  [assignment]
                total_weight += weight
                ^~~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/volume_organ.py:323: error: Incompatible types in assignment
(expression has type "float", variable has type "int")  [assignment]
                weighted_sum += signal.value * weight
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/volume_organ.py:330: error: Incompatible types in assignment
(expression has type "float", variable has type "floating[Any]")  [assignment]
                composite_confidence = 0.0
                                       ^~~
src/sensory/organs/volume_organ.py:336: error: Argument "confidence" to
"VolumeSignal" has incompatible type "floating[Any]"; expected "float" 
[arg-type]
                confidence=composite_confidence,
                           ^~~~~~~~~~~~~~~~~~~~
src/sensory/organs/price_organ.py:15: error: Module "src.core.exceptions" has
no attribute "SensoryException"; maybe "ResourceException"?  [attr-defined]
    from src.core.exceptions import SensoryException
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/price_organ.py:16: error: Module "src.core.base" has no
attribute "SensoryOrgan"  [attr-defined]
    from src.core.base import MarketData, SensoryOrgan
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/price_organ.py:23: error: Explicit "Any" is not allowed 
[explicit-any]
    class PriceSignal:
    ^~~~~~~~~~~~~~~~~
src/sensory/organs/price_organ.py:29: error: Explicit "Any" is not allowed 
[explicit-any]
        metadata: Dict[str, Any]
        ^~~~~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/price_organ.py:32: error: Class cannot subclass
"SensoryOrgan" (has type "Any")  [misc]
    class PriceOrgan(SensoryOrgan):
                     ^~~~~~~~~~~~
src/sensory/organs/price_organ.py:35: error: Explicit "Any" is not allowed 
[explicit-any]
        def __init__(self, config: Optional[Dict[str, Any]] = None):
        ^
src/sensory/organs/price_organ.py:263: error: Incompatible types in assignment
(expression has type "float", variable has type "int")  [assignment]
                total_weight += weight
                ^~~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/price_organ.py:264: error: Incompatible types in assignment
(expression has type "float", variable has type "int")  [assignment]
                weighted_sum += signal.value * weight
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/price_organ.py:271: error: Incompatible types in assignment
(expression has type "float", variable has type "floating[Any]")  [assignment]
                composite_confidence = 0.0
                                       ^~~
src/sensory/organs/price_organ.py:277: error: Argument "confidence" to
"PriceSignal" has incompatible type "floating[Any]"; expected "float" 
[arg-type]
                confidence=composite_confidence,
                           ^~~~~~~~~~~~~~~~~~~~
src/sensory/organs/orderbook_organ.py:15: error: Module "src.core.exceptions"
has no attribute "SensoryException"; maybe "ResourceException"?  [attr-defined]
    from src.core.exceptions import SensoryException
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/orderbook_organ.py:16: error: Module "src.core.base" has no
attribute "SensoryOrgan"  [attr-defined]
    from src.core.base import MarketData, SensoryOrgan
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/orderbook_organ.py:23: error: Explicit "Any" is not allowed 
[explicit-any]
    class OrderbookSignal:
    ^~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/orderbook_organ.py:29: error: Explicit "Any" is not allowed 
[explicit-any]
        metadata: Dict[str, Any]
        ^~~~~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/orderbook_organ.py:32: error: Class cannot subclass
"SensoryOrgan" (has type "Any")  [misc]
    class OrderbookOrgan(SensoryOrgan):
                         ^~~~~~~~~~~~
src/sensory/organs/orderbook_organ.py:35: error: Explicit "Any" is not allowed 
[explicit-any]
        def __init__(self, config: Optional[Dict[str, Any]] = None):
        ^
src/sensory/organs/orderbook_organ.py:286: error: Incompatible types in
assignment (expression has type "float", variable has type "int")  [assignment]
                total_weight += weight
                ^~~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/orderbook_organ.py:287: error: Incompatible types in
assignment (expression has type "float", variable has type "int")  [assignment]
                weighted_sum += signal.value * weight
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/orderbook_organ.py:294: error: Incompatible types in
assignment (expression has type "float", variable has type "floating[Any]") 
[assignment]
                composite_confidence = 0.0
                                       ^~~
src/sensory/organs/orderbook_organ.py:300: error: Argument "confidence" to
"OrderbookSignal" has incompatible type "floating[Any]"; expected "float" 
[arg-type]
                confidence=composite_confidence,
                           ^~~~~~~~~~~~~~~~~~~~
src/sensory/organs/dimensions/utils.py:74: error: Function is missing a return
type annotation  [no-untyped-def]
        def __init__(self):
        ^
src/sensory/organs/dimensions/utils.py:74: note: Use "-> None" if function does not return a value
src/sensory/organs/dimensions/utils.py:238: error: Incompatible types in
assignment (expression has type "floating[Any] | float", variable has type
"float")  [assignment]
                    np.mean(signal_agreements) if signal_agreements else 0...
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/dimensions/utils.py:258: error: Returning Any from function
declared to return "float"  [no-any-return]
            return confidence
            ^~~~~~~~~~~~~~~~~
src/sensory/organs/dimensions/utils.py:316: error: Returning Any from function
declared to return "float"  [no-any-return]
        return np.exp(-decay_rate * abs(distance))
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/dimensions/utils.py:342: error: Returning Any from function
declared to return "float"  [no-any-return]
        return np.tanh(momentum * 10)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/dimensions/utils.py:364: error: Returning Any from function
declared to return "float"  [no-any-return]
        return min(1.0, volatility)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/dimensions/macro_intelligence.py:19: error: Explicit "Any"
is not allowed  [explicit-any]
    class MacroEnvironmentState:
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/dimensions/macro_intelligence.py:27: error: Explicit "Any"
is not allowed  [explicit-any]
        key_events: List[Dict[str, Any]]
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/dimensions/macro_intelligence.py:33: error: Explicit "Any"
is not allowed  [explicit-any]
        def __init__(self, config: Optional[Dict[str, Any]] = None):
        ^
src/sensory/organs/dimensions/macro_intelligence.py:79: error: Incompatible
return value type (got "floating[Any]", expected "float")  [return-value]
            return np.mean(factors)
                   ^~~~~~~~~~~~~~~~
src/sensory/organs/dimensions/macro_intelligence.py:94: error: Explicit "Any"
is not allowed  [explicit-any]
        async def _identify_key_events(self) -> List[Dict[str, Any]]:
        ^
src/sensory/organs/dimensions/macro_intelligence.py:126: error: Function is
missing a return type annotation  [no-untyped-def]
        def __init__(self):
        ^
src/sensory/organs/dimensions/macro_intelligence.py:126: note: Use "-> None" if function does not return a value
src/sensory/organs/dimensions/macro_intelligence.py:155: error: Explicit "Any"
is not allowed  [explicit-any]
        async def _fetch_central_bank_statements(self) -> List[Dict[str, A...
        ^
src/sensory/organs/dimensions/macro_intelligence.py:166: error: Explicit "Any"
is not allowed  [explicit-any]
        def _calculate_statement_weight(self, statement: Dict[str, Any]) -...
        ^
src/sensory/organs/dimensions/macro_intelligence.py:168: error: Returning Any
from function declared to return "float"  [no-any-return]
            return statement.get('weight', 1.0)
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/dimensions/macro_intelligence.py:170: error: Explicit "Any"
is not allowed  [explicit-any]
        async def get_upcoming_events(self) -> List[Dict[str, Any]]:
        ^
src/sensory/organs/dimensions/macro_intelligence.py:185: error: Function is
missing a return type annotation  [no-untyped-def]
        def __init__(self):
        ^
src/sensory/organs/dimensions/macro_intelligence.py:185: note: Use "-> None" if function does not return a value
src/sensory/organs/dimensions/macro_intelligence.py:212: error: Explicit "Any"
is not allowed  [explicit-any]
        async def _fetch_geopolitical_events(self) -> List[Dict[str, Any]]...
        ^
src/sensory/organs/dimensions/macro_intelligence.py:225: error: Explicit "Any"
is not allowed  [explicit-any]
        def _calculate_event_weight(self, event: Dict[str, Any]) -> float:
        ^
src/sensory/organs/dimensions/macro_intelligence.py:227: error: Returning Any
from function declared to return "float"  [no-any-return]
            return event.get('severity', 0.5)
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/dimensions/macro_intelligence.py:229: error: Explicit "Any"
is not allowed  [explicit-any]
        async def get_active_events(self) -> List[Dict[str, Any]]:
        ^
src/sensory/organs/dimensions/macro_intelligence.py:252: error: Function is
missing a return type annotation  [no-untyped-def]
        def __init__(self):
        ^
src/sensory/organs/dimensions/macro_intelligence.py:252: note: Use "-> None" if function does not return a value
src/sensory/organs/dimensions/macro_intelligence.py:296: error: Returning Any
from function declared to return "MarketRegime"  [no-any-return]
                return MarketRegime.HIGH_VOLATILITY
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/dimensions/macro_intelligence.py:296: error:
"type[MarketRegime]" has no attribute "HIGH_VOLATILITY"  [attr-defined]
                return MarketRegime.HIGH_VOLATILITY
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/dimensions/macro_intelligence.py:298: error: Returning Any
from function declared to return "MarketRegime"  [no-any-return]
                return MarketRegime.BULLISH
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/dimensions/macro_intelligence.py:298: error:
"type[MarketRegime]" has no attribute "BULLISH"  [attr-defined]
                return MarketRegime.BULLISH
                       ^~~~~~~~~~~~~~~~~~~~
src/sensory/organs/dimensions/macro_intelligence.py:300: error: Returning Any
from function declared to return "MarketRegime"  [no-any-return]
                return MarketRegime.BEARISH
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/dimensions/macro_intelligence.py:300: error:
"type[MarketRegime]" has no attribute "BEARISH"  [attr-defined]
                return MarketRegime.BEARISH
                       ^~~~~~~~~~~~~~~~~~~~
src/sensory/organs/dimensions/macro_intelligence.py:302: error: Returning Any
from function declared to return "MarketRegime"  [no-any-return]
                return MarketRegime.RANGING
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/dimensions/macro_intelligence.py:302: error:
"type[MarketRegime]" has no attribute "RANGING"  [attr-defined]
                return MarketRegime.RANGING
                       ^~~~~~~~~~~~~~~~~~~~
src/sensory/organs/dimensions/macro_intelligence.py:306: error: Function is
missing a return type annotation  [no-untyped-def]
        async def test_macro_intelligence():
        ^
src/sensory/organs/dimensions/macro_intelligence.py:306: note: Use "-> None" if function does not return a value
src/performance/vectorized_indicators.py:15: error: Explicit "Any" is not
allowed  [explicit-any]
        def sma(data: np.ndarray, period: int) -> np.ndarray:
        ^
src/performance/vectorized_indicators.py:22: error: Explicit "Any" is not
allowed  [explicit-any]
        def rsi(data: np.ndarray, period: int = 14) -> np.ndarray:
        ^
src/performance/vectorized_indicators.py:52: error: Explicit "Any" is not
allowed  [explicit-any]
        def bollinger_bands(
        ^
src/performance/vectorized_indicators.py:54: error: Missing type parameters for
generic type "dict"  [type-arg]
        ) -> dict:
             ^
src/performance/vectorized_indicators.py:71: error: Missing type parameters for
generic type "dict"  [type-arg]
            market_data: dict, indicators: Optional[list[str]] = None
                         ^
src/performance/vectorized_indicators.py:72: error: Missing type parameters for
generic type "dict"  [type-arg]
        ) -> dict:
             ^
src/data_integration/data_fusion.py:23: error: Cannot find implementation or
library stub for module named "src.data_integration.data_validation" 
[import-not-found]
    from .data_validation import MarketDataValidator, ValidationLevel
    ^
src/data_integration/data_fusion.py:23: note: See https://mypy.readthedocs.io/en/stable/running_mypy.html#missing-imports
src/data_integration/data_fusion.py:55: error: Explicit "Any" is not allowed 
[explicit-any]
    class FusedDataPoint:
    ^~~~~~~~~~~~~~~~~~~~
src/data_integration/data_fusion.py:65: error: Explicit "Any" is not allowed 
[explicit-any]
        metadata: Dict[str, Any] = field(default_factory=dict)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/data_integration/data_fusion.py:82: error: Function is missing a return
type annotation  [no-untyped-def]
        def __init__(self):
        ^
src/data_integration/data_fusion.py:82: note: Use "-> None" if function does not return a value
src/data_integration/data_fusion.py:103: error: "MarketData" has no attribute
"volatility"  [attr-defined]
                        volatility=data.volatility
                                   ^~~~~~~~~~~~~~~
src/data_integration/data_fusion.py:124: error: Need type annotation for
"aligned_data" (hint: "aligned_data: dict[<type>, <type>] = ...") 
[var-annotated]
            aligned_data = {}
            ^~~~~~~~~~~~
src/data_integration/data_fusion.py:163: error: Incompatible return value type
(got "tuple[None, list[str]]", expected "tuple[MarketData, list[str]]") 
[return-value]
                return None, []
                       ^~~~~~~~
src/data_integration/data_fusion.py:201: error: Statement is unreachable 
[unreachable]
                return self._weighted_average_resolution(data_points, weig...
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/data_integration/data_fusion.py:214: error: Incompatible types in
assignment (expression has type "float", variable has type "int")  [assignment]
                total_weight += weight
                ^~~~~~~~~~~~~~~~~~~~~~
src/data_integration/data_fusion.py:216: error: Incompatible types in
assignment (expression has type "float", variable has type "int")  [assignment]
                weighted_bid += data.bid * weight
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/data_integration/data_fusion.py:217: error: Incompatible types in
assignment (expression has type "float", variable has type "int")  [assignment]
                weighted_ask += data.ask * weight
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/data_integration/data_fusion.py:218: error: Incompatible types in
assignment (expression has type "float", variable has type "int")  [assignment]
                weighted_volume += data.volume * weight
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/data_integration/data_fusion.py:219: error: "MarketData" has no attribute
"volatility"  [attr-defined]
                weighted_volatility += data.volatility * weight
                                       ^~~~~~~~~~~~~~~
src/data_integration/data_fusion.py:251: error: "MarketData" has no attribute
"volatility"  [attr-defined]
            volatilities = [data.volatility for _, data, _ in data_points]
                            ^~~~~~~~~~~~~~~
src/data_integration/data_fusion.py:269: error: "MarketData" has no attribute
"volatility"  [attr-defined]
            volatilities = [data.volatility for _, data, _ in data_points]
                            ^~~~~~~~~~~~~~~
src/data_integration/data_fusion.py:297: error: Explicit "Any" is not allowed 
[explicit-any]
        async def fuse_market_data(self, symbol: str, 
        ^
src/data_integration/data_fusion.py:366: error: Argument "volume" to
"FusedDataPoint" has incompatible type "float"; expected "int"  [arg-type]
                    volume=resolved_data.volume,
                           ^~~~~~~~~~~~~~~~~~~~
src/data_integration/data_fusion.py:367: error: "MarketData" has no attribute
"volatility"  [attr-defined]
                    volatility=resolved_data.volatility,
                               ^~~~~~~~~~~~~~~~~~~~~~~~
src/data_integration/data_fusion.py:387: error: Explicit "Any" is not allowed 
[explicit-any]
        async def _get_data_from_provider(self, provider: Any, symbol: str...
        ^
src/data_integration/data_fusion.py:391: error: Returning Any from function
declared to return "MarketData | None"  [no-any-return]
                    return await provider.get_market_data(symbol)
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/data_integration/data_fusion.py:393: error: Returning Any from function
declared to return "MarketData | None"  [no-any-return]
                    return await provider.get_real_time_quote(symbol)
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/data_integration/data_fusion.py:396: error: Returning Any from function
declared to return "MarketData | None"  [no-any-return]
                    return provider.get_market_data(symbol)
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/data_integration/data_fusion.py:439: error: Incompatible types in
assignment (expression has type "float", variable has type "int")  [assignment]
                total_weight += weight
                ^~~~~~~~~~~~~~~~~~~~~~
src/data_integration/data_fusion.py:440: error: Incompatible types in
assignment (expression has type "float", variable has type "int")  [assignment]
                weighted_confidence += confidence * weight
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/data_integration/data_fusion.py:443: error: Incompatible return value type
(got "floating[Any]", expected "float")  [return-value]
                return np.mean([conf for _, _, conf in data_points])
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/data_integration/data_fusion.py:447: error: Explicit "Any" is not allowed 
[explicit-any]
        def get_fusion_stats(self) -> Dict[str, Any]:
        ^
src/data_integration/data_fusion.py:459: error: Function is missing a return
type annotation  [no-untyped-def]
    async def test_data_fusion():
    ^
src/data_integration/data_fusion.py:459: note: Use "-> None" if function does not return a value
src/core/population_manager.py:42: error: Missing type parameters for generic
type "Callable"  [type-arg]
        def initialize_population(self, genome_factory: Callable) -> None:
                                                        ^
src/core/population_manager.py:52: error: Redundant cast to
"list[DecisionGenome]"  [redundant-cast]
            return cast(List[DecisionGenome], self.population.copy())
                   ^
src/core/population_manager.py:71: error: Redundant cast to
"list[DecisionGenome]"  [redundant-cast]
            return cast(List[DecisionGenome], sorted_population[:min(count...
                   ^
src/core/population_manager.py:80: error: Explicit "Any" is not allowed 
[explicit-any]
        def get_population_statistics(self) -> Dict[str, Any]:
        ^
src/core/population_manager.py:140: error: Redundant cast to "DecisionGenome" 
[redundant-cast]
                        return cast(DecisionGenome, genome)
                               ^
src/core/population_manager.py:200: error: Missing type parameters for generic
type "Dict"  [type-arg]
        def evolve_population(self, market_data: Dict, performance_metrics...
                                                 ^
src/core/population_manager.py:215: error: Redundant cast to
"list[DecisionGenome]"  [redundant-cast]
    ...          new_population: List[DecisionGenome] = cast(List[DecisionGen...
                                                        ^
src/core/population_manager.py:241: error: Missing type parameters for generic
type "Dict"  [type-arg]
        def _evaluate_fitness(self, market_data: Dict, performance_metrics...
                                                 ^
src/core/population_manager.py:259: error: Unused "type: ignore" comment 
[unused-ignore]
                                    perf_dict[k] = float(v)  # type: ignor...
                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/core/population_manager.py:269: error: Unused "type: ignore" comment 
[unused-ignore]
                        genome.fitness = 0.0  # type: ignore[assignment]
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/core/population_manager.py:280: error: Explicit "Any" is not allowed 
[explicit-any]
        def _crossover(self, parent1: Any, parent2: Any) -> Any:
        ^
src/core/population_manager.py:303: error: Unused "type: ignore" comment 
[unused-ignore]
                        offspring_params[key] = float(val)  # type: ignore...
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/core/population_manager.py:328: error: Explicit "Any" is not allowed 
[explicit-any]
        def _mutate(self, genome: Any, mutation_rate: float = 0.1) -> Any:
        ^
src/core/population_manager.py:347: error: Unused "type: ignore" comment 
[unused-ignore]
                                    v = float(value)  # type: ignore[arg-t...
                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/thinking/prediction/market_data_generator.py:45: error: Explicit "Any" is
not allowed  [explicit-any]
        async def generate_scenarios(
        ^
src/thinking/prediction/market_data_generator.py:86: error: Explicit "Any" is
not allowed  [explicit-any]
        def _difficulty_params(self, difficulty_level: Any) -> Tuple[float...
        ^
src/sentient/sentient_predator.py:22: error: Explicit "Any" is not allowed 
[explicit-any]
        def __init__(self, config: Dict[str, Any]):
        ^
src/sentient/sentient_predator.py:40: error: Function is missing a return type
annotation  [no-untyped-def]
        async def start(self):
        ^
src/sentient/sentient_predator.py:40: note: Use "-> None" if function does not return a value
src/sentient/sentient_predator.py:45: error: Function is missing a return type
annotation  [no-untyped-def]
        async def stop(self):
        ^
src/sentient/sentient_predator.py:45: note: Use "-> None" if function does not return a value
src/sentient/sentient_predator.py:50: error: Explicit "Any" is not allowed 
[explicit-any]
        async def process_closed_trade(self, trade_data: Dict[str, Any]) -...
        ^
src/sentient/sentient_predator.py:103: error: Explicit "Any" is not allowed 
[explicit-any]
        def _create_vector_representation(self, signal: LearningSignal) ->...
        ^
src/sentient/sentient_predator.py:131: error: Explicit "Any" is not allowed 
[explicit-any]
        def _extract_current_context(self, trade_data: Dict[str, Any]) -> ...
        ^
src/sentient/sentient_predator.py:155: error: Explicit "Any" is not allowed 
[explicit-any]
        def get_metrics(self) -> Dict[str, Any]:
        ^
src/sentient/sentient_predator.py:165: error: Explicit "Any" is not allowed 
[explicit-any]
        def get_sentient_state(self) -> Dict[str, Any]:
        ^
src/sentient/sentient_predator.py:178: error: Function is missing a return type
annotation  [no-untyped-def]
        async def reset(self):
        ^
src/sentient/sentient_predator.py:178: note: Use "-> None" if function does not return a value
src/performance/__init__.py:24: error: Explicit "Any" is not allowed 
[explicit-any]
            self._cache: dict[str, Any] = {}
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/performance/__init__.py:28: error: Explicit "Any" is not allowed 
[explicit-any]
        def get_market_data(self, category: str, subcategory: str, **kwarg...
        ^
src/performance/__init__.py:37: error: Explicit "Any" is not allowed 
[explicit-any]
        def cache_market_data(self, category: str, subcategory: str, data:...
        ^
src/performance/__init__.py:48: error: Explicit "Any" is not allowed 
[explicit-any]
        def get_stats(self) -> dict[str, Any]:
        ^
src/performance/__init__.py:63: error: Explicit "Any" is not allowed 
[explicit-any]
    def __getattr__(name: str) -> Any:
    ^
src/intelligence/sentient_adaptation.py:42: error: Explicit "Any" is not
allowed  [explicit-any]
    class AdaptationSignal:
    ^~~~~~~~~~~~~~~~~~~~~~
src/intelligence/sentient_adaptation.py:49: error: Explicit "Any" is not
allowed  [explicit-any]
        metadata: Dict[str, Any] = field(default_factory=dict)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/intelligence/sentient_adaptation.py:56: error: Explicit "Any" is not
allowed  [explicit-any]
    class MarketEvent:
    ^~~~~~~~~~~~~~~~~
src/intelligence/sentient_adaptation.py:63: error: Explicit "Any" is not
allowed  [explicit-any]
        pattern_vector: np.ndarray
        ^~~~~~~~~~~~~~~~~~~~~~~~~~
src/intelligence/sentient_adaptation.py:64: error: Explicit "Any" is not
allowed  [explicit-any]
        context: Dict[str, Any]
        ^~~~~~~~~~~~~~~~~~~~~~~
src/intelligence/sentient_adaptation.py:66: error: Explicit "Any" is not
allowed  [explicit-any]
        def extract_pattern(self) -> np.ndarray:
        ^
src/intelligence/sentient_adaptation.py:76: error: Function is missing a return
type annotation  [no-untyped-def]
        def __init__(self):
        ^
src/intelligence/sentient_adaptation.py:76: note: Use "-> None" if function does not return a value
src/intelligence/sentient_adaptation.py:81: error: Explicit "Any" is not
allowed  [explicit-any]
        async def assess_learning_quality(self, learning_signal: Adaptatio...
        ^
src/intelligence/sentient_adaptation.py:119: error: Returning Any from function
declared to return "float"  [no-any-return]
            return max(0, min(1, 0.5 + trend * 10))
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/intelligence/sentient_adaptation.py:128: error: Returning Any from function
declared to return "float"  [no-any-return]
            return max(0, min(1, consistency))
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/intelligence/sentient_adaptation.py:141: error: Missing positional argument
"config" in call to "RealTimeLearningEngine"  [call-arg]
            self.real_time_learner = RealTimeLearningEngine()
                                     ^~~~~~~~~~~~~~~~~~~~~~~~
src/intelligence/sentient_adaptation.py:142: error: Missing positional argument
"config" in call to "FAISSPatternMemory"  [call-arg]
            self.pattern_memory = FAISSPatternMemory()
                                  ^~~~~~~~~~~~~~~~~~~~
src/intelligence/sentient_adaptation.py:144: error: Missing positional argument
"config" in call to "AdaptationController"  [call-arg]
            self.adaptation_controller = AdaptationController()
                                         ^~~~~~~~~~~~~~~~~~~~~~
src/intelligence/sentient_adaptation.py:148: error: Need type annotation for
"recent_performance" (hint: "recent_performance: list[<type>] = ...") 
[var-annotated]
            self.recent_performance = []
            ^~~~~~~~~~~~~~~~~~~~~~~
src/intelligence/sentient_adaptation.py:152: error: Explicit "Any" is not
allowed  [explicit-any]
        async def adapt_in_real_time(self, market_event: MarketEvent, 
        ^
src/intelligence/sentient_adaptation.py:158: error: "RealTimeLearningEngine"
has no attribute "process_outcome"  [attr-defined]
            learning_signal = await self.real_time_learner.process_outcome...
                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/intelligence/sentient_adaptation.py:163: error: "FAISSPatternMemory" has no
attribute "store_pattern"  [attr-defined]
            await self.pattern_memory.store_pattern(
                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/intelligence/sentient_adaptation.py:178: error: Unexpected keyword argument
"current_strategy_state" for "generate_adaptations" of "AdaptationController" 
[call-arg]
                adaptations = await self.adaptation_controller.generate_ad...
                                    ^
src/sentient/adaptation/adaptation_controller.py:56: note: "generate_adaptations" of "AdaptationController" defined here
src/intelligence/sentient_adaptation.py:23: error: Unused "type: ignore"
comment  [unused-ignore]
        AdaptationController as AdaptationController,  # type: ignore
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/intelligence/sentient_adaptation.py:182: error: Argument 1 to
"apply_adaptations" of "SentientAdaptationEngine" has incompatible type
"list[TacticalAdaptation]"; expected "dict[str, Any]"  [arg-type]
                await self.apply_adaptations(adaptations)
                                             ^~~~~~~~~~~
src/intelligence/sentient_adaptation.py:185: error: Incompatible types in
assignment (expression has type "datetime", variable has type "None") 
[assignment]
                self.last_adaptation = datetime.utcnow()
                                       ^~~~~~~~~~~~~~~~~
src/intelligence/sentient_adaptation.py:190: error: Returning Any from function
declared to return "AdaptationSignal"  [no-any-return]
            return learning_signal
            ^~~~~~~~~~~~~~~~~~~~~~
src/intelligence/sentient_adaptation.py:192: error: Function is missing a
return type annotation  [no-untyped-def]
        async def apply_adaptations(self, adaptations: Dict[str, Any]):
        ^
src/intelligence/sentient_adaptation.py:192: error: Explicit "Any" is not
allowed  [explicit-any]
        async def apply_adaptations(self, adaptations: Dict[str, Any]):
        ^
src/intelligence/sentient_adaptation.py:201: error: Explicit "Any" is not
allowed  [explicit-any]
        def get_strategy_state(self) -> Dict[str, Any]:
        ^
src/intelligence/sentient_adaptation.py:204: error: "AdaptationController" has
no attribute "risk_parameters"  [attr-defined]
                'risk_parameters': self.adaptation_controller.risk_paramet...
                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/intelligence/sentient_adaptation.py:209: error: Function is missing a
return type annotation  [no-untyped-def]
        def _update_episodic_memory(self, market_event: MarketEvent, 
        ^
src/intelligence/sentient_adaptation.py:216: error: Explicit "Any" is not
allowed  [explicit-any]
        def get_adaptation_stats(self) -> Dict[str, Any]:
        ^
src/intelligence/sentient_adaptation.py:227: error: Function is missing a
return type annotation  [no-untyped-def]
    async def test_sentient_adaptation():
    ^
src/intelligence/sentient_adaptation.py:227: note: Use "-> None" if function does not return a value
src/intelligence/red_team_ai.py:948: error: Function is missing a return type
annotation  [no-untyped-def]
    async def test_red_team_ai():
    ^
src/intelligence/red_team_ai.py:948: note: Use "-> None" if function does not return a value
src/intelligence/portfolio_evolution.py:152: error: Redundant cast to
"ndarray[tuple[Any, ...], dtype[signedinteger[_32Bit | _64Bit]]]" 
[redundant-cast]
            clusters_arr = cast("NDArray[np.int_]", clustering.fit_predict...
                           ^
src/core/__init__.py:12: error: Unused "type: ignore" comment  [unused-ignore]
        from .sensory_organ import (  # type: ignore
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/core/__init__.py:56: error: Unused "type: ignore" comment  [unused-ignore]
        from .sensory_organ import (  # type: ignore
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/pnl.py:24: error: Explicit "Any" is not allowed  [explicit-any]
    class TradeRecord:
    ^~~~~~~~~~~~~~~~~
src/pnl.py:39: error: Explicit "Any" is not allowed  [explicit-any]
        metadata: Dict[str, Any] = field(default_factory=dict)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/pnl.py:41: error: Function is missing a return type annotation 
[no-untyped-def]
        def __post_init__(self):
        ^
src/pnl.py:41: note: Use "-> None" if function does not return a value
src/pnl.py:200: error: "Instrument" has no attribute "swap_time" 
[attr-defined]
            swap_hour, swap_minute = map(int, instrument.swap_time.split("...
                                              ^~~~~~~~~~~~~~~~~~~~
src/pnl.py:213: error: "Instrument" has no attribute "long_swap_rate" 
[attr-defined]
                    swap_fee = instrument.long_swap_rate * abs(self.quanti...
                               ^~~~~~~~~~~~~~~~~~~~~~~~~
src/pnl.py:215: error: "Instrument" has no attribute "short_swap_rate" 
[attr-defined]
                    swap_fee = instrument.short_swap_rate * abs(self.quant...
                               ^~~~~~~~~~~~~~~~~~~~~~~~~~
src/pnl.py:280: error: Explicit "Any" is not allowed  [explicit-any]
        def get_summary(self) -> Dict[str, Any]:
        ^
src/thinking/adversarial/market_gan.py:33: error: Cannot find implementation or
library stub for module named "src.core.events"  [import-not-found]
        from src.core.events import StrategyTestResult  # legacy
    ^
src/thinking/adversarial/market_gan.py:35: error: Unused "type: ignore" comment
 [unused-ignore]
        StrategyTestResult = object  # type: ignore
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/thinking/adversarial/market_gan.py:45: error: Function is missing a return
type annotation  [no-untyped-def]
        def __init__(self):
        ^
src/thinking/adversarial/market_gan.py:45: note: Use "-> None" if function does not return a value
src/thinking/adversarial/market_gan.py:52: error: Explicit "Any" is not allowed
 [explicit-any]
        async def validate_realism(
        ^
src/thinking/adversarial/market_gan.py:92: error: Explicit "Any" is not allowed
 [explicit-any]
        async def _validate_scenario(
        ^
src/thinking/adversarial/market_gan.py:100: error: "object" object is not
iterable  [misc]
                min_vol, max_vol = self.validation_rules['volatility_range...
                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/thinking/adversarial/market_gan.py:101: error: Cannot determine type of
"min_vol"  [has-type]
                if not (min_vol <= scenario.volatility <= max_vol):
                        ^~~~~~~
src/thinking/adversarial/market_gan.py:101: error: Cannot determine type of
"max_vol"  [has-type]
                if not (min_vol <= scenario.volatility <= max_vol):
                                                          ^~~~~~~
src/thinking/adversarial/market_gan.py:184: error: Explicit "Any" is not
allowed  [explicit-any]
                    strategy_payload: List[Dict[str, Any]] = [{"id": s} fo...
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/thinking/adversarial/market_gan.py:250: error: Explicit "Any" is not
allowed  [explicit-any]
        async def _get_real_market_data(self) -> Dict[str, Any]:
        ^
src/thinking/adversarial/market_gan.py:263: error: Explicit "Any" is not
allowed  [explicit-any]
        async def _store_training_results(
        ^
src/thinking/adversarial/market_gan.py:296: error: Explicit "Any" is not
allowed  [explicit-any]
        async def get_training_stats(self) -> Dict[str, Any]:
        ^
src/thinking/adaptation/tactical_adaptation_engine.py:13: error: Cannot find
implementation or library stub for module named "src.core.events" 
[import-not-found]
        from src.core.events import ContextPacket, LearningSignal, Tactica...
    ^
src/thinking/adaptation/tactical_adaptation_engine.py:15: error: Unused
"type: ignore" comment  [unused-ignore]
        LearningSignal = TacticalAdaptation = ContextPacket = object  # ty...
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/thinking/adaptation/tactical_adaptation_engine.py:39: error: Explicit "Any"
is not allowed  [explicit-any]
        async def generate_adaptations(
        ^
src/thinking/adaptation/tactical_adaptation_engine.py:55: error: Need type
annotation for "adaptations" (hint: "adaptations: list[<type>] = ...") 
[var-annotated]
                adaptations = []
                ^~~~~~~~~~~
src/thinking/adaptation/tactical_adaptation_engine.py:58: error:
"FAISSPatternMemory" has no attribute "find_similar_experiences"  [attr-defined]
                similar_experiences = await self.pattern_memory.find_simil...
                                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/thinking/adaptation/tactical_adaptation_engine.py:105: error: Explicit
"Any" is not allowed  [explicit-any]
        async def _analyze_patterns(
        ^
src/thinking/adaptation/tactical_adaptation_engine.py:107: error: Missing type
parameters for generic type "List"  [type-arg]
            similar_experiences: List,
                                 ^
src/thinking/adaptation/tactical_adaptation_engine.py:122: error: Need type
annotation for "regime_distribution" (hint:
"regime_distribution: dict[<type>, <type>] = ...")  [var-annotated]
                regime_distribution = {}
                ^~~~~~~~~~~~~~~~~~~
src/thinking/adaptation/tactical_adaptation_engine.py:153: error: Explicit
"Any" is not allowed  [explicit-any]
        async def _generate_parameter_adaptations(
        ^
src/thinking/adaptation/tactical_adaptation_engine.py:219: error: Explicit
"Any" is not allowed  [explicit-any]
        async def _generate_risk_adaptations(
        ^
src/thinking/adaptation/tactical_adaptation_engine.py:348: error: Explicit
"Any" is not allowed  [explicit-any]
        async def get_adaptation_statistics(self) -> Dict[str, Any]:
        ^
src/intelligence/predictive_modeling.py:45: error: Function is missing a return
type annotation  [no-untyped-def]
        def _resolve(self):
        ^
src/intelligence/predictive_modeling.py:63: error: Function is missing a return
type annotation  [no-untyped-def]
        def __getattr__(self, item: str):
        ^
src/intelligence/predictive_modeling.py:66: error: Function is missing a type
annotation  [no-untyped-def]
        def __call__(self, *args, **kwargs):
        ^
src/intelligence/predictive_modeling.py:78: error: Explicit "Any" is not
allowed  [explicit-any]
    def __getattr__(name: str) -> Any:
    ^
src/intelligence/predictive_modeling.py:107: error: Explicit "Any" is not
allowed  [explicit-any]
    class ScenarioOutcome:
    ^~~~~~~~~~~~~~~~~~~~~
src/intelligence/predictive_modeling.py:114: error: Explicit "Any" is not
allowed  [explicit-any]
        scenario: Any
        ^~~~~~~~~~~~~
src/integration/component_integrator.py:23: error: Unused "type: ignore"
comment  [unused-ignore]
        from src.core import PopulationManager, SensoryOrgan, RiskManager ...
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/integration/component_integrator.py:25: error: Cannot assign to a type 
[misc]
        PopulationManager = SensoryOrgan = RiskManager = None  # type: ign...
        ^~~~~~~~~~~~~~~~~
src/integration/component_integrator.py:25: note: Error code "misc" not covered by "type: ignore" comment
src/integration/component_integrator.py:89: error: Unused "type: ignore"
comment  [unused-ignore]
                population_manager = PopulationManager(population_size=100...
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/integration/component_integrator.py:95: error: Unused "type: ignore"
comment  [unused-ignore]
                risk_manager = RiskManager()  # type: ignore[call-arg]
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/integration/component_integrator.py:189: error: Unused "type: ignore"
comment  [unused-ignore]
                    self.components[component_name] = PopulationManager(po...
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/integration/component_integrator.py:191: error: Unused "type: ignore"
comment  [unused-ignore]
                    self.components[component_name] = RiskManager()  # typ...
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/validation/real_market_validation.py:43: error: Explicit "Any" is not
allowed  [explicit-any]
        def __init__(
        ^
src/validation/real_market_validation.py:62: error: Explicit "Any" is not
allowed  [explicit-any]
        def to_dict(self) -> Dict[str, Any]:
        ^
src/validation/real_market_validation.py:139: error: Explicit "Any" is not
allowed  [explicit-any]
                        def _to_datetime(ts: Any) -> Optional[datetime]:
                        ^
src/validation/real_market_validation.py:141: error: Returning Any from
function declared to return "datetime | None"  [no-any-return]
                                return pd.to_datetime(ts).to_pydatetime()
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/validation/real_market_validation.py:472: error: Statement is unreachable 
[unreachable]
                data["running_max"] = data["cumulative"].expanding().max()
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/validation/real_market_validation.py:591: error: Explicit "Any" is not
allowed  [explicit-any]
        async def run_comprehensive_validation(self) -> Dict[str, Any]:
        ^
src/validation/real_market_validation.py:637: error: Function is missing a
return type annotation  [no-untyped-def]
        def print_comprehensive_report(self, report: Dict[str, Any]):
        ^
src/validation/real_market_validation.py:637: error: Explicit "Any" is not
allowed  [explicit-any]
        def print_comprehensive_report(self, report: Dict[str, Any]):
        ^
src/validation/real_market_validation.py:669: error: Function is missing a
return type annotation  [no-untyped-def]
    async def main():
    ^
src/validation/real_market_validation.py:669: note: Use "-> None" if function does not return a value
src/validation/phase2d_simple_integration.py:53: error: Missing type parameters
for generic type "dict"  [type-arg]
        async def test_real_data_integration(self) -> dict:
                                                      ^
src/validation/phase2d_simple_integration.py:125: error: Missing type
parameters for generic type "dict"  [type-arg]
        async def test_performance_metrics(self) -> dict:
                                                    ^
src/validation/phase2d_simple_integration.py:179: error: Missing type
parameters for generic type "dict"  [type-arg]
        async def test_risk_management_integration(self) -> dict:
                                                            ^
src/validation/phase2d_simple_integration.py:229: error: Missing type
parameters for generic type "dict"  [type-arg]
        async def test_concurrent_operations(self) -> dict:
                                                      ^
src/validation/phase2d_simple_integration.py:271: error: Missing type
parameters for generic type "dict"  [type-arg]
        async def _fetch_symbol_async(self, symbol: str) -> dict:
                                                            ^
src/validation/phase2d_simple_integration.py:281: error: Explicit "Any" is not
allowed  [explicit-any]
        async def _evaluate_genome_with_real_data(self, genome: Any, data:...
        ^
src/validation/phase2d_simple_integration.py:304: error: Missing type
parameters for generic type "dict"  [type-arg]
        async def run_phase2d_validation(self) -> dict:
                                                  ^
src/validation/phase2d_simple_integration.py:349: error: Explicit "Any" is not
allowed  [explicit-any]
        def _validate_real_success_criteria(self, results: List[dict]) -> ...
        ^
src/validation/phase2d_simple_integration.py:349: error: Missing type
parameters for generic type "dict"  [type-arg]
    ...lidate_real_success_criteria(self, results: List[dict]) -> Dict[str, A...
                                                        ^
src/validation/phase2d_simple_integration.py:351: error: Explicit "Any" is not
allowed  [explicit-any]
            criteria: Dict[str, Any] = {
            ^
src/validation/phase2d_integration_validator.py:47: error: Need type annotation
for "results" (hint: "results: list[<type>] = ...")  [var-annotated]
            self.results = []
            ^~~~~~~~~~~~
src/validation/phase2d_integration_validator.py:54: error: Explicit "Any" is
not allowed  [explicit-any]
        async def test_real_data_flow(self) -> Dict[str, Any]:
        ^
src/validation/phase2d_integration_validator.py:93: error: Cannot instantiate
protocol class "DecisionGenome"  [misc]
                    genome = DecisionGenome()  # placeholder instance for ...
                             ^~~~~~~~~~~~~~~~
src/validation/phase2d_integration_validator.py:158: error: Explicit "Any" is
not allowed  [explicit-any]
        async def test_strategy_performance_tracking(self) -> Dict[str, An...
        ^
src/validation/phase2d_integration_validator.py:210: error: Explicit "Any" is
not allowed  [explicit-any]
        async def test_concurrent_operations(self) -> Dict[str, Any]:
        ^
src/validation/phase2d_integration_validator.py:227: error: Explicit "Any" is
not allowed  [explicit-any]
        async def _evaluate_genome_with_real_data(self, genome: Any, data:...
        ^
src/validation/phase2d_integration_validator.py:254: error: Explicit "Any" is
not allowed  [explicit-any]
        async def run_all_tests(self) -> List[Dict[str, Any]]:
        ^
src/validation/honest_validation_framework.py:57: error: Explicit "Any" is not
allowed  [explicit-any]
        def to_dict(self) -> Dict[str, Any]:
        ^
src/validation/honest_validation_framework.py:216: error: Unused "type: ignore"
comment  [unused-ignore]
                test_genome = DecisionGenome()  # type: ignore[call-arg]
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/validation/honest_validation_framework.py:216: error: Cannot instantiate
protocol class "DecisionGenome"  [misc]
                test_genome = DecisionGenome()  # type: ignore[call-arg]
                              ^~~~~~~~~~~~~~~~
src/validation/honest_validation_framework.py:216: note: Error code "misc" not covered by "type: ignore" comment
src/validation/honest_validation_framework.py:234: error: Statement is
unreachable  [unreachable]
                success = False
                ^~~~~~~~~~~~~~~
src/validation/honest_validation_framework.py:236: error: Unused "type: ignore"
comment  [unused-ignore]
                    success = bool(self.strategy_manager.add_strategy(test...
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/validation/honest_validation_framework.py:277: error: Unused "type: ignore"
comment  [unused-ignore]
                    signals = self.strategy_manager.evaluate_strategies("E...
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/validation/honest_validation_framework.py:325: error: Unused "type: ignore"
comment  [unused-ignore]
                    async_df = await self.market_data.get_market_data("EUR...
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/validation/honest_validation_framework.py:394: error: Explicit "Any" is not
allowed  [explicit-any]
        async def run_all_validations(self) -> Dict[str, Any]:
        ^
src/validation/honest_validation_framework.py:436: error: Function is missing a
return type annotation  [no-untyped-def]
        def print_report(self, report: Dict[str, Any]):
        ^
src/validation/honest_validation_framework.py:436: error: Explicit "Any" is not
allowed  [explicit-any]
        def print_report(self, report: Dict[str, Any]):
        ^
src/validation/honest_validation_framework.py:461: error: Function is missing a
return type annotation  [no-untyped-def]
    async def main():
    ^
src/validation/honest_validation_framework.py:461: note: Use "-> None" if function does not return a value
src/trading/monitoring/performance_tracker.py:26: error: Explicit "Any" is not
allowed  [explicit-any]
    class PerformanceMetrics:
    ^~~~~~~~~~~~~~~~~~~~~~~~
src/trading/monitoring/performance_tracker.py:52: error: Explicit "Any" is not
allowed  [explicit-any]
        strategy_performance: Dict[str, Dict[str, Any]]
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/trading/monitoring/performance_tracker.py:53: error: Explicit "Any" is not
allowed  [explicit-any]
        regime_performance: Dict[str, Dict[str, Any]]
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/trading/monitoring/performance_tracker.py:69: error: Missing type
parameters for generic type "Dict"  [type-arg]
            self.positions_history: List[Dict] = []
                                         ^
src/trading/monitoring/performance_tracker.py:70: error: Missing type
parameters for generic type "Dict"  [type-arg]
            self.trades_history: List[Dict] = []
                                      ^
src/trading/monitoring/performance_tracker.py:71: error: Missing type
parameters for generic type "Dict"  [type-arg]
            self.daily_equity: List[Dict] = []
                                    ^
src/trading/monitoring/performance_tracker.py:72: error: Missing type
parameters for generic type "Dict"  [type-arg]
            self.strategy_performance: Dict[str, Dict] = {}
                                                 ^
src/trading/monitoring/performance_tracker.py:73: error: Missing type
parameters for generic type "Dict"  [type-arg]
            self.regime_performance: Dict[str, Dict] = {}
                                               ^
src/trading/monitoring/performance_tracker.py:81: error: Missing type
parameters for generic type "Dict"  [type-arg]
        def update_position(self, position_data: Dict) -> None:
                                                 ^
src/trading/monitoring/performance_tracker.py:92: error: Missing type
parameters for generic type "Dict"  [type-arg]
        def record_trade(self, trade_data: Dict) -> None:
                                           ^
src/trading/monitoring/performance_tracker.py:158: error: Right operand of
"and" is never evaluated  [unreachable]
            if (self.metrics is not None and 
                ^
src/trading/monitoring/performance_tracker.py:162: error: Statement is
unreachable  [unreachable]
                return self.metrics
                ^~~~~~~~~~~~~~~~~~~
src/trading/monitoring/performance_tracker.py:199: error: Incompatible types in
assignment (expression has type "PerformanceMetrics", variable has type "None") 
[assignment]
            self.metrics = PerformanceMetrics(
                           ^
src/trading/monitoring/performance_tracker.py:225: error: Incompatible types in
assignment (expression has type "datetime", variable has type "None") 
[assignment]
            self.last_calculation = datetime.now()
                                    ^~~~~~~~~~~~~~
src/trading/monitoring/performance_tracker.py:228: error: Incompatible return
value type (got "None", expected "PerformanceMetrics")  [return-value]
            return self.metrics
                   ^~~~~~~~~~~~
src/trading/monitoring/performance_tracker.py:268: error: Returning Any from
function declared to return "float"  [no-any-return]
            return (1 + total_return) ** (365 / total_days) - 1
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/trading/monitoring/performance_tracker.py:279: error: Returning Any from
function declared to return "float"  [no-any-return]
            return returns_array.mean() / returns_array.std() * np.sqrt(25...
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/trading/monitoring/performance_tracker.py:296: error: Returning Any from
function declared to return "float"  [no-any-return]
            return returns_array.mean() / downside_deviation * np.sqrt(252...
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/trading/monitoring/performance_tracker.py:298: error: Explicit "Any" is not
allowed  [explicit-any]
        def _calculate_max_drawdown(self, equity: pd.Series) -> float:
        ^
src/trading/monitoring/performance_tracker.py:305: error: Returning Any from
function declared to return "float"  [no-any-return]
            return abs(drawdown.min())
            ^~~~~~~~~~~~~~~~~~~~~~~~~~
src/trading/monitoring/performance_tracker.py:318: error: Explicit "Any" is not
allowed  [explicit-any]
        def _calculate_trading_metrics(self) -> Dict[str, Any]:
        ^
src/trading/monitoring/performance_tracker.py:349: error: "float" has no
attribute "total_seconds"  [attr-defined]
                avg_trade_duration = trades_df['duration'].mean().total_se...
                                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/trading/monitoring/performance_tracker.py:364: error: Explicit "Any" is not
allowed  [explicit-any]
        def _calculate_strategy_performance(self) -> Dict[str, Dict[str, A...
        ^
src/trading/monitoring/performance_tracker.py:382: error: Explicit "Any" is not
allowed  [explicit-any]
        def _calculate_regime_performance(self) -> Dict[str, Dict[str, Any...
        ^
src/trading/monitoring/performance_tracker.py:415: error: Explicit "Any" is not
allowed  [explicit-any]
        def generate_report(self, report_type: str = "comprehensive") -> D...
        ^
src/trading/monitoring/performance_tracker.py:536: error: Explicit "Any" is not
allowed  [explicit-any]
        def get_performance_alerts(self) -> List[Dict[str, Any]]:
        ^
src/thinking/prediction/predictive_modeler.py:34: error: Function is missing a
return type annotation  [no-untyped-def]
        async def test_predictive_modeler():
        ^
src/thinking/prediction/predictive_modeler.py:34: note: Use "-> None" if function does not return a value
src/thinking/prediction/predictive_modeler.py:42: error: Argument 1 to
"PredictiveMarketModeler" has incompatible type "str"; expected "StateStore" 
[arg-type]
                modeler = PredictiveMarketModeler(model_run_id)
                                                  ^~~~~~~~~~~~
src/thinking/prediction/predictive_modeler.py:54: error:
"PredictiveMarketModeler" has no attribute "forecast"  [attr-defined]
                forecast = await modeler.forecast(sample_data)
                                 ^~~~~~~~~~~~~~~~
src/thinking/patterns/regime_classifier.py:18: error: Cannot find
implementation or library stub for module named "src.core.events" 
[import-not-found]
    from ...core.events import AnalysisResult, MarketData
    ^
src/thinking/patterns/regime_classifier.py:32: error: Explicit "Any" is not
allowed  [explicit-any]
            self.regime_history: List[Dict[str, Any]] = []
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/thinking/patterns/regime_classifier.py:146: error: Returning Any from
function declared to return "float"  [no-any-return]
            return np.clip(normalized_slope * 100, -1, 1)
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/thinking/patterns/regime_classifier.py:155: error: Returning Any from
function declared to return "float"  [no-any-return]
            return np.clip(roc, -1, 1)
            ^~~~~~~~~~~~~~~~~~~~~~~~~~
src/thinking/patterns/regime_classifier.py:165: error: Returning Any from
function declared to return "float"  [no-any-return]
            return np.clip(volatility, 0, 1)
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/thinking/patterns/regime_classifier.py:180: error: Returning Any from
function declared to return "float"  [no-any-return]
            return np.clip(volume_ratio, -1, 1)
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/thinking/patterns/regime_classifier.py:195: error: Returning Any from
function declared to return "float"  [no-any-return]
            return np.clip(volume_cv, 0, 1)
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/thinking/patterns/regime_classifier.py:248: error: Returning Any from
function declared to return "float"  [no-any-return]
            return np.clip(position, 0, 1)
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/thinking/patterns/regime_classifier.py:338: error: Explicit "Any" is not
allowed  [explicit-any]
        def get_regime_history(self, limit: Optional[int] = None) -> List[...
        ^
src/thinking/patterns/regime_classifier.py:344: error: Explicit "Any" is not
allowed  [explicit-any]
        def get_regime_statistics(self) -> Dict[str, Any]:
        ^
src/thinking/patterns/regime_classifier.py:352: error: Need type annotation for
"regime_counts" (hint: "regime_counts: dict[<type>, <type>] = ...") 
[var-annotated]
            regime_counts = {}
            ^~~~~~~~~~~~~
src/thinking/analysis/risk_analyzer.py:15: error: Cannot find implementation or
library stub for module named "src.core.events"  [import-not-found]
    from ...core.events import AnalysisResult, RiskMetrics, TradeIntent
    ^
src/thinking/analysis/risk_analyzer.py:26: error: Explicit "Any" is not allowed
 [explicit-any]
            self.risk_history: List[Dict[str, Any]] = []
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/thinking/analysis/risk_analyzer.py:30: error: Explicit "Any" is not allowed
 [explicit-any]
        def analyze_risk(self, trade_history: List[TradeIntent], 
        ^
src/thinking/analysis/risk_analyzer.py:85: error: Explicit "Any" is not allowed
 [explicit-any]
        def _convert_trades_to_risk_data(self, trade_history: List[TradeIn...
        ^
src/thinking/analysis/risk_analyzer.py:116: error: Explicit "Any" is not
allowed  [explicit-any]
        def _calculate_risk_metrics(self, risk_data: Dict[str, Any], 
        ^
src/thinking/analysis/risk_analyzer.py:158: error: Explicit "Any" is not
allowed  [explicit-any]
        def _calculate_var(self, returns: pd.Series, confidence_level: flo...
        ^
src/thinking/analysis/risk_analyzer.py:167: error: Returning Any from function
declared to return "float"  [no-any-return]
            return abs(var)
            ^~~~~~~~~~~~~~~
src/thinking/analysis/risk_analyzer.py:169: error: Explicit "Any" is not
allowed  [explicit-any]
        def _calculate_cvar(self, returns: pd.Series, confidence_level: fl...
        ^
src/thinking/analysis/risk_analyzer.py:186: error: Returning Any from function
declared to return "float"  [no-any-return]
            return abs(cvar)
            ^~~~~~~~~~~~~~~~
src/thinking/analysis/risk_analyzer.py:188: error: Explicit "Any" is not
allowed  [explicit-any]
        def _calculate_beta(self, returns: pd.Series, market_data: Optiona...
        ^
src/thinking/analysis/risk_analyzer.py:207: error: Returning Any from function
declared to return "float"  [no-any-return]
                return beta
                ^~~~~~~~~~~
src/thinking/analysis/risk_analyzer.py:213: error: Explicit "Any" is not
allowed  [explicit-any]
        def _calculate_correlation(self, returns: pd.Series, market_data: ...
        ^
src/thinking/analysis/risk_analyzer.py:229: error: Explicit "Any" is not
allowed  [explicit-any]
        def _calculate_current_drawdown(self, returns: pd.Series) -> float...
        ^
src/thinking/analysis/risk_analyzer.py:235: error: Need type annotation for
"cumulative_returns"  [var-annotated]
            cumulative_returns = (1 + returns).cumprod()
                                 ^~~~~~~~~~~~~~~~~~~~~~~
src/thinking/analysis/risk_analyzer.py:238: error: Statement is unreachable 
[unreachable]
            running_max = cumulative_returns.expanding().max()
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/thinking/analysis/risk_analyzer.py:278: error: Explicit "Any" is not
allowed  [explicit-any]
        def _calculate_risk_confidence(self, risk_data: Dict[str, Any]) ->...
        ^
src/thinking/analysis/risk_analyzer.py:326: error: Incompatible return value
type (got "floating[Any]", expected "float")  [return-value]
            return np.mean(confidence_factors)
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~
src/thinking/analysis/risk_analyzer.py:328: error: Explicit "Any" is not
allowed  [explicit-any]
        def _calculate_analysis_period(self, trade_history: List[TradeInte...
        ^
src/thinking/analysis/risk_analyzer.py:363: error: Explicit "Any" is not
allowed  [explicit-any]
        def get_risk_history(self, limit: Optional[int] = None) -> List[Di...
        ^
src/thinking/analysis/risk_analyzer.py:369: error: Explicit "Any" is not
allowed  [explicit-any]
        def get_risk_statistics(self) -> Dict[str, Any]:
        ^
src/thinking/analysis/performance_analyzer.py:15: error: Cannot find
implementation or library stub for module named "src.core.events" 
[import-not-found]
    from ...core.events import AnalysisResult, PerformanceMetrics, TradeIn...
    ^
src/thinking/analysis/performance_analyzer.py:26: error: Explicit "Any" is not
allowed  [explicit-any]
            self.analysis_history: List[Dict[str, Any]] = []
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/thinking/analysis/performance_analyzer.py:84: error: Explicit "Any" is not
allowed  [explicit-any]
        def analyze_backtest_results(self, backtest_results: Dict[str, Any...
        ^
src/thinking/analysis/performance_analyzer.py:131: error: Explicit "Any" is not
allowed  [explicit-any]
        def _calculate_metrics_from_returns(self, returns: List[float], 
        ^
src/thinking/analysis/performance_analyzer.py:163: error: Argument 1 to
"_calculate_max_drawdown" of "PerformanceAnalyzer" has incompatible type
"list[float]"; expected "Series[Any]"  [arg-type]
            max_drawdown = self._calculate_max_drawdown(equity_curve)
                                                        ^~~~~~~~~~~~
src/thinking/analysis/performance_analyzer.py:206: error: Explicit "Any" is not
allowed  [explicit-any]
        def _convert_trades_to_performance(self, trade_history: List[Trade...
        ^
src/thinking/analysis/performance_analyzer.py:249: error: Explicit "Any" is not
allowed  [explicit-any]
        def _calculate_performance_metrics(self, performance_data: Dict[st...
        ^
src/thinking/analysis/performance_analyzer.py:330: error: Explicit "Any" is not
allowed  [explicit-any]
        def _calculate_max_drawdown(self, equity_curve: pd.Series) -> floa...
        ^
src/thinking/analysis/performance_analyzer.py:342: error: Returning Any from
function declared to return "float"  [no-any-return]
            return abs(drawdown.min())
            ^~~~~~~~~~~~~~~~~~~~~~~~~~
src/thinking/analysis/performance_analyzer.py:364: error: Explicit "Any" is not
allowed  [explicit-any]
        def _calculate_avg_trade_duration(self, performance_data: Dict[str...
        ^
src/thinking/analysis/performance_analyzer.py:375: error: Returning Any from
function declared to return "float"  [no-any-return]
                return total_days / trade_count
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/thinking/analysis/performance_analyzer.py:379: error: Explicit "Any" is not
allowed  [explicit-any]
        def _calculate_analysis_confidence(self, performance_data: Dict[st...
        ^
src/thinking/analysis/performance_analyzer.py:419: error: Incompatible return
value type (got "floating[Any]", expected "float")  [return-value]
            return np.mean(confidence_factors)
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~
src/thinking/analysis/performance_analyzer.py:421: error: Explicit "Any" is not
allowed  [explicit-any]
        def _calculate_backtest_confidence(self, backtest_results: Dict[st...
        ^
src/thinking/analysis/performance_analyzer.py:447: error: Incompatible return
value type (got "floating[Any] | float", expected "float")  [return-value]
            return np.mean(confidence_factors) if confidence_factors else ...
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/thinking/analysis/performance_analyzer.py:449: error: Explicit "Any" is not
allowed  [explicit-any]
        def _calculate_analysis_period(self, trade_history: List[TradeInte...
        ^
src/thinking/analysis/performance_analyzer.py:484: error: Explicit "Any" is not
allowed  [explicit-any]
        def get_performance_history(self, limit: Optional[int] = None) -> ...
        ^
src/thinking/analysis/performance_analyzer.py:490: error: Explicit "Any" is not
allowed  [explicit-any]
        def get_performance_statistics(self) -> Dict[str, Any]:
        ^
src/system/requirements_check.py:40: error: Unused "type: ignore" comment 
[unused-ignore]
            import numpy  # type: ignore
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~
src/system/requirements_check.py:41: error: Unused "type: ignore" comment 
[unused-ignore]
            import pandas  # type: ignore
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/sensory/what/features/swing_analysis.py:17: error: Explicit "Any" is not
allowed  [explicit-any]
    def find_peaks(values: np.ndarray, distance: int = 1, prominence: floa...
    ^
src/sensory/what/features/swing_analysis.py:17: error: Missing type parameters
for generic type "Dict"  [type-arg]
    ... int = 1, prominence: float | None = None) -> Tuple[np.ndarray, Dict]:
                                                                       ^
src/sensory/what/features/swing_analysis.py:21: error: Returning Any from
function declared to return
"tuple[ndarray[tuple[Any, ...], dtype[Any]], dict[Any, Any]]"  [no-any-return]
        return _scipy_find_peaks(values, distance=distance, prominence=pro...
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/sensory/what/features/swing_analysis.py:24: error: Missing type parameters
for generic type "Dict"  [type-arg]
    def identify_significant_swings(data: pd.DataFrame) -> List[Dict]:
                                                                ^
src/sensory/what/features/swing_analysis.py:26: error: Missing type parameters
for generic type "Dict"  [type-arg]
        swings: List[Dict] = []
                     ^
src/sensory/what/features/swing_analysis.py:29: error: Argument 1 to
"find_peaks" has incompatible type
"ExtensionArray | ndarray[tuple[Any, ...], dtype[Any]]"; expected
"ndarray[tuple[Any, ...], dtype[Any]]"  [arg-type]
        highs = find_peaks(data["high"].values, distance=10, prominence=0....
                           ^~~~~~~~~~~~~~~~~~~
src/sensory/what/features/swing_analysis.py:30: error: Unsupported operand type
for unary - ("ExtensionArray | ndarray[tuple[Any, ...], dtype[Any]]") 
[operator]
        lows = find_peaks(-data["low"].values, distance=10, prominence=0.0...
                          ^~~~~~~~~~~~~~~~~~~
src/sensory/what/features/swing_analysis.py:33: error: Missing type parameters
for generic type "Dict"  [type-arg]
        points: List[Dict] = []
                     ^
src/sensory/what/features/swing_analysis.py:69: error: Missing type parameters
for generic type "Dict"  [type-arg]
    def calculate_fibonacci_levels(swing: Dict) -> List[float]:
                                          ^
src/sensory/what/features/swing_analysis.py:85: error: Missing type parameters
for generic type "Dict"  [type-arg]
    def identify_significant_moves(data: pd.DataFrame) -> List[Dict]:
                                                               ^
src/sensory/what/features/swing_analysis.py:93: error: Missing type parameters
for generic type "Dict"  [type-arg]
    def calculate_extension_levels(move: Dict) -> List[float]:
                                         ^
src/sensory/vendor/np_pd_shims.py:12: error: Unused "type: ignore" comment 
[unused-ignore]
        import numpy as _np  # type: ignore
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/sensory/vendor/np_pd_shims.py:13: error: Explicit "Any" is not allowed 
[explicit-any]
        np = cast(Any, _np)
             ^
src/sensory/vendor/np_pd_shims.py:16: error: Explicit "Any" is not allowed 
[explicit-any]
        np = cast(Any, object())
             ^
src/sensory/vendor/np_pd_shims.py:19: error: Unused "type: ignore" comment 
[unused-ignore]
        import pandas as _pd  # type: ignore
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/sensory/vendor/np_pd_shims.py:20: error: Explicit "Any" is not allowed 
[explicit-any]
        pd = cast(Any, _pd)
             ^
src/sensory/vendor/np_pd_shims.py:22: error: Explicit "Any" is not allowed 
[explicit-any]
        pd = cast(Any, object())
             ^
src/sensory/organs/yahoo_finance_organ.py:78: error: "object" has no attribute
"empty"  [attr-defined]
                if df.empty:
                   ^~~~~~~~
src/sensory/organs/yahoo_finance_organ.py:83: error: "object" has no attribute
"reset_index"  [attr-defined]
                df = df.reset_index()
                     ^~~~~~~~~~~~~~
src/sensory/organs/yahoo_finance_organ.py:113: error: Explicit "Any" is not
allowed  [explicit-any]
        def get_available_data(self) -> Dict[str, Dict[str, Any]]:
        ^
src/sensory/organs/yahoo_finance_organ.py:192: error: "object" has no attribute
"empty"  [attr-defined]
                if data.empty:
                   ^~~~~~~~~~
src/sensory/organs/yahoo_finance_organ.py:197: error: "object" has no attribute
"reset_index"  [attr-defined]
                data = data.reset_index()
                       ^~~~~~~~~~~~~~~~
src/sensory/organs/yahoo_finance_organ.py:215: error: Returning Any from
function declared to return "DataFrame | None"  [no-any-return]
                return data
                ^~~~~~~~~~~
src/sensory/organs/dimensions/why_organ.py:35: error: Explicit "Any" is not
allowed  [explicit-any]
        def __init__(self, config: Optional[Dict[str, Any]] = None):
        ^
src/sensory/organs/dimensions/why_organ.py:41: error: Incompatible types in
assignment (expression has type "None", variable has type "WhyConfig") 
[assignment]
                self.why_cfg = None
                               ^~~~
src/sensory/organs/dimensions/why_organ.py:54: error: Incompatible types in
assignment (expression has type "None", variable has type
"EconomicDataProvider")  [assignment]
                self.economic_provider = None
                                         ^~~~
src/sensory/organs/dimensions/why_organ.py:55: error: Incompatible types in
assignment (expression has type "None", variable has type "FundamentalAnalyzer")
 [assignment]
                self.fundamental_analyzer = None
                                            ^~~~
src/sensory/organs/dimensions/why_organ.py:57: error: Explicit "Any" is not
allowed  [explicit-any]
        def analyze_market_data(self, market_data: List[MarketData], 
        ^
src/sensory/organs/dimensions/why_organ.py:96: error: Explicit "Any" is not
allowed  [explicit-any]
        def analyze_fundamental_intelligence(self, market_data: List[Marke...
        ^
src/sensory/organs/dimensions/why_organ.py:176: error: Explicit "Any" is not
allowed  [explicit-any]
        def _analyze_economic_factors(self, df: pd.DataFrame) -> Dict[str,...
        ^
src/sensory/organs/dimensions/why_organ.py:179: error: Statement is unreachable
 [unreachable]
                return {}
                ^~~~~~~~~
src/sensory/organs/dimensions/why_organ.py:192: error: Explicit "Any" is not
allowed  [explicit-any]
        def _analyze_fundamentals(self, df: pd.DataFrame) -> Dict[str, Any...
        ^
src/sensory/organs/dimensions/why_organ.py:195: error: Statement is unreachable
 [unreachable]
                return {}
                ^~~~~~~~~
src/sensory/organs/dimensions/why_organ.py:209: error: Explicit "Any" is not
allowed  [explicit-any]
        def _analyze_market_drivers(self, df: pd.DataFrame) -> Dict[str, A...
        ^
src/sensory/organs/dimensions/why_organ.py:232: error: Explicit "Any" is not
allowed  [explicit-any]
        def _analyze_sentiment(self, df: pd.DataFrame) -> Dict[str, Any]:
        ^
src/sensory/organs/dimensions/why_organ.py:264: error: Explicit "Any" is not
allowed  [explicit-any]
        def _get_economic_calendar(self) -> List[Dict[str, Any]]:
        ^
src/sensory/organs/dimensions/why_organ.py:267: error: Statement is unreachable
 [unreachable]
                return []
                ^~~~~~~~~
src/sensory/organs/dimensions/why_organ.py:275: error: Explicit "Any" is not
allowed  [explicit-any]
        def _get_central_bank_policies(self) -> Dict[str, Any]:
        ^
src/sensory/organs/dimensions/why_organ.py:278: error: Statement is unreachable
 [unreachable]
                return {}
                ^~~~~~~~~
src/sensory/organs/dimensions/why_organ.py:286: error: Explicit "Any" is not
allowed  [explicit-any]
        def _analyze_economic_momentum(self, df: pd.DataFrame) -> Dict[str...
        ^
src/sensory/organs/dimensions/why_organ.py:289: error: Statement is unreachable
 [unreachable]
                return {}
                ^~~~~~~~~
src/sensory/organs/dimensions/why_organ.py:297: error: Explicit "Any" is not
allowed  [explicit-any]
        def _analyze_risk_sentiment(self, df: pd.DataFrame) -> Dict[str, A...
        ^
src/sensory/organs/dimensions/why_organ.py:300: error: Statement is unreachable
 [unreachable]
                return {}
                ^~~~~~~~~
src/sensory/organs/dimensions/why_organ.py:308: error: Explicit "Any" is not
allowed  [explicit-any]
        def _analyze_yield_differentials(self, df: pd.DataFrame) -> Dict[s...
        ^
src/sensory/organs/dimensions/why_organ.py:311: error: Statement is unreachable
 [unreachable]
                return {}
                ^~~~~~~~~
src/sensory/organs/dimensions/why_organ.py:330: error: Argument 2 to "polyfit"
has incompatible type "ExtensionArray | ndarray[tuple[Any, ...], dtype[Any]]";
expected
"_SupportsArray[dtype[numpy.bool[builtins.bool] | integer[Any] | floating[Any]]] | _NestedSequence[_SupportsArray[dtype[numpy.bool[builtins.bool] | integer[Any] | floating[Any]]]] | float | _NestedSequence[float]"
 [arg-type]
                slope, intercept = np.polyfit(x, y, 1)
                                                 ^
src/sensory/organs/dimensions/why_organ.py:354: error: Explicit "Any" is not
allowed  [explicit-any]
        def _calculate_signal_strength(self, analysis: Dict[str, Any]) -> ...
        ^
src/sensory/organs/dimensions/why_organ.py:383: error: Explicit "Any" is not
allowed  [explicit-any]
        def _calculate_confidence(self, analysis: Dict[str, Any]) -> float...
        ^
src/sensory/organs/dimensions/why_organ.py:394: error: Returning Any from
function declared to return "float"  [no-any-return]
                return min(max(base_confidence, 0.0), 1.0)
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/dimensions/why_organ.py:413: error: "MarketData" has no
attribute "spread"  [attr-defined]
                    'spread': md.spread,
                              ^~~~~~~~~
src/sensory/organs/dimensions/why_organ.py:414: error: "MarketData" has no
attribute "mid_price"  [attr-defined]
                    'mid_price': md.mid_price
                                 ^~~~~~~~~~~~
src/sensory/organs/dimensions/when_organ.py:32: error: Explicit "Any" is not
allowed  [explicit-any]
        def __init__(self, config: Optional[Dict[str, Any]] = None):
        ^
src/sensory/organs/dimensions/when_organ.py:46: error: Incompatible types in
assignment (expression has type "None", variable has type
"MarketRegimeDetector")  [assignment]
                self.regime_detector = None
                                       ^~~~
src/sensory/organs/dimensions/when_organ.py:47: error: Incompatible types in
assignment (expression has type "None", variable has type "TemporalAnalyzer") 
[assignment]
                self.temporal_analyzer = None
                                         ^~~~
src/sensory/organs/dimensions/when_organ.py:49: error: Explicit "Any" is not
allowed  [explicit-any]
        def analyze_market_data(self, market_data: List[MarketData], 
        ^
src/sensory/organs/dimensions/when_organ.py:88: error: Explicit "Any" is not
allowed  [explicit-any]
        def analyze_temporal_intelligence(self, market_data: List[MarketDa...
        ^
src/sensory/organs/dimensions/when_organ.py:151: error: Explicit "Any" is not
allowed  [explicit-any]
        def _analyze_regime_detection(self, df: pd.DataFrame) -> Dict[str,...
        ^
src/sensory/organs/dimensions/when_organ.py:154: error: Statement is
unreachable  [unreachable]
                return {}
                ^~~~~~~~~
src/sensory/organs/dimensions/when_organ.py:162: error: Explicit "Any" is not
allowed  [explicit-any]
        def _analyze_temporal_analysis(self, df: pd.DataFrame) -> Dict[str...
        ^
src/sensory/organs/dimensions/when_organ.py:165: error: Statement is
unreachable  [unreachable]
                return {}
                ^~~~~~~~~
src/sensory/organs/dimensions/when_organ.py:173: error: Explicit "Any" is not
allowed  [explicit-any]
        def _analyze_market_timing(self, df: pd.DataFrame) -> Dict[str, An...
        ^
src/sensory/organs/dimensions/when_organ.py:205: error: Explicit "Any" is not
allowed  [explicit-any]
        def _analyze_session_behavior(self, df: pd.DataFrame) -> Dict[str,...
        ^
src/sensory/organs/dimensions/when_organ.py:208: error: Statement is
unreachable  [unreachable]
                return {}
                ^~~~~~~~~
src/sensory/organs/dimensions/when_organ.py:219: error: Statement is
unreachable  [unreachable]
                return "unknown"
                ^~~~~~~~~~~~~~~~
src/sensory/organs/dimensions/when_organ.py:230: error: Statement is
unreachable  [unreachable]
                return 0.0
                ^~~~~~~~~~
src/sensory/organs/dimensions/when_organ.py:241: error: Statement is
unreachable  [unreachable]
                return 0.0
                ^~~~~~~~~~
src/sensory/organs/dimensions/when_organ.py:249: error: Explicit "Any" is not
allowed  [explicit-any]
        def _get_chrono_behavior(self, df: pd.DataFrame) -> Dict[str, Any]...
        ^
src/sensory/organs/dimensions/when_organ.py:252: error: Statement is
unreachable  [unreachable]
                return {}
                ^~~~~~~~~
src/sensory/organs/dimensions/when_organ.py:285: error: Argument 2 to "polyfit"
has incompatible type "ExtensionArray | ndarray[tuple[Any, ...], dtype[Any]]";
expected
"_SupportsArray[dtype[numpy.bool[builtins.bool] | integer[Any] | floating[Any]]] | _NestedSequence[_SupportsArray[dtype[numpy.bool[builtins.bool] | integer[Any] | floating[Any]]]] | float | _NestedSequence[float]"
 [arg-type]
                slope, intercept = np.polyfit(x, y, 1)
                                                 ^
src/sensory/organs/dimensions/when_organ.py:290: error: No overload variant of
"__call__" of "_FloatOp" matches argument type "ExtensionArray"  [call-overload]
                ss_tot = np.sum((y - np.mean(y)) ** 2)
                                 ^~~~~~~~~~~~~~
src/sensory/organs/dimensions/when_organ.py:290: note: Possible overload variants:
src/sensory/organs/dimensions/when_organ.py:290: note:     def __call__(self, int, /) -> floating[Any]
src/sensory/organs/dimensions/when_organ.py:290: note:     def __call__(self, float, /) -> floating[Any] | float64
src/sensory/organs/dimensions/when_organ.py:290: note:     def __call__(self, complex, /) -> complexfloating[Any, Any] | complex128
src/sensory/organs/dimensions/when_organ.py:290: note:     def [_NBit2: NBitBase] __call__(self, integer[_NBit2] | floating[_NBit2], /) -> floating[Any] | floating[_NBit2]
src/sensory/organs/dimensions/when_organ.py:290: error: Unsupported operand
types for - ("ndarray[tuple[Any, ...], dtype[Any]]" and "floating[Any]") 
[operator]
                ss_tot = np.sum((y - np.mean(y)) ** 2)
                                     ^~~~~~~~~~
src/sensory/organs/dimensions/when_organ.py:290: note: Left operand is of type "ExtensionArray | ndarray[tuple[Any, ...], dtype[Any]]"
src/sensory/organs/dimensions/when_organ.py:290: error: Argument 1 to "mean"
has incompatible type "ExtensionArray | ndarray[tuple[Any, ...], dtype[Any]]";
expected
"_SupportsArray[dtype[numpy.bool[builtins.bool] | integer[Any] | floating[Any]]] | _NestedSequence[_SupportsArray[dtype[numpy.bool[builtins.bool] | integer[Any] | floating[Any]]]] | float | _NestedSequence[float]"
 [arg-type]
                ss_tot = np.sum((y - np.mean(y)) ** 2)
                                             ^
src/sensory/organs/dimensions/when_organ.py:294: error: Returning Any from
function declared to return "float"  [no-any-return]
                return min(max(trend_strength, 0.0), 1.0)
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/dimensions/when_organ.py:300: error: Explicit "Any" is not
allowed  [explicit-any]
        def _calculate_signal_strength(self, analysis: Dict[str, Any]) -> ...
        ^
src/sensory/organs/dimensions/when_organ.py:314: error: Returning Any from
function declared to return "float"  [no-any-return]
                return min(max(signal_strength, -1.0), 1.0)
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/dimensions/when_organ.py:320: error: Explicit "Any" is not
allowed  [explicit-any]
        def _calculate_confidence(self, analysis: Dict[str, Any]) -> float...
        ^
src/sensory/organs/dimensions/when_organ.py:331: error: Returning Any from
function declared to return "float"  [no-any-return]
                return min(max(base_confidence, 0.0), 1.0)
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/dimensions/when_organ.py:350: error: "MarketData" has no
attribute "spread"  [attr-defined]
                    'spread': md.spread,
                              ^~~~~~~~~
src/sensory/organs/dimensions/when_organ.py:351: error: "MarketData" has no
attribute "mid_price"  [attr-defined]
                    'mid_price': md.mid_price
                                 ^~~~~~~~~~~~
src/sensory/organs/dimensions/temporal_system.py:24: error: Explicit "Any" is
not allowed  [explicit-any]
    class TemporalAdvantage:
    ^~~~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/dimensions/temporal_system.py:28: error: Explicit "Any" is
not allowed  [explicit-any]
        microstructure_timing: Dict[str, Any]
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/dimensions/temporal_system.py:41: error: Function is missing
a return type annotation  [no-untyped-def]
        def __init__(self):
        ^
src/sensory/organs/dimensions/temporal_system.py:41: note: Use "-> None" if function does not return a value
src/sensory/organs/dimensions/temporal_system.py:48: error: Explicit "Any" is
not allowed  [explicit-any]
        async def analyze_timing(self, market_data: Dict[str, Any]) -> Tem...
        ^
src/sensory/organs/dimensions/temporal_system.py:60: error: Explicit "Any" is
not allowed  [explicit-any]
        async def analyze_temporal_advantage(self, market_data: Dict[str, ...
        ^
src/sensory/organs/dimensions/temporal_system.py:87: error: Incompatible types
in "await" (actual type "tuple[datetime, datetime]", expected type
"Awaitable[Any]")  [misc]
                entry_window = await self._calculate_optimal_entry_window(
                               ^
src/sensory/organs/dimensions/temporal_system.py:109: error: Missing type
parameters for generic type "Dict"  [type-arg]
    ...nce(self, session_score: float, calendar_impact: Dict, microstructure_...
                                                        ^
src/sensory/organs/dimensions/temporal_system.py:112: error: Returning Any from
function declared to return "float"  [no-any-return]
            return min(max(np.mean(factors), 0.0), 1.0)
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/dimensions/temporal_system.py:112: error: No overload
variant of "max" matches argument types "floating[Any]", "float" 
[call-overload]
            return min(max(np.mean(factors), 0.0), 1.0)
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/dimensions/temporal_system.py:112: note: Possible overload variants:
src/sensory/organs/dimensions/temporal_system.py:112: note:     def [SupportsRichComparisonT: SupportsDunderLT[Any] | SupportsDunderGT[Any]] max(SupportsRichComparisonT, SupportsRichComparisonT, /, *_args: SupportsRichComparisonT, key: None = ...) -> SupportsRichComparisonT
src/sensory/organs/dimensions/temporal_system.py:112: note:     def [_T] max(_T, _T, /, *_args: _T, key: Callable[[_T], SupportsDunderLT[Any] | SupportsDunderGT[Any]]) -> _T
src/sensory/organs/dimensions/temporal_system.py:112: note:     def [SupportsRichComparisonT: SupportsDunderLT[Any] | SupportsDunderGT[Any]] max(Iterable[SupportsRichComparisonT], /, *, key: None = ...) -> SupportsRichComparisonT
src/sensory/organs/dimensions/temporal_system.py:112: note:     def [_T] max(Iterable[_T], /, *, key: Callable[[_T], SupportsDunderLT[Any] | SupportsDunderGT[Any]]) -> _T
src/sensory/organs/dimensions/temporal_system.py:112: note:     def [SupportsRichComparisonT: SupportsDunderLT[Any] | SupportsDunderGT[Any], _T] max(Iterable[SupportsRichComparisonT], /, *, key: None = ..., default: _T) -> SupportsRichComparisonT | _T
src/sensory/organs/dimensions/temporal_system.py:112: note:     def [_T1, _T2] max(Iterable[_T1], /, *, key: Callable[[_T1], SupportsDunderLT[Any] | SupportsDunderGT[Any]], default: _T2) -> _T1 | _T2
src/sensory/organs/dimensions/temporal_system.py:114: error: Missing type
parameters for generic type "Dict"  [type-arg]
    ...dow(self, session_score: float, calendar_impact: Dict, microstructure_...
                                                        ^
src/sensory/organs/dimensions/temporal_system.py:162: error: Explicit "Any" is
not allowed  [explicit-any]
        async def analyze_timing(self, data: pd.DataFrame) -> Dict[str, An...
        ^
src/sensory/organs/dimensions/integration_orchestrator.py:27: error: Cannot
find implementation or library stub for module named
"src.sensory.enhanced.chaos.antifragile_adaptation"  [import-not-found]
    from src.sensory.enhanced.chaos.antifragile_adaptation import ChaosAda...
    ^
src/sensory/organs/dimensions/integration_orchestrator.py:28: error: Cannot
find implementation or library stub for module named
"src.sensory.enhanced.how.institutional_footprint_hunter"  [import-not-found]
    from src.sensory.enhanced.how.institutional_footprint_hunter import (
    ^
src/sensory/organs/dimensions/integration_orchestrator.py:32: error: Cannot
find implementation or library stub for module named
"src.sensory.enhanced.what.pattern_synthesis_engine"  [import-not-found]
    from src.sensory.enhanced.what.pattern_synthesis_engine import (
    ^
src/sensory/organs/dimensions/integration_orchestrator.py:36: error: Cannot
find implementation or library stub for module named
"src.sensory.enhanced.when.temporal_advantage_system"  [import-not-found]
    from src.sensory.enhanced.when.temporal_advantage_system import (
    ^
src/sensory/organs/dimensions/integration_orchestrator.py:42: error: Cannot
find implementation or library stub for module named
"src.sensory.enhanced.why.macro_predator_intelligence"  [import-not-found]
    from src.sensory.enhanced.why.macro_predator_intelligence import (
    ^
src/sensory/organs/dimensions/institutional_tracker.py:80: error: Explicit
"Any" is not allowed  [explicit-any]
        def __init__(self, config: Optional[Dict[str, Any]] = None):
        ^
src/sensory/organs/dimensions/institutional_tracker.py:119: error: Argument 1
to "_determine_institutional_bias" of "InstitutionalFootprintHunter" has
incompatible type "object"; expected "list[OrderBlock]"  [arg-type]
                    order_blocks, fvgs, smart_flow
                    ^~~~~~~~~~~~
src/sensory/organs/dimensions/institutional_tracker.py:119: error: Argument 2
to "_determine_institutional_bias" of "InstitutionalFootprintHunter" has
incompatible type "object"; expected "list[FairValueGap]"  [arg-type]
                    order_blocks, fvgs, smart_flow
                                  ^~~~
src/sensory/organs/dimensions/institutional_tracker.py:119: error: Argument 3
to "_determine_institutional_bias" of "InstitutionalFootprintHunter" has
incompatible type "object"; expected "float"  [arg-type]
                    order_blocks, fvgs, smart_flow
                                        ^~~~~~~~~~
src/sensory/organs/dimensions/institutional_tracker.py:124: error: Argument 1
to "_calculate_footprint_confidence" of "InstitutionalFootprintHunter" has
incompatible type "object"; expected "list[OrderBlock]"  [arg-type]
                    order_blocks, fvgs, sweeps
                    ^~~~~~~~~~~~
src/sensory/organs/dimensions/institutional_tracker.py:124: error: Argument 2
to "_calculate_footprint_confidence" of "InstitutionalFootprintHunter" has
incompatible type "object"; expected "list[FairValueGap]"  [arg-type]
                    order_blocks, fvgs, sweeps
                                  ^~~~
src/sensory/organs/dimensions/institutional_tracker.py:124: error: Argument 3
to "_calculate_footprint_confidence" of "InstitutionalFootprintHunter" has
incompatible type "object"; expected "list[LiquiditySweep]"  [arg-type]
                    order_blocks, fvgs, sweeps
                                        ^~~~~~
src/sensory/organs/dimensions/institutional_tracker.py:128: error: Argument 1
to "_identify_key_levels" of "InstitutionalFootprintHunter" has incompatible
type "object"; expected "list[OrderBlock]"  [arg-type]
                key_levels = self._identify_key_levels(order_blocks, fvgs)
                                                       ^~~~~~~~~~~~
src/sensory/organs/dimensions/institutional_tracker.py:128: error: Argument 2
to "_identify_key_levels" of "InstitutionalFootprintHunter" has incompatible
type "object"; expected "list[FairValueGap]"  [arg-type]
                key_levels = self._identify_key_levels(order_blocks, fvgs)
                                                                     ^~~~
src/sensory/organs/dimensions/institutional_tracker.py:131: error: Argument 2
to "_determine_market_structure" of "InstitutionalFootprintHunter" has
incompatible type "object"; expected "list[OrderBlock]"  [arg-type]
    ... market_structure = self._determine_market_structure(df, order_blocks)
                                                                ^~~~~~~~~~~~
src/sensory/organs/dimensions/institutional_tracker.py:134: error: Argument
"order_blocks" to "InstitutionalFootprint" has incompatible type "object";
expected "list[OrderBlock]"  [arg-type]
                    order_blocks=order_blocks,
                                 ^~~~~~~~~~~~
src/sensory/organs/dimensions/institutional_tracker.py:135: error: Argument
"fair_value_gaps" to "InstitutionalFootprint" has incompatible type "object";
expected "list[FairValueGap]"  [arg-type]
                    fair_value_gaps=fvgs,
                                    ^~~~
src/sensory/organs/dimensions/institutional_tracker.py:136: error: Argument
"liquidity_sweeps" to "InstitutionalFootprint" has incompatible type "object";
expected "list[LiquiditySweep]"  [arg-type]
                    liquidity_sweeps=sweeps,
                                     ^~~~~~
src/sensory/organs/dimensions/institutional_tracker.py:137: error: Argument
"smart_money_flow" to "InstitutionalFootprint" has incompatible type "object";
expected "float"  [arg-type]
                    smart_money_flow=smart_flow,
                                     ^~~~~~~~~~
src/sensory/organs/dimensions/institutional_tracker.py:161: error: "MarketData"
has no attribute "spread"  [attr-defined]
                    'spread': md.spread,
                              ^~~~~~~~~
src/sensory/organs/dimensions/institutional_tracker.py:162: error: "MarketData"
has no attribute "mid_price"  [attr-defined]
                    'mid_price': md.mid_price
                                 ^~~~~~~~~~~~
src/sensory/organs/dimensions/institutional_tracker.py:176: error: Explicit
"Any" is not allowed  [explicit-any]
        def _calculate_rsi(self, prices: pd.Series, period: int = 14) -> p...
        ^
src/sensory/organs/dimensions/institutional_tracker.py:179: error: Unsupported
operand types for > ("Series[type[object]]" and "int")  [operator]
            gain = (delta.where(delta > 0, 0)).rolling(window=period).mean...
                                        ^
src/sensory/organs/dimensions/institutional_tracker.py:180: error: Unsupported
operand types for < ("Series[type[object]]" and "int")  [operator]
            loss = (-delta.where(delta < 0, 0)).rolling(window=period).mea...
                                         ^
src/sensory/organs/dimensions/institutional_tracker.py:184: error: Explicit
"Any" is not allowed  [explicit-any]
        def _calculate_atr(self, df: pd.DataFrame, period: int = 14) -> pd...
        ^
src/sensory/organs/dimensions/institutional_tracker.py:301: error: Need type
annotation for "order_blocks" (hint: "order_blocks: list[<type>] = ...") 
[var-annotated]
            order_blocks = []
            ^~~~~~~~~~~~
src/sensory/organs/dimensions/institutional_tracker.py:364: error: Need type
annotation for "fvgs" (hint: "fvgs: list[<type>] = ...")  [var-annotated]
            fvgs = []
            ^~~~
src/sensory/organs/dimensions/institutional_tracker.py:418: error: Function is
missing a type annotation for one or more arguments  [no-untyped-def]
        def _calculate_fvg_strength(self, c1, c2, c3) -> float:
        ^
src/sensory/organs/dimensions/institutional_tracker.py:430: error: Returning
Any from function declared to return "float"  [no-any-return]
                return min(imbalance / avg_range, 1.0)
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/dimensions/institutional_tracker.py:435: error: Function is
missing a type annotation for one or more arguments  [no-untyped-def]
        def _calculate_fill_probability(self, c1, c3) -> float:
        ^
src/sensory/organs/dimensions/institutional_tracker.py:440: error: Returning
Any from function declared to return "float"  [no-any-return]
                return max(0.1, min(0.9, 1.0 - gap_size / c1['close']))
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/dimensions/institutional_tracker.py:449: error: Need type
annotation for "sweeps" (hint: "sweeps: list[<type>] = ...")  [var-annotated]
            sweeps = []
            ^~~~~~
src/sensory/organs/dimensions/institutional_tracker.py:463: error: Argument 1
to "_find_equal_levels" of "LiquidityAnalyzer" has incompatible type
"ExtensionArray | ndarray[tuple[Any, ...], dtype[Any]]"; expected
"ndarray[tuple[Any, ...], dtype[Any]]"  [arg-type]
    ...           equal_highs = self._find_equal_levels(recent_highs, toleran...
                                                        ^~~~~~~~~~~~
src/sensory/organs/dimensions/institutional_tracker.py:480: error: Argument 1
to "_find_equal_levels" of "LiquidityAnalyzer" has incompatible type
"ExtensionArray | ndarray[tuple[Any, ...], dtype[Any]]"; expected
"ndarray[tuple[Any, ...], dtype[Any]]"  [arg-type]
    ...            equal_lows = self._find_equal_levels(recent_lows, toleranc...
                                                        ^~~~~~~~~~~
src/sensory/organs/dimensions/institutional_tracker.py:500: error: Explicit
"Any" is not allowed  [explicit-any]
        def _find_equal_levels(self, levels: np.ndarray, tolerance: float ...
        ^
src/sensory/organs/dimensions/institutional_tracker.py:535: error: Returning
Any from function declared to return "float"  [no-any-return]
                return max(-1.0, min(1.0, (flow_ratio - 1) / (flow_ratio +...
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/sensory/organs/dimensions/institutional_tracker.py:545: error: Function is
missing a return type annotation  [no-untyped-def]
        def __init__(self):
        ^
src/sensory/organs/dimensions/institutional_tracker.py:545: note: Use "-> None" if function does not return a value
src/sensory/organs/dimensions/institutional_tracker.py:598: error: Returning
Any from function declared to return "MarketRegime"  [no-any-return]
                return MarketRegime.BULLISH
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/dimensions/institutional_tracker.py:598: error:
"type[MarketRegime]" has no attribute "BULLISH"  [attr-defined]
                return MarketRegime.BULLISH
                       ^~~~~~~~~~~~~~~~~~~~
src/sensory/organs/dimensions/institutional_tracker.py:600: error: Returning
Any from function declared to return "MarketRegime"  [no-any-return]
                return MarketRegime.BEARISH
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/dimensions/institutional_tracker.py:600: error:
"type[MarketRegime]" has no attribute "BEARISH"  [attr-defined]
                return MarketRegime.BEARISH
                       ^~~~~~~~~~~~~~~~~~~~
src/sensory/organs/dimensions/institutional_tracker.py:602: error: Returning
Any from function declared to return "MarketRegime"  [no-any-return]
                return MarketRegime.RANGING
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/dimensions/institutional_tracker.py:602: error:
"type[MarketRegime]" has no attribute "RANGING"  [attr-defined]
                return MarketRegime.RANGING
                       ^~~~~~~~~~~~~~~~~~~~
src/sensory/organs/dimensions/institutional_tracker.py:606: error: Function is
missing a return type annotation  [no-untyped-def]
        async def test_footprint_hunter():
        ^
src/sensory/organs/dimensions/institutional_tracker.py:606: note: Use "-> None" if function does not return a value
src/sensory/organs/dimensions/how_organ.py:31: error: Explicit "Any" is not
allowed  [explicit-any]
        def __init__(self, config: Optional[Dict[str, Any]] = None):
        ^
src/sensory/organs/dimensions/how_organ.py:50: error: Incompatible types in
assignment (expression has type "None", variable has type "TechnicalIndicators")
 [assignment]
                self.indicators = None
                                  ^~~~
src/sensory/organs/dimensions/how_organ.py:51: error: Incompatible types in
assignment (expression has type "None", variable has type "ICTPatternDetector") 
[assignment]
                self.patterns = None
                                ^~~~
src/sensory/organs/dimensions/how_organ.py:52: error: Incompatible types in
assignment (expression has type "None", variable has type
"OrderFlowDataProvider")  [assignment]
                self.order_flow_provider = None
                                           ^~~~
src/sensory/organs/dimensions/how_organ.py:53: error: Incompatible types in
assignment (expression has type "None", variable has type "OrderFlowAnalyzer") 
[assignment]
                self.order_flow_analyzer = None
                                           ^~~~
src/sensory/organs/dimensions/how_organ.py:54: error: Incompatible types in
assignment (expression has type "None", variable has type
"MarketMicrostructureAnalyzer")  [assignment]
                self.microstructure = None
                                      ^~~~
src/sensory/organs/dimensions/how_organ.py:56: error: Explicit "Any" is not
allowed  [explicit-any]
        def analyze_market_data(self, market_data: List[MarketData], 
        ^
src/sensory/organs/dimensions/how_organ.py:96: error: Explicit "Any" is not
allowed  [explicit-any]
        def analyze_institutional_mechanics(self, market_data: List[Market...
        ^
src/sensory/organs/dimensions/how_organ.py:159: error: Explicit "Any" is not
allowed  [explicit-any]
        def _analyze_indicators(self, df: pd.DataFrame) -> Dict[str, Any]:
        ^
src/sensory/organs/dimensions/how_organ.py:162: error: Statement is unreachable
 [unreachable]
                return {}
                ^~~~~~~~~
src/sensory/organs/dimensions/how_organ.py:170: error: Explicit "Any" is not
allowed  [explicit-any]
        def _analyze_patterns(self, df: pd.DataFrame) -> Dict[str, Any]:
        ^
src/sensory/organs/dimensions/how_organ.py:173: error: Statement is unreachable
 [unreachable]
                return {}
                ^~~~~~~~~
src/sensory/organs/dimensions/how_organ.py:181: error: Explicit "Any" is not
allowed  [explicit-any]
        def _analyze_order_flow(self, df: pd.DataFrame) -> Dict[str, Any]:
        ^
src/sensory/organs/dimensions/how_organ.py:184: error: Statement is unreachable
 [unreachable]
                return {}
                ^~~~~~~~~
src/sensory/organs/dimensions/how_organ.py:192: error: Explicit "Any" is not
allowed  [explicit-any]
        def _analyze_microstructure(self, df: pd.DataFrame) -> Dict[str, A...
        ^
src/sensory/organs/dimensions/how_organ.py:195: error: Statement is unreachable
 [unreachable]
                return {}
                ^~~~~~~~~
src/sensory/organs/dimensions/how_organ.py:206: error: Statement is unreachable
 [unreachable]
                return 0.0
                ^~~~~~~~~~
src/sensory/organs/dimensions/how_organ.py:217: error: Statement is unreachable
 [unreachable]
                return {'buying_pressure': 0.0, 'selling_pressure': 0.0}
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/dimensions/how_organ.py:221: error: Incompatible return
value type (got "object", expected "dict[str, float]")  [return-value]
                return flow_analysis.get('institutional_pressure', 
                       ^
src/sensory/organs/dimensions/how_organ.py:227: error: Explicit "Any" is not
allowed  [explicit-any]
        def _calculate_signal_strength(self, analysis: Dict[str, Any]) -> ...
        ^
src/sensory/organs/dimensions/how_organ.py:236: error: Returning Any from
function declared to return "float"  [no-any-return]
                return min(max(signal_strength, -1.0), 1.0)
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/dimensions/how_organ.py:242: error: Explicit "Any" is not
allowed  [explicit-any]
        def _calculate_confidence(self, analysis: Dict[str, Any]) -> float...
        ^
src/sensory/organs/dimensions/how_organ.py:253: error: Returning Any from
function declared to return "float"  [no-any-return]
                return min(max(base_confidence, 0.0), 1.0)
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/dimensions/how_organ.py:272: error: "MarketData" has no
attribute "spread"  [attr-defined]
                    'spread': md.spread,
                              ^~~~~~~~~
src/sensory/organs/dimensions/how_organ.py:273: error: "MarketData" has no
attribute "mid_price"  [attr-defined]
                    'mid_price': md.mid_price
                                 ^~~~~~~~~~~~
src/sensory/organs/dimensions/chaos_dimension.py:36: error: Explicit "Any" is
not allowed  [explicit-any]
        def __init__(self, config: Optional[Dict[str, Any]] = None):
        ^
src/sensory/organs/dimensions/chaos_dimension.py:40: error: Need type
annotation for "adaptation_history" (hint:
"adaptation_history: list[<type>] = ...")  [var-annotated]
            self.adaptation_history = []
            ^~~~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/dimensions/chaos_dimension.py:41: error: Need type
annotation for "antifragility_metrics" (hint:
"antifragility_metrics: dict[<type>, <type>] = ...")  [var-annotated]
            self.antifragility_metrics = {}
            ^~~~~~~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/dimensions/chaos_dimension.py:42: error: Need type
annotation for "chaos_regimes" (hint:
"chaos_regimes: dict[<type>, <type>] = ...")  [var-annotated]
            self.chaos_regimes = {}
            ^~~~~~~~~~~~~~~~~~
src/sensory/organs/dimensions/chaos_dimension.py:44: error: Explicit "Any" is
not allowed  [explicit-any]
        def analyze_chaos(self, data: pd.DataFrame) -> Dict[str, Any]:
        ^
src/sensory/organs/dimensions/chaos_dimension.py:66: error: Explicit "Any" is
not allowed  [explicit-any]
        def _calculate_chaos_level(self, data: pd.DataFrame) -> Dict[str, ...
        ^
src/sensory/organs/dimensions/chaos_dimension.py:81: error: Unsupported operand
types for * ("object" and "float")  [operator]
    ...      chaos_score = min(1.0, (volatility * 0.7 + abs(kurtosis) * 0.3))
                                                        ^
src/sensory/organs/dimensions/chaos_dimension.py:81: error: Argument 1 to "abs"
has incompatible type
"str | bytes | date | timedelta | datetime64[date | int | None] | <7 more items>";
expected "SupportsAbs[object]"  [arg-type]
    ...      chaos_score = min(1.0, (volatility * 0.7 + abs(kurtosis) * 0.3))
                                                            ^~~~~~~~
src/sensory/organs/dimensions/chaos_dimension.py:86: error: Argument 1 to
"float" has incompatible type
"str | bytes | date | timedelta | datetime64[date | int | None] | <7 more items>";
expected "str | Buffer | SupportsFloat | SupportsIndex"  [arg-type]
                'kurtosis': float(kurtosis),
                                  ^~~~~~~~
src/sensory/organs/dimensions/chaos_dimension.py:90: error: Explicit "Any" is
not allowed  [explicit-any]
        def _measure_antifragility(self, data: pd.DataFrame) -> Dict[str, ...
        ^
src/sensory/organs/dimensions/chaos_dimension.py:104: error: Explicit "Any" is
not allowed  [explicit-any]
        def _identify_opportunities(self, data: pd.DataFrame) -> List[Dict...
        ^
src/sensory/organs/dimensions/chaos_dimension.py:139: error: Explicit "Any" is
not allowed  [explicit-any]
        def _analyze_regime_changes(self, data: pd.DataFrame) -> Dict[str,...
        ^
src/sensory/organs/dimensions/chaos_dimension.py:161: error: Explicit "Any" is
not allowed  [explicit-any]
        def adapt_to_chaos(self, chaos_level: float) -> Dict[str, Any]:
        ^
src/sensory/organs/dimensions/chaos_dimension.py:188: error: Explicit "Any" is
not allowed  [explicit-any]
        def register_chaos_regime(self, regime_id: str, regime_data: Dict[...
        ^
src/sensory/organs/dimensions/chaos_dimension.py:192: error: Explicit "Any" is
not allowed  [explicit-any]
        def get_chaos_regime(self, regime_id: str) -> Optional[Dict[str, A...
        ^
src/sensory/organs/dimensions/chaos_dimension.py:200: error: Explicit "Any" is
not allowed  [explicit-any]
        def get_status(self) -> Dict[str, Any]:
        ^
src/sensory/organs/dimensions/chaos_adaptation.py:52: error: Explicit "Any" is
not allowed  [explicit-any]
    class ChaosAdaptation:
    ^~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/dimensions/chaos_adaptation.py:57: error: Explicit "Any" is
not allowed  [explicit-any]
        regime_change: Dict[str, Any]
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/dimensions/chaos_adaptation.py:70: error: Function is
missing a return type annotation  [no-untyped-def]
        def __init__(self):
        ^
src/sensory/organs/dimensions/chaos_adaptation.py:70: note: Use "-> None" if function does not return a value
src/sensory/organs/dimensions/chaos_adaptation.py:150: error: Returning Any
from function declared to return "float"  [no-any-return]
            return min(max(np.mean(factors), 0.0), 1.0)
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/dimensions/chaos_adaptation.py:150: error: No overload
variant of "max" matches argument types "floating[Any]", "float" 
[call-overload]
            return min(max(np.mean(factors), 0.0), 1.0)
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/dimensions/chaos_adaptation.py:150: note: Possible overload variants:
src/sensory/organs/dimensions/chaos_adaptation.py:150: note:     def [SupportsRichComparisonT: SupportsDunderLT[Any] | SupportsDunderGT[Any]] max(SupportsRichComparisonT, SupportsRichComparisonT, /, *_args: SupportsRichComparisonT, key: None = ...) -> SupportsRichComparisonT
src/sensory/organs/dimensions/chaos_adaptation.py:150: note:     def [_T] max(_T, _T, /, *_args: _T, key: Callable[[_T], SupportsDunderLT[Any] | SupportsDunderGT[Any]]) -> _T
src/sensory/organs/dimensions/chaos_adaptation.py:150: note:     def [SupportsRichComparisonT: SupportsDunderLT[Any] | SupportsDunderGT[Any]] max(Iterable[SupportsRichComparisonT], /, *, key: None = ...) -> SupportsRichComparisonT
src/sensory/organs/dimensions/chaos_adaptation.py:150: note:     def [_T] max(Iterable[_T], /, *, key: Callable[[_T], SupportsDunderLT[Any] | SupportsDunderGT[Any]]) -> _T
src/sensory/organs/dimensions/chaos_adaptation.py:150: note:     def [SupportsRichComparisonT: SupportsDunderLT[Any] | SupportsDunderGT[Any], _T] max(Iterable[SupportsRichComparisonT], /, *, key: None = ..., default: _T) -> SupportsRichComparisonT | _T
src/sensory/organs/dimensions/chaos_adaptation.py:150: note:     def [_T1, _T2] max(Iterable[_T1], /, *, key: Callable[[_T1], SupportsDunderLT[Any] | SupportsDunderGT[Any]], default: _T2) -> _T1 | _T2
src/sensory/organs/dimensions/chaos_adaptation.py:161: error: Returning Any
from function declared to return "float"  [no-any-return]
            return min(max(np.mean(confidences), 0.0), 1.0)
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/dimensions/chaos_adaptation.py:161: error: No overload
variant of "max" matches argument types "floating[Any]", "float" 
[call-overload]
            return min(max(np.mean(confidences), 0.0), 1.0)
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/dimensions/chaos_adaptation.py:161: note: Possible overload variants:
src/sensory/organs/dimensions/chaos_adaptation.py:161: note:     def [SupportsRichComparisonT: SupportsDunderLT[Any] | SupportsDunderGT[Any]] max(SupportsRichComparisonT, SupportsRichComparisonT, /, *_args: SupportsRichComparisonT, key: None = ...) -> SupportsRichComparisonT
src/sensory/organs/dimensions/chaos_adaptation.py:161: note:     def [_T] max(_T, _T, /, *_args: _T, key: Callable[[_T], SupportsDunderLT[Any] | SupportsDunderGT[Any]]) -> _T
src/sensory/organs/dimensions/chaos_adaptation.py:161: note:     def [SupportsRichComparisonT: SupportsDunderLT[Any] | SupportsDunderGT[Any]] max(Iterable[SupportsRichComparisonT], /, *, key: None = ...) -> SupportsRichComparisonT
src/sensory/organs/dimensions/chaos_adaptation.py:161: note:     def [_T] max(Iterable[_T], /, *, key: Callable[[_T], SupportsDunderLT[Any] | SupportsDunderGT[Any]]) -> _T
src/sensory/organs/dimensions/chaos_adaptation.py:161: note:     def [SupportsRichComparisonT: SupportsDunderLT[Any] | SupportsDunderGT[Any], _T] max(Iterable[SupportsRichComparisonT], /, *, key: None = ..., default: _T) -> SupportsRichComparisonT | _T
src/sensory/organs/dimensions/chaos_adaptation.py:161: note:     def [_T1, _T2] max(Iterable[_T1], /, *, key: Callable[[_T1], SupportsDunderLT[Any] | SupportsDunderGT[Any]], default: _T2) -> _T1 | _T2
src/sensory/organs/dimensions/chaos_adaptation.py:265: error: Returning Any
from function declared to return "float"  [no-any-return]
            return (data['close'].iloc[-1] - data['close'].iloc[0]) / data...
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/sensory/organs/dimensions/chaos_adaptation.py:360: error: Returning Any
from function declared to return "float"  [no-any-return]
            return (data['close'].iloc[-1] - data['close'].iloc[0]) / data...
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/sensory/organs/dimensions/chaos_adaptation.py:375: error: Explicit "Any" is
not allowed  [explicit-any]
        async def detect_changes(self, data: pd.DataFrame) -> Dict[str, An...
        ^
src/sensory/organs/dimensions/chaos_adaptation.py:415: error: Returning Any
from function declared to return "float"  [no-any-return]
            return (prices.iloc[-1] - prices.iloc[0]) / prices.iloc[0]
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/dimensions/anomaly_dimension.py:14: error: Library stubs not
installed for "scipy"  [import-untyped]
    from scipy import stats
    ^
src/sensory/organs/dimensions/anomaly_dimension.py:14: note: Hint: "python3 -m pip install scipy-stubs"
src/sensory/organs/dimensions/anomaly_dimension.py:36: error: Explicit "Any" is
not allowed  [explicit-any]
        def __init__(self, config: Optional[Dict[str, Any]] = None):
        ^
src/sensory/organs/dimensions/anomaly_dimension.py:41: error: Need type
annotation for "detected_anomalies" (hint:
"detected_anomalies: list[<type>] = ...")  [var-annotated]
            self.detected_anomalies = []
            ^~~~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/dimensions/anomaly_dimension.py:42: error: Need type
annotation for "baseline_stats" (hint:
"baseline_stats: dict[<type>, <type>] = ...")  [var-annotated]
            self.baseline_stats = {}
            ^~~~~~~~~~~~~~~~~~~
src/sensory/organs/dimensions/anomaly_dimension.py:44: error: Explicit "Any" is
not allowed  [explicit-any]
        def detect_anomalies(self, data: pd.DataFrame) -> Dict[str, Any]:
        ^
src/sensory/organs/dimensions/anomaly_dimension.py:80: error: Explicit "Any" is
not allowed  [explicit-any]
        def _detect_price_anomalies(self, data: pd.DataFrame) -> List[Dict...
        ^
src/sensory/organs/dimensions/anomaly_dimension.py:104: error: Explicit "Any"
is not allowed  [explicit-any]
        def _detect_volume_anomalies(self, data: pd.DataFrame) -> List[Dic...
        ^
src/sensory/organs/dimensions/anomaly_dimension.py:113: error: Argument 1 to
"mean" has incompatible type
"ExtensionArray | ndarray[tuple[Any, ...], dtype[Any]]"; expected
"_SupportsArray[dtype[numpy.bool[builtins.bool] | integer[Any] | floating[Any]]] | _NestedSequence[_SupportsArray[dtype[numpy.bool[builtins.bool] | integer[Any] | floating[Any]]]] | float | _NestedSequence[float]"
 [arg-type]
            mean_volume = np.mean(volumes)
                                  ^~~~~~~
src/sensory/organs/dimensions/anomaly_dimension.py:114: error: Argument 1 to
"std" has incompatible type
"ExtensionArray | ndarray[tuple[Any, ...], dtype[Any]]"; expected
"_SupportsArray[dtype[numpy.bool[builtins.bool] | number[Any, int | float | complex]]] | _NestedSequence[_SupportsArray[dtype[numpy.bool[builtins.bool] | number[Any, int | float | complex]]]] | complex | _NestedSequence[complex]"
 [arg-type]
            std_volume = np.std(volumes)
                                ^~~~~~~
src/sensory/organs/dimensions/anomaly_dimension.py:131: error: Explicit "Any"
is not allowed  [explicit-any]
        def _detect_volatility_anomalies(self, data: pd.DataFrame) -> List...
        ^
src/sensory/organs/dimensions/anomaly_dimension.py:175: error: Explicit "Any"
is not allowed  [explicit-any]
        def get_recent_anomalies(self, hours: int = 24) -> List[Dict[str, ...
        ^
src/sensory/organs/dimensions/anomaly_dimension.py:177: error: Name "timedelta"
is not defined  [name-defined]
            cutoff_time = datetime.now() - timedelta(hours=hours)
                                           ^~~~~~~~~
src/sensory/organs/dimensions/anomaly_dimension.py:187: error: Explicit "Any"
is not allowed  [explicit-any]
        def get_status(self) -> Dict[str, Any]:
        ^
src/sensory/organs/dimensions/anomaly_detection.py:58: error: Explicit "Any" is
not allowed  [explicit-any]
    class AnomalyDetection:
    ^~~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/dimensions/anomaly_detection.py:63: error: Explicit "Any" is
not allowed  [explicit-any]
        regulatory_arbitrage: List[Dict[str, Any]]
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/dimensions/anomaly_detection.py:64: error: Explicit "Any" is
not allowed  [explicit-any]
        microstructure_anomalies: List[Dict[str, Any]]
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/dimensions/anomaly_detection.py:76: error: Function is
missing a return type annotation  [no-untyped-def]
        def __init__(self):
        ^
src/sensory/organs/dimensions/anomaly_detection.py:76: note: Use "-> None" if function does not return a value
src/sensory/organs/dimensions/anomaly_detection.py:127: error: Missing type
parameters for generic type "Dict"  [type-arg]
    ...   pump_dump: PumpDumpDetection, microstructure: List[Dict]) -> float:
                                                             ^
src/sensory/organs/dimensions/anomaly_detection.py:135: error: Returning Any
from function declared to return "float"  [no-any-return]
            return min(max(np.mean(risk_factors), 0.0), 1.0)
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/dimensions/anomaly_detection.py:135: error: No overload
variant of "max" matches argument types "floating[Any]", "float" 
[call-overload]
            return min(max(np.mean(risk_factors), 0.0), 1.0)
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/dimensions/anomaly_detection.py:135: note: Possible overload variants:
src/sensory/organs/dimensions/anomaly_detection.py:135: note:     def [SupportsRichComparisonT: SupportsDunderLT[Any] | SupportsDunderGT[Any]] max(SupportsRichComparisonT, SupportsRichComparisonT, /, *_args: SupportsRichComparisonT, key: None = ...) -> SupportsRichComparisonT
src/sensory/organs/dimensions/anomaly_detection.py:135: note:     def [_T] max(_T, _T, /, *_args: _T, key: Callable[[_T], SupportsDunderLT[Any] | SupportsDunderGT[Any]]) -> _T
src/sensory/organs/dimensions/anomaly_detection.py:135: note:     def [SupportsRichComparisonT: SupportsDunderLT[Any] | SupportsDunderGT[Any]] max(Iterable[SupportsRichComparisonT], /, *, key: None = ...) -> SupportsRichComparisonT
src/sensory/organs/dimensions/anomaly_detection.py:135: note:     def [_T] max(Iterable[_T], /, *, key: Callable[[_T], SupportsDunderLT[Any] | SupportsDunderGT[Any]]) -> _T
src/sensory/organs/dimensions/anomaly_detection.py:135: note:     def [SupportsRichComparisonT: SupportsDunderLT[Any] | SupportsDunderGT[Any], _T] max(Iterable[SupportsRichComparisonT], /, *, key: None = ..., default: _T) -> SupportsRichComparisonT | _T
src/sensory/organs/dimensions/anomaly_detection.py:135: note:     def [_T1, _T2] max(Iterable[_T1], /, *, key: Callable[[_T1], SupportsDunderLT[Any] | SupportsDunderGT[Any]], default: _T2) -> _T1 | _T2
src/sensory/organs/dimensions/anomaly_detection.py:145: error: Returning Any
from function declared to return "float"  [no-any-return]
            return min(max(np.mean(confidences), 0.0), 1.0)
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/dimensions/anomaly_detection.py:145: error: No overload
variant of "max" matches argument types "floating[Any]", "float" 
[call-overload]
            return min(max(np.mean(confidences), 0.0), 1.0)
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/dimensions/anomaly_detection.py:145: note: Possible overload variants:
src/sensory/organs/dimensions/anomaly_detection.py:145: note:     def [SupportsRichComparisonT: SupportsDunderLT[Any] | SupportsDunderGT[Any]] max(SupportsRichComparisonT, SupportsRichComparisonT, /, *_args: SupportsRichComparisonT, key: None = ...) -> SupportsRichComparisonT
src/sensory/organs/dimensions/anomaly_detection.py:145: note:     def [_T] max(_T, _T, /, *_args: _T, key: Callable[[_T], SupportsDunderLT[Any] | SupportsDunderGT[Any]]) -> _T
src/sensory/organs/dimensions/anomaly_detection.py:145: note:     def [SupportsRichComparisonT: SupportsDunderLT[Any] | SupportsDunderGT[Any]] max(Iterable[SupportsRichComparisonT], /, *, key: None = ...) -> SupportsRichComparisonT
src/sensory/organs/dimensions/anomaly_detection.py:145: note:     def [_T] max(Iterable[_T], /, *, key: Callable[[_T], SupportsDunderLT[Any] | SupportsDunderGT[Any]]) -> _T
src/sensory/organs/dimensions/anomaly_detection.py:145: note:     def [SupportsRichComparisonT: SupportsDunderLT[Any] | SupportsDunderGT[Any], _T] max(Iterable[SupportsRichComparisonT], /, *, key: None = ..., default: _T) -> SupportsRichComparisonT | _T
src/sensory/organs/dimensions/anomaly_detection.py:145: note:     def [_T1, _T2] max(Iterable[_T1], /, *, key: Callable[[_T1], SupportsDunderLT[Any] | SupportsDunderGT[Any]], default: _T2) -> _T1 | _T2
src/sensory/organs/dimensions/anomaly_detection.py:238: error: Returning Any
from function declared to return "bool"  [no-any-return]
            return recent_change > 0.05
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/dimensions/anomaly_detection.py:337: error: Returning Any
from function declared to return "float"  [no-any-return]
            return abs(data['close'].iloc[-1] - data['close'].iloc[0]) / d...
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/sensory/organs/dimensions/anomaly_detection.py:368: error: Explicit "Any"
is not allowed  [explicit-any]
        async def detect_anomalies(self, data: pd.DataFrame) -> List[Dict[...
        ^
src/sensory/organs/analyzers/anomaly_organ.py:273: error: Need type annotation
for "anomalies" (hint: "anomalies: list[<type>] = ...")  [var-annotated]
                anomalies = []
                ^~~~~~~~~
src/sensory/organs/analyzers/anomaly_organ.py:307: error: Incompatible return
value type (got "list[dict[str, float | int | str | Any | None]]", expected
"list[AnomalyRecord]")  [return-value]
                return anomalies
                       ^~~~~~~~~
src/sensory/organs/analyzers/anomaly_organ.py:316: error: Need type annotation
for "anomalies" (hint: "anomalies: list[<type>] = ...")  [var-annotated]
                anomalies = []
                ^~~~~~~~~
src/sensory/organs/analyzers/anomaly_organ.py:351: error: Incompatible return
value type (got "list[dict[str, float | int | str | Any | None]]", expected
"list[AnomalyRecord]")  [return-value]
                return anomalies
                       ^~~~~~~~~
src/sensory/organs/analyzers/anomaly_organ.py:460: error: Need type annotation
for "patterns" (hint: "patterns: list[<type>] = ...")  [var-annotated]
                patterns = []
                ^~~~~~~~
src/sensory/organs/analyzers/anomaly_organ.py:480: error: Incompatible return
value type (got "list[dict[str, object]]", expected "list[ChaosPattern]") 
[return-value]
                return patterns
                       ^~~~~~~~
src/sensory/organs/analyzers/anomaly_organ.py:489: error: Need type annotation
for "patterns" (hint: "patterns: list[<type>] = ...")  [var-annotated]
                patterns = []
                ^~~~~~~~
src/sensory/organs/analyzers/anomaly_organ.py:508: error: Incompatible return
value type (got "list[dict[str, object]]", expected "list[ChaosPattern]") 
[return-value]
                return patterns
                       ^~~~~~~~
src/sensory/organs/analyzers/anomaly_organ.py:517: error: Need type annotation
for "patterns" (hint: "patterns: list[<type>] = ...")  [var-annotated]
                patterns = []
                ^~~~~~~~
src/sensory/organs/analyzers/anomaly_organ.py:537: error: Incompatible return
value type (got "list[dict[str, object]]", expected "list[ChaosPattern]") 
[return-value]
                return patterns
                       ^~~~~~~~
src/sensory/organs/analyzers/anomaly_organ.py:543: error: Explicit "Any" is not
allowed  [explicit-any]
        def _calculate_hurst_exponent(self, series: pd.Series) -> float:
        ^
src/sensory/organs/analyzers/anomaly_organ.py:565: error: Explicit "Any" is not
allowed  [explicit-any]
        def _calculate_entropy(self, series: pd.Series) -> float:
        ^
src/sensory/organs/analyzers/anomaly_organ.py:585: error: Returning Any from
function declared to return "float"  [no-any-return]
                return min(max(normalized_entropy, 0.0), 1.0)
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/analyzers/anomaly_organ.py:591: error: Explicit "Any" is not
allowed  [explicit-any]
        def _calculate_sensitivity(self, series: pd.Series) -> float:
        ^
src/sensory/organs/analyzers/anomaly_organ.py:700: error: Need type annotation
for "patterns" (hint: "patterns: list[<type>] = ...")  [var-annotated]
                patterns = []
                ^~~~~~~~
src/sensory/organs/analyzers/anomaly_organ.py:727: error: Incompatible return
value type (got "list[dict[str, object]]", expected "list[ManipulationPattern]")
 [return-value]
                return patterns
                       ^~~~~~~~
src/sensory/organs/analyzers/anomaly_organ.py:736: error: Need type annotation
for "patterns" (hint: "patterns: list[<type>] = ...")  [var-annotated]
                patterns = []
                ^~~~~~~~
src/sensory/organs/analyzers/anomaly_organ.py:762: error: Incompatible return
value type (got "list[dict[str, object]]", expected "list[ManipulationPattern]")
 [return-value]
                return patterns
                       ^~~~~~~~
src/sensory/organs/analyzers/anomaly_organ.py:771: error: Need type annotation
for "patterns" (hint: "patterns: list[<type>] = ...")  [var-annotated]
                patterns = []
                ^~~~~~~~
src/sensory/organs/analyzers/anomaly_organ.py:803: error: Incompatible return
value type (got "list[dict[str, object]]", expected "list[ManipulationPattern]")
 [return-value]
                return patterns
                       ^~~~~~~~
src/orchestration/compose.py:52: error: Explicit "Any" is not allowed 
[explicit-any]
        def __init__(self, organ: Optional[Any] = None) -> None:
        ^
src/orchestration/compose.py:53: error: Explicit "Any" is not allowed 
[explicit-any]
            self._organ: Optional[Any] = None
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/orchestration/compose.py:65: error: Explicit "Any" is not allowed 
[explicit-any]
        def fetch_data(
        ^
src/orchestration/compose.py:89: error: Explicit "Any" is not allowed 
[explicit-any]
        async def get_market_data(
        ^
src/orchestration/compose.py:116: error: Explicit "Any" is not allowed 
[explicit-any]
        def __init__(self, system: Optional[Any] = None) -> None:
        ^
src/orchestration/compose.py:117: error: Explicit "Any" is not allowed 
[explicit-any]
            self._system: Optional[Any] = None
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/orchestration/compose.py:131: error: Explicit "Any" is not allowed 
[explicit-any]
        async def detect_manipulation(self, data: Any) -> List[_Dict[str, ...
        ^
src/orchestration/compose.py:141: error: Unused "type: ignore" comment 
[unused-ignore]
                return await asyncio.to_thread(func, data)  # type: ignore...
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/orchestration/compose.py:162: error: Explicit "Any" is not allowed 
[explicit-any]
        async def detect_regime(self, data: Any) -> Optional[RegimeResult]...
        ^
src/orchestration/compose.py:205: error: Explicit "Any" is not allowed 
[explicit-any]
        def __init__(self, engine: Optional[Any] = None) -> None:
        ^
src/orchestration/compose.py:206: error: Explicit "Any" is not allowed 
[explicit-any]
            self._engine: Optional[Any] = None
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/orchestration/compose.py:248: error: Explicit "Any" is not allowed 
[explicit-any]
        async def adapt_in_real_time(self, market_event: Any, strategy_res...
        ^
src/orchestration/compose.py:264: error: Explicit "Any" is not allowed 
[explicit-any]
                    d: Dict[str, Any] = dict(res)
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/orchestration/compose.py:270: error: Unused "type: ignore" comment 
[unused-ignore]
                            d[key] = getattr(res, key)  # type: ignore[att...
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/orchestration/compose.py:308: error: Explicit "Any" is not allowed 
[explicit-any]
        def __init__(self, cfg: Optional[Any] = None) -> None:
        ^
src/orchestration/compose.py:309: error: Explicit "Any" is not allowed 
[explicit-any]
            self._cfg: Optional[Any] = None
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/orchestration/compose.py:321: error: Unused "type: ignore" comment 
[unused-ignore]
                            candidate = from_env() if callable(from_env) e...
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/orchestration/compose.py:329: error: Explicit "Any" is not allowed 
[explicit-any]
        def get_value(self, key: str, default: Any = None) -> Any:
        ^
src/orchestration/compose.py:344: error: Unused "type: ignore" comment 
[unused-ignore]
                        val = obj[key]  # type: ignore[index]
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/orchestration/compose.py:361: error: Explicit "Any" is not allowed 
[explicit-any]
        def get_namespace(self, namespace: str) -> Dict[str, Any]:
        ^
src/orchestration/compose.py:369: error: Unused "type: ignore" comment 
[unused-ignore]
                        ns_val = obj[namespace]  # type: ignore[index]
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/orchestration/compose.py:401: error: Explicit "Any" is not allowed 
[explicit-any]
        def build(self) -> Any:
        ^
src/orchestration/compose.py:425: error: Explicit "Any" is not allowed 
[explicit-any]
                    def new_genome(self, id: str, parameters: Dict[str, fl...
                    ^
src/orchestration/compose.py:438: error: Explicit "Any" is not allowed 
[explicit-any]
                    def mutate(self, genome: Any, mutation: str, new_param...
                    ^
src/orchestration/compose.py:452: error: Explicit "Any" is not allowed 
[explicit-any]
                    def from_legacy(self, obj: Any) -> Any:
                    ^
src/orchestration/compose.py:455: error: Explicit "Any" is not allowed 
[explicit-any]
                    def to_legacy_view(self, genome: Any) -> Dict[str, Any...
                    ^
src/data_integration/yfinance_gateway.py:16: error: Unused "type: ignore"
comment  [unused-ignore]
    import pandas as pd  # type: ignore
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/data_integration/yfinance_gateway.py:17: error: Unused "type: ignore"
comment  [unused-ignore]
    import yfinance as yf  # type: ignore
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/data_integration/yfinance_gateway.py:25: error: Explicit "Any" is not
allowed  [explicit-any]
        def fetch_data(
        ^
src/data_integration/yfinance_gateway.py:43: error: "object" has no attribute
"empty"  [attr-defined]
                if df is None or df.empty:
                                 ^~~~~~~~
src/data_integration/yfinance_gateway.py:46: error: "object" has no attribute
"reset_index"  [attr-defined]
                df = df.reset_index()
                     ^~~~~~~~~~~~~~
src/data_integration/yfinance_gateway.py:77: error: Explicit "Any" is not
allowed  [explicit-any]
        async def get_market_data(
        ^
src/data_integration/dukascopy_ingestor.py:24: error: Library stubs not
installed for "requests"  [import-untyped]
    import requests
    ^
src/data_integration/dukascopy_ingestor.py:24: note: Hint: "python3 -m pip install types-requests"
src/data_integration/dukascopy_ingestor.py:24: note: (or run "mypy --install-types" to install all missing stub packages)
src/data_integration/dukascopy_ingestor.py:129: error: Subclass of "DataFrame"
and "Series[Any]" cannot exist: would have inconsistent method resolution order 
[unreachable]
                if isinstance(filtered_data, pd.Series):
                              ^~~~~~~~~~~~~
src/data_integration/dukascopy_ingestor.py:130: error: Statement is unreachable
 [unreachable]
                    filtered_data = filtered_data.to_frame().T
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/data_integration/dukascopy_ingestor.py:151: error: Function
"datetime.datetime.date" is not valid as a type  [valid-type]
    ... def _download_day_data(self, symbol: str, date: datetime.date) -> Opt...
                                                        ^
src/data_integration/dukascopy_ingestor.py:151: note: Perhaps you need "Callable[...]" or a callback protocol?
src/data_integration/dukascopy_ingestor.py:164: error: datetime.date? has no
attribute "year"  [attr-defined]
                year = date.year
                       ^~~~~~~~~
src/data_integration/dukascopy_ingestor.py:165: error: datetime.date? has no
attribute "month"  [attr-defined]
                month = date.month - 1  # Dukascopy uses 0-based months
                        ^~~~~~~~~~
src/data_integration/dukascopy_ingestor.py:166: error: datetime.date? has no
attribute "day"  [attr-defined]
                day = date.day
                      ^~~~~~~~
src/data_integration/dukascopy_ingestor.py:188: error: Function
"datetime.datetime.date" is not valid as a type  [valid-type]
    ...arse_binary_data(self, binary_data: bytes, date: datetime.date) -> Opt...
                                                        ^
src/data_integration/dukascopy_ingestor.py:188: note: Perhaps you need "Callable[...]" or a callback protocol?
src/data_integration/dukascopy_ingestor.py:277: error: Function is missing a
return type annotation  [no-untyped-def]
        def _save_data(self, symbol: str, data: pd.DataFrame, year: int):
        ^
src/data_integration/dukascopy_ingestor.py:339: error: Function is missing a
return type annotation  [no-untyped-def]
    def main():
    ^
src/data_integration/dukascopy_ingestor.py:339: note: Use "-> None" if function does not return a value
src/data_foundation/persist/parquet_writer.py:10: error: Incompatible types in
assignment (expression has type "None", variable has type Module)  [assignment]
        pd = None
             ^~~~
src/data_foundation/persist/parquet_writer.py:13: error: Explicit "Any" is not
allowed  [explicit-any]
    def write_events_parquet(events: List[Dict[str, Any]], out_dir: str, p...
    ^
src/data_foundation/ingest/yahoo_ingest.py:24: error: "object" has no attribute
"empty"  [attr-defined]
            if not df.empty:
                   ^~~~~~~~
src/data_foundation/ingest/yahoo_ingest.py:25: error: "object" has no attribute
"rename"  [attr-defined]
                df = df.rename(columns={
                     ^~~~~~~~~
src/data_foundation/ingest/yahoo_ingest.py:38: error: Returning Any from
function declared to return "DataFrame"  [no-any-return]
        return pd.concat(frames, ignore_index=True)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/data_foundation/ingest/yahoo_ingest.py:69: error: "DuckDBPyConnection" has
no attribute "register"  [attr-defined]
        con.register("tmp_df", df)
        ^~~~~~~~~~~~
src/data_foundation/ingest/yahoo_ingest.py:72: error: "DuckDBPyConnection" has
no attribute "close"  [attr-defined]
        con.close()
        ^~~~~~~~~
src/data_foundation/ingest/yahoo_ingest.py:75: error: Function is missing a
return type annotation  [no-untyped-def]
    def main():
    ^
src/phase2d_integration_validator.py:54: error: Explicit "Any" is not allowed 
[explicit-any]
        async def test_real_data_flow(self) -> Dict[str, Any]:
        ^
src/phase2d_integration_validator.py:67: error: Explicit "Any" is not allowed 
[explicit-any]
        async def test_strategy_performance_tracking(self) -> Dict[str, An...
        ^
src/phase2d_integration_validator.py:80: error: Explicit "Any" is not allowed 
[explicit-any]
        async def test_concurrent_operations(self) -> Dict[str, Any]:
        ^
src/phase2d_integration_validator.py:93: error: Explicit "Any" is not allowed 
[explicit-any]
        async def run_all_tests(self) -> List[Dict[str, Any]]:
        ^
src/validation/phase2c_validation_suite.py:27: error: Function is missing a
return type annotation  [no-untyped-def]
        def __init__(self):
        ^
src/validation/phase2c_validation_suite.py:27: note: Use "-> None" if function does not return a value
src/validation/phase2c_validation_suite.py:31: error: Explicit "Any" is not
allowed  [explicit-any]
        async def run_phase2c_week3a(self) -> Dict[str, Any]:
        ^
src/validation/phase2c_validation_suite.py:67: error: Explicit "Any" is not
allowed  [explicit-any]
        async def run_phase2c_week3b(self) -> Dict[str, Any]:
        ^
src/validation/phase2c_validation_suite.py:84: error: "Sequence[str]" has no
attribute "append"  [attr-defined]
            accuracy_results['tests'].append(anomaly_result.to_dict())
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/validation/phase2c_validation_suite.py:88: error: "Sequence[str]" has no
attribute "append"  [attr-defined]
            accuracy_results['tests'].append(regime_result.to_dict())
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/validation/phase2c_validation_suite.py:92: error: "Sequence[str]" has no
attribute "append"  [attr-defined]
            accuracy_results['tests'].append(performance_result.to_dict())
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/validation/phase2c_validation_suite.py:95: error: Generator has
incompatible item type "int"; expected "bool"  [misc]
            passed = sum(1 for test in accuracy_results['tests'] if test['...
                         ^
src/validation/phase2c_validation_suite.py:95: error: Invalid index type "str"
for "str"; expected type "SupportsIndex | slice[Any, Any, Any]"  [index]
    ...assed = sum(1 for test in accuracy_results['tests'] if test['passed'])
                                                                   ^~~~~~~~
src/validation/phase2c_validation_suite.py:98: error: Incompatible types in
assignment (expression has type "dict[str, float | int | str]", target has type
"Sequence[str]")  [assignment]
            accuracy_results['summary'] = {
                                          ^
src/validation/phase2c_validation_suite.py:112: error: Explicit "Any" is not
allowed  [explicit-any]
        async def run_comprehensive_phase2c(self) -> Dict[str, Any]:
        ^
src/validation/phase2c_validation_suite.py:149: error: Function is missing a
return type annotation  [no-untyped-def]
        def print_comprehensive_report(self, report: Dict[str, Any]):
        ^
src/validation/phase2c_validation_suite.py:149: error: Explicit "Any" is not
allowed  [explicit-any]
        def print_comprehensive_report(self, report: Dict[str, Any]):
        ^
src/validation/phase2c_validation_suite.py:180: error: Function is missing a
return type annotation  [no-untyped-def]
    async def main():
    ^
src/validation/phase2c_validation_suite.py:180: note: Use "-> None" if function does not return a value
src/trading/portfolio/real_portfolio_monitor.py:12: error: Module
"src.trading.models" has no attribute "PortfolioSnapshot"  [attr-defined]
    from ..models import PortfolioSnapshot, Position
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/trading/portfolio/real_portfolio_monitor.py:104: error: Unexpected keyword
argument "status" for "Position"  [call-arg]
                    position = Position(
                               ^
src/trading/models/position.py:46: note: "Position" defined here
src/trading/portfolio/real_portfolio_monitor.py:104: error: Unexpected keyword
argument "stop_loss" for "Position"  [call-arg]
                    position = Position(
                               ^
src/trading/portfolio/real_portfolio_monitor.py:104: error: Unexpected keyword
argument "take_profit" for "Position"  [call-arg]
                    position = Position(
                               ^
src/trading/portfolio/real_portfolio_monitor.py:104: error: Unexpected keyword
argument "entry_time" for "Position"; did you mean "entry_price"?  [call-arg]
                    position = Position(
                               ^
src/trading/portfolio/real_portfolio_monitor.py:104: error: Unexpected keyword
argument "exit_time" for "Position"  [call-arg]
                    position = Position(
                               ^
src/trading/portfolio/real_portfolio_monitor.py:150: error: "Position" has no
attribute "status"  [attr-defined]
                    position.status.value,
                    ^~~~~~~~~~~~~~~
src/trading/portfolio/real_portfolio_monitor.py:151: error: "Position" has no
attribute "stop_loss"  [attr-defined]
                    position.stop_loss,
                    ^~~~~~~~~~~~~~~~~~
src/trading/portfolio/real_portfolio_monitor.py:152: error: "Position" has no
attribute "take_profit"  [attr-defined]
                    position.take_profit,
                    ^~~~~~~~~~~~~~~~~~~~
src/trading/portfolio/real_portfolio_monitor.py:153: error: "Position" has no
attribute "entry_time"; maybe "entry_price"?  [attr-defined]
                    position.entry_time.isoformat(),
                    ^~~~~~~~~~~~~~~~~~~
src/trading/portfolio/real_portfolio_monitor.py:162: error: Invalid index type
"str | int | None" for "dict[str, Position]"; expected type "str"  [index]
                self._position_cache[position.position_id] = position
                                     ^~~~~~~~~~~~~~~~~~~~
src/trading/portfolio/real_portfolio_monitor.py:251: error: "Position" has no
attribute "close"  [attr-defined]
                    self._position_cache[position_id].close(exit_price, ex...
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/trading/portfolio/real_portfolio_monitor.py:334: error: Missing positional
arguments "daily_returns", "volatility", "sortino_ratio", "var_95", "cvar_95",
"avg_win", "avg_loss", "avg_trade_duration", "strategy_performance",
"regime_performance", "correlation_matrix", "start_date", "end_date",
"last_updated" in call to "PerformanceMetrics"  [call-arg]
                    return PerformanceMetrics(
                           ^
src/trading/portfolio/real_portfolio_monitor.py:419: error: Missing positional
arguments "daily_returns", "volatility", "sortino_ratio", "var_95", "cvar_95",
"avg_win", "avg_loss", "avg_trade_duration", "strategy_performance",
"regime_performance", "correlation_matrix", "start_date", "end_date",
"last_updated" in call to "PerformanceMetrics"  [call-arg]
                return PerformanceMetrics(
                       ^
src/trading/portfolio/real_portfolio_monitor.py:433: error: Missing positional
arguments "daily_returns", "volatility", "sortino_ratio", "var_95", "cvar_95",
"avg_win", "avg_loss", "avg_trade_duration", "strategy_performance",
"regime_performance", "correlation_matrix", "start_date", "end_date",
"last_updated" in call to "PerformanceMetrics"  [call-arg]
                return PerformanceMetrics(
                       ^
src/trading/portfolio/real_portfolio_monitor.py:460: error: Unexpected keyword
argument "status" for "Position"  [call-arg]
                    position = Position(
                               ^
src/trading/portfolio/real_portfolio_monitor.py:460: error: Unexpected keyword
argument "stop_loss" for "Position"  [call-arg]
                    position = Position(
                               ^
src/trading/portfolio/real_portfolio_monitor.py:460: error: Unexpected keyword
argument "take_profit" for "Position"  [call-arg]
                    position = Position(
                               ^
src/trading/portfolio/real_portfolio_monitor.py:460: error: Unexpected keyword
argument "entry_time" for "Position"; did you mean "entry_price"?  [call-arg]
                    position = Position(
                               ^
src/trading/portfolio/real_portfolio_monitor.py:460: error: Unexpected keyword
argument "exit_time" for "Position"  [call-arg]
                    position = Position(
                               ^
src/thinking/thinking_manager.py:32: error: Need type annotation for
"market_data_buffer"  [var-annotated]
            self.market_data_buffer = deque(maxlen=100)  # Rolling buffer ...
                                      ^~~~~~~~~~~~~~~~~
src/thinking/thinking_manager.py:37: error: Function is missing a return type
annotation  [no-untyped-def]
        def _initialize_predictive_modeler(self):
        ^
src/thinking/thinking_manager.py:37: note: Use "-> None" if function does not return a value
src/thinking/thinking_manager.py:46: error: Explicit "Any" is not allowed 
[explicit-any]
        async def on_market_understanding(self, market_data: Dict[str, Any...
        ^
src/thinking/thinking_manager.py:94: error: Explicit "Any" is not allowed 
[explicit-any]
        def _calculate_risk_metrics(self, market_data: Dict[str, Any]) -> ...
        ^
src/thinking/thinking_manager.py:111: error: Explicit "Any" is not allowed 
[explicit-any]
                    val: Optional[Any] = item.get("close") if "close" in i...
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/thinking/thinking_manager.py:140: error: Explicit "Any" is not allowed 
[explicit-any]
        def get_model_info(self) -> Dict[str, Any]:
        ^
src/thinking/thinking_manager.py:154: error: Function is missing a return type
annotation  [no-untyped-def]
        async def test_thinking_manager():
        ^
src/thinking/thinking_manager.py:154: note: Use "-> None" if function does not return a value
src/thinking/analysis/market_analyzer.py:13: error: Module
"src.core.interfaces" has no attribute "ThinkingPattern"  [attr-defined]
        from src.core.interfaces import ThinkingPattern, SensorySignal, An...
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/thinking/analysis/market_analyzer.py:13: error: Module
"src.core.interfaces" has no attribute "SensorySignal"  [attr-defined]
        from src.core.interfaces import ThinkingPattern, SensorySignal, An...
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/thinking/analysis/market_analyzer.py:13: error: Module
"src.core.interfaces" has no attribute "AnalysisResult"  [attr-defined]
        from src.core.interfaces import ThinkingPattern, SensorySignal, An...
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/thinking/analysis/market_analyzer.py:15: error: Unused "type: ignore"
comment  [unused-ignore]
        ThinkingPattern = SensorySignal = AnalysisResult = object  # type:...
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/thinking/analysis/market_analyzer.py:16: error: Module
"src.core.exceptions" has no attribute "ThinkingException"; maybe
"TradingException"?  [attr-defined]
    from src.core.exceptions import ThinkingException
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/thinking/analysis/market_analyzer.py:23: error: Class cannot subclass
"ThinkingPattern" (has type "Any")  [misc]
    class MarketAnalyzer(ThinkingPattern):
                         ^~~~~~~~~~~~~~~
src/thinking/analysis/market_analyzer.py:26: error: Explicit "Any" is not
allowed  [explicit-any]
        def __init__(self, config: Optional[Dict[str, Any]] = None):
        ^
src/thinking/analysis/market_analyzer.py:67: error: Explicit "Any" is not
allowed  [explicit-any]
        def learn(self, feedback: Dict[str, Any]) -> bool:
        ^
src/thinking/analysis/market_analyzer.py:71: error: "PerformanceAnalyzer" has
no attribute "learn"  [attr-defined]
                performance_learned = self.performance_analyzer.learn(feed...
                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/thinking/analysis/market_analyzer.py:72: error: "RiskAnalyzer" has no
attribute "learn"  [attr-defined]
                risk_learned = self.risk_analyzer.learn(feedback)
                               ^~~~~~~~~~~~~~~~~~~~~~~~
src/thinking/analysis/market_analyzer.py:75: error: Returning Any from function
declared to return "bool"  [no-any-return]
                return performance_learned and risk_learned
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/thinking/analysis/market_analyzer.py:81: error: Explicit "Any" is not
allowed  [explicit-any]
        def _combine_analysis_results(self, performance_result: AnalysisRe...
        ^
src/thinking/analysis/market_analyzer.py:106: error: Explicit "Any" is not
allowed  [explicit-any]
        def _calculate_market_sentiment(self, signals: List[SensorySignal]...
        ^
src/thinking/analysis/market_analyzer.py:126: error: Name "np" is not defined 
[name-defined]
                confidence = np.mean(confidences)
                             ^~
src/thinking/analysis/market_analyzer.py:137: error: Explicit "Any" is not
allowed  [explicit-any]
        def _calculate_market_health(self, performance_metrics: Dict[str, ...
        ^
src/thinking/analysis/market_analyzer.py:162: error: Explicit "Any" is not
allowed  [explicit-any]
        def _assess_trading_opportunity(self, performance_metrics: Dict[st...
        ^
src/thinking/analysis/market_analyzer.py:201: error: Explicit "Any" is not
allowed  [explicit-any]
        def _assess_risk_level(self, risk_metrics: Dict[str, Any]) -> Dict...
        ^
src/thinking/analysis/market_analyzer.py:223: error: Explicit "Any" is not
allowed  [explicit-any]
        def _assess_signal_quality(self, signals: List[SensorySignal]) -> ...
        ^
src/thinking/analysis/market_analyzer.py:235: error: Name "np" is not defined 
[name-defined]
            average_confidence = np.mean(confidences)
                                 ^~
src/thinking/analysis/market_analyzer.py:263: error: Returning Any from
function declared to return "float"  [no-any-return]
            return (performance_confidence + risk_confidence) / 2.0
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/thinking/analysis/market_analyzer.py:298: error: Explicit "Any" is not
allowed  [explicit-any]
        def _generate_risk_warnings(self, risk_metrics: Dict[str, Any]) ->...
        ^
src/sensory/organs/dimensions/pattern_engine.py:36: error: Explicit "Any" is
not allowed  [explicit-any]
    class PatternSynthesis:
    ^~~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/dimensions/pattern_engine.py:38: error: Explicit "Any" is
not allowed  [explicit-any]
        fractal_patterns: List[Dict[str, Any]]
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/dimensions/pattern_engine.py:39: error: Explicit "Any" is
not allowed  [explicit-any]
        harmonic_patterns: List[Dict[str, Any]]
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/dimensions/pattern_engine.py:40: error: Explicit "Any" is
not allowed  [explicit-any]
        volume_profile: Dict[str, Any]
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/dimensions/pattern_engine.py:41: error: Explicit "Any" is
not allowed  [explicit-any]
        price_action_dna: Dict[str, Any]
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/dimensions/pattern_engine.py:103: error: Function is missing
a return type annotation  [no-untyped-def]
        def __init__(self):
        ^
src/sensory/organs/dimensions/pattern_engine.py:103: note: Use "-> None" if function does not return a value
src/sensory/organs/dimensions/pattern_engine.py:160: error: Explicit "Any" is
not allowed  [explicit-any]
        def _fractal_to_dict(self, fractal: FractalPattern) -> Dict[str, A...
        ^
src/sensory/organs/dimensions/pattern_engine.py:174: error: Explicit "Any" is
not allowed  [explicit-any]
        def _harmonic_to_dict(self, harmonic: HarmonicPattern) -> Dict[str...
        ^
src/sensory/organs/dimensions/pattern_engine.py:186: error: Explicit "Any" is
not allowed  [explicit-any]
        def _volume_to_dict(self, volume: VolumeProfile) -> Dict[str, Any]...
        ^
src/sensory/organs/dimensions/pattern_engine.py:197: error: Explicit "Any" is
not allowed  [explicit-any]
        def _dna_to_dict(self, dna: PriceActionDNA) -> Dict[str, Any]:
        ^
src/sensory/organs/dimensions/pattern_engine.py:208: error: Missing type
parameters for generic type "List"  [type-arg]
        def _calculate_confidence(self, fractals: List, harmonics: List, v...
                                                  ^
src/sensory/organs/dimensions/pattern_engine.py:321: error: Missing type
parameters for generic type "Dict"  [type-arg]
    ... _identify_significant_swings(self, data: pd.DataFrame) -> List[Dict]:
                                                                       ^
src/sensory/organs/dimensions/pattern_engine.py:325: error: Missing type
parameters for generic type "Dict"  [type-arg]
        def _calculate_fibonacci_levels(self, swing: Dict) -> List[float]:
                                                     ^
src/sensory/organs/dimensions/pattern_engine.py:329: error: Missing type
parameters for generic type "Dict"  [type-arg]
    ...f _identify_significant_moves(self, data: pd.DataFrame) -> List[Dict]:
                                                                       ^
src/sensory/organs/dimensions/pattern_engine.py:333: error: Missing type
parameters for generic type "Dict"  [type-arg]
        def _calculate_extension_levels(self, move: Dict) -> List[float]:
                                                    ^
src/sensory/organs/dimensions/pattern_engine.py:337: error: Missing type
parameters for generic type "List"  [type-arg]
    ...lliott_sequence(self, data: pd.DataFrame, highs: List, lows: List) -> ...
                                                        ^
src/sensory/organs/dimensions/pattern_engine.py:494: error: Missing type
parameters for generic type "Dict"  [type-arg]
        def _find_xabcd_patterns(self, data: pd.DataFrame) -> List[Dict]:
                                                                   ^
src/sensory/organs/dimensions/pattern_engine.py:530: error: Function is missing
a type annotation for one or more arguments  [no-untyped-def]
        def _calculate_harmonic_ratios(self, x, a, b, c, d) -> Dict[str, f...
        ^
src/sensory/organs/dimensions/pattern_engine.py:550: error: Missing type
parameters for generic type "Dict"  [type-arg]
        def _validate_gartley_ratios(self, pattern: Dict) -> bool:
                                                    ^
src/sensory/organs/dimensions/pattern_engine.py:555: error: Returning Any from
function declared to return "bool"  [no-any-return]
            return (
            ^
src/sensory/organs/dimensions/pattern_engine.py:562: error: Missing type
parameters for generic type "Dict"  [type-arg]
        def _validate_butterfly_ratios(self, pattern: Dict) -> bool:
                                                      ^
src/sensory/organs/dimensions/pattern_engine.py:567: error: Returning Any from
function declared to return "bool"  [no-any-return]
            return (
            ^
src/sensory/organs/dimensions/pattern_engine.py:574: error: Missing type
parameters for generic type "Dict"  [type-arg]
        def _validate_crab_ratios(self, pattern: Dict) -> bool:
                                                 ^
src/sensory/organs/dimensions/pattern_engine.py:579: error: Returning Any from
function declared to return "bool"  [no-any-return]
            return (
            ^
src/sensory/organs/dimensions/pattern_engine.py:586: error: Missing type
parameters for generic type "Dict"  [type-arg]
        def _validate_bat_ratios(self, pattern: Dict) -> bool:
                                                ^
src/sensory/organs/dimensions/pattern_engine.py:591: error: Returning Any from
function declared to return "bool"  [no-any-return]
            return (
            ^
src/sensory/organs/dimensions/pattern_engine.py:644: error: Incompatible types
in assignment (expression has type "float", variable has type "int") 
[assignment]
                    cumulative_volume += volume
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/dimensions/pattern_engine.py:804: error: Returning Any from
function declared to return "float"  [no-any-return]
            return quality
            ^~~~~~~~~~~~~~
src/sensory/organs/dimensions/pattern_engine.py:811: error: Function is missing
a return type annotation  [no-untyped-def]
        def __init__(self):
        ^
src/sensory/organs/dimensions/pattern_engine.py:811: note: Use "-> None" if function does not return a value
src/sensory/organs/dimensions/pattern_engine.py:814: error: Explicit "Any" is
not allowed  [explicit-any]
        async def analyze(self, market_data: pd.DataFrame) -> Dict[str, An...
        ^
src/ecosystem/optimization/ecosystem_optimizer.py:76: error: Return type
"Coroutine[Any, Any, dict[str, list[src.genome.models.genome.DecisionGenome]]]"
of "optimize_ecosystem" incompatible with return type
"Coroutine[Any, Any, Mapping[str, Sequence[src.core.interfaces.DecisionGenome]]]"
in supertype "src.core.interfaces.IEcosystemOptimizer"  [override]
        async def optimize_ecosystem(
        ^
src/ecosystem/optimization/ecosystem_optimizer.py:78: error: Argument 1 of
"optimize_ecosystem" is incompatible with supertype
"src.core.interfaces.IEcosystemOptimizer"; supertype defines the argument type
as "Mapping[str, Sequence[DecisionGenome]]"  [override]
            species_populations: Dict[str, List[CanonDecisionGenome]],
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/ecosystem/optimization/ecosystem_optimizer.py:78: note: This violates the Liskov substitution principle
src/ecosystem/optimization/ecosystem_optimizer.py:78: note: See https://mypy.readthedocs.io/en/stable/common_issues.html#incompatible-overrides
src/ecosystem/optimization/ecosystem_optimizer.py:201: error: Incompatible
types in assignment (expression has type "DecisionGenome | None", variable has
type "DecisionGenome")  [assignment]
                    child = scored_population[0][1] if scored_population e...
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/ecosystem/optimization/ecosystem_optimizer.py:440: error: Unused
"type: ignore" comment  [unused-ignore]
                return adapt_to_canonical(genome)  # type: ignore[arg-type...
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/ecosystem/optimization/ecosystem_optimizer.py:520: error: Function is
missing a type annotation for one or more arguments  [no-untyped-def]
        def _calculate_regime_bonus(self, market_regime: str) -> float:
        ^
src/ecosystem/optimization/ecosystem_optimizer.py:531: error: Function is
missing a type annotation for one or more arguments  [no-untyped-def]
        def _calculate_adaptability_score(self, genome, market_data) -> fl...
        ^
src/ecosystem/optimization/ecosystem_optimizer.py:546: error: Returning Any
from function declared to return "float"  [no-any-return]
            return adaptability
            ^~~~~~~~~~~~~~~~~~~
src/sensory/what/patterns/orchestrator.py:25: error: Explicit "Any" is not
allowed  [explicit-any]
        async def analyze(self, market_data: pd.DataFrame) -> Dict[str, An...
        ^
src/thinking/ecosystem/specialized_predator_evolution.py:33: error: Module
"src.ecosystem.species.species_manager" has no attribute "SpeciesManager" 
[attr-defined]
    from src.ecosystem.species.species_manager import (
    ^
src/ecosystem/evolution/specialized_predator_evolution.py:40: error: Explicit
"Any" is not allowed  [explicit-any]
            self.species_manager = cast(Any, SpeciesManager)()
                                   ^
src/ecosystem/evolution/specialized_predator_evolution.py:43: error: Explicit
"Any" is not allowed  [explicit-any]
            self._history: List[Dict[str, Any]] = []
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/ecosystem/evolution/specialized_predator_evolution.py:51: error: Explicit
"Any" is not allowed  [explicit-any]
        async def evolve_specialized_predators(self) -> Dict[str, Any]:
        ^
src/ecosystem/evolution/specialized_predator_evolution.py:78: error: Explicit
"Any" is not allowed  [explicit-any]
            specialists: Dict[str, Any] = {}
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/ecosystem/evolution/specialized_predator_evolution.py:102: error: Unused
"type: ignore" comment  [unused-ignore]
                optimization = await self.ecosystem_optimizer.get_ecosyste...
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/ecosystem/evolution/specialized_predator_evolution.py:120: error: Explicit
"Any" is not allowed  [explicit-any]
        def get_ecosystem_stats(self) -> Dict[str, Any]:
        ^
src/ecosystem/evolution/specialized_predator_evolution.py:126: error: Explicit
"Any" is not allowed  [explicit-any]
        async def _evolve_specialist(self, niche: Any) -> Dict[str, Any]:
        ^
src/ecosystem/evolution/specialized_predator_evolution.py:135: error: Unused
"type: ignore" comment  [unused-ignore]
                evolved_obj = await self.species_manager.evolve_specialist...
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/ecosystem/evolution/specialized_predator_evolution.py:151: error: Explicit
"Any" is not allowed  [explicit-any]
        async def _get_market_data(self) -> Dict[str, Any]:
        ^
src/ecosystem/evolution/specialized_predator_evolution.py:160: error: Explicit
"Any" is not allowed  [explicit-any]
        async def _get_historical_analysis(self) -> Dict[str, Any]:
        ^
src/thinking/phase3_orchestrator.py:51: error: Explicit "Any" is not allowed 
[explicit-any]
        async def predict_market_scenarios(
        ^
src/thinking/phase3_orchestrator.py:72: error: Explicit "Any" is not allowed 
[explicit-any]
        async def attack_strategy(self, target_strategy: str) -> Dict[str,...
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/thinking/phase3_orchestrator.py:121: error: Explicit "Any" is not allowed 
[explicit-any]
            self.performance_metrics: Dict[str, Any] = {}
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/thinking/phase3_orchestrator.py:215: error: Explicit "Any" is not allowed 
[explicit-any]
        async def run_full_analysis(self) -> Dict[str, Any]:
        ^
src/thinking/phase3_orchestrator.py:221: error: Explicit "Any" is not allowed 
[explicit-any]
                results: Dict[str, Any] = {
                ^
src/thinking/phase3_orchestrator.py:253: error: Incompatible types in
assignment (expression has type "datetime", variable has type "None") 
[assignment]
                self.last_full_analysis = analysis_start
                                          ^~~~~~~~~~~~~~
src/thinking/phase3_orchestrator.py:262: error: Explicit "Any" is not allowed 
[explicit-any]
        async def _run_sentient_analysis(self) -> Dict[str, Any]:
        ^
src/thinking/phase3_orchestrator.py:286: error: Explicit "Any" is not allowed 
[explicit-any]
        async def _run_predictive_analysis(self) -> Dict[str, Any]:
        ^
src/thinking/phase3_orchestrator.py:312: error: Explicit "Any" is not allowed 
[explicit-any]
        async def _run_adversarial_analysis(self) -> Dict[str, Any]:
        ^
src/thinking/phase3_orchestrator.py:328: error: Statement is unreachable 
[unreachable]
                elif isinstance(gan_results, dict):
                ^
src/thinking/phase3_orchestrator.py:368: error: Explicit "Any" is not allowed 
[explicit-any]
        async def _run_specialized_analysis(self) -> Dict[str, Any]:
        ^
src/thinking/phase3_orchestrator.py:371: error: Explicit "Any" is not allowed 
[explicit-any]
                result: Dict[str, Any] = {'status': 'ok', 'modules': 0}
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/thinking/phase3_orchestrator.py:394: error: Explicit "Any" is not allowed 
[explicit-any]
        async def _run_competitive_analysis(self) -> Dict[str, Any]:
        ^
src/thinking/phase3_orchestrator.py:397: error: Explicit "Any" is not allowed 
[explicit-any]
                result: Dict[str, Any] = {'competitors_analyzed': 0, 'thre...
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/thinking/phase3_orchestrator.py:421: error: Explicit "Any" is not allowed 
[explicit-any]
        async def _calculate_overall_metrics(self, results: Dict[str, Any]...
        ^
src/thinking/phase3_orchestrator.py:464: error: Explicit "Any" is not allowed 
[explicit-any]
        async def _store_analysis_results(self, results: Dict[str, Any]) -...
        ^
src/thinking/phase3_orchestrator.py:482: error: Unused "type: ignore" comment 
[unused-ignore]
                            setter('phase3:last_full_analysis', payload)  ...
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/thinking/phase3_orchestrator.py:489: error: Explicit "Any" is not allowed 
[explicit-any]
        async def _get_current_market_state(self) -> Dict[str, Any]:
        ^
src/thinking/phase3_orchestrator.py:514: error: Statement is unreachable 
[unreachable]
                            metrics['last_full_analysis_age_sec'] = max(
                            ^
src/sensory/what/what_sensor.py:38: error: Missing type parameters for generic
type "dict"  [type-arg]
            patterns: dict = {}
                      ^
src/sensory/organs/dimensions/what_organ.py:32: error: Explicit "Any" is not
allowed  [explicit-any]
        def __init__(self, config: Optional[Dict[str, Any]] = None):
        ^
src/sensory/organs/dimensions/what_organ.py:38: error: Cannot find
implementation or library stub for module named
"src.sensory.organs.dimensions.price_action"  [import-not-found]
                from .price_action import PriceActionAnalyzer
    ^
src/sensory/organs/dimensions/what_organ.py:50: error: Explicit "Any" is not
allowed  [explicit-any]
        def analyze_market_data(self, market_data: List[MarketData], 
        ^
src/sensory/organs/dimensions/what_organ.py:92: error: Explicit "Any" is not
allowed  [explicit-any]
                        patterns: Dict[str, Any] = {}
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/dimensions/what_organ.py:108: error: Explicit "Any" is not
allowed  [explicit-any]
        def analyze_technical_reality(self, market_data: List[MarketData],...
        ^
src/sensory/organs/dimensions/what_organ.py:171: error: Explicit "Any" is not
allowed  [explicit-any]
        def _analyze_price_action(self, df: pd.DataFrame) -> Dict[str, Any...
        ^
src/sensory/organs/dimensions/what_organ.py:177: error: Returning Any from
function declared to return "dict[str, Any]"  [no-any-return]
                return self.price_action.update_market_data(df)
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/dimensions/what_organ.py:182: error: Explicit "Any" is not
allowed  [explicit-any]
        def _analyze_technical_reality(self, df: pd.DataFrame) -> Dict[str...
        ^
src/sensory/organs/dimensions/what_organ.py:195: error: Explicit "Any" is not
allowed  [explicit-any]
        def _analyze_market_structure(self, df: pd.DataFrame) -> Dict[str,...
        ^
src/sensory/organs/dimensions/what_organ.py:206: error: Unsupported operand
types for > ("Series[type[object]]" and "int")  [operator]
                higher_highs = (highs.diff() > 0).sum()
                                               ^
src/sensory/organs/dimensions/what_organ.py:207: error: Unsupported operand
types for > ("Series[type[object]]" and "int")  [operator]
                higher_lows = (lows.diff() > 0).sum()
                                             ^
src/sensory/organs/dimensions/what_organ.py:208: error: Unsupported operand
types for < ("Series[type[object]]" and "int")  [operator]
                lower_highs = (highs.diff() < 0).sum()
                                              ^
src/sensory/organs/dimensions/what_organ.py:209: error: Unsupported operand
types for < ("Series[type[object]]" and "int")  [operator]
                lower_lows = (lows.diff() < 0).sum()
                                            ^
src/sensory/organs/dimensions/what_organ.py:238: error: Returning Any from
function declared to return "dict[str, list[float]]"  [no-any-return]
                return self.price_action._identify_support_resistance(df)
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/dimensions/what_organ.py:249: error: Returning Any from
function declared to return "float"  [no-any-return]
                return self.price_action.get_price_action_score(df)
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/dimensions/what_organ.py:324: error: Unsupported operand
types for > ("Series[type[object]]" and "int")  [operator]
                higher_highs = (highs.diff() > 0).sum()
                                               ^
src/sensory/organs/dimensions/what_organ.py:325: error: Unsupported operand
types for > ("Series[type[object]]" and "int")  [operator]
                higher_lows = (lows.diff() > 0).sum()
                                             ^
src/sensory/organs/dimensions/what_organ.py:326: error: Unsupported operand
types for < ("Series[type[object]]" and "int")  [operator]
                lower_highs = (highs.diff() < 0).sum()
                                              ^
src/sensory/organs/dimensions/what_organ.py:327: error: Unsupported operand
types for < ("Series[type[object]]" and "int")  [operator]
                lower_lows = (lows.diff() < 0).sum()
                                            ^
src/sensory/organs/dimensions/what_organ.py:338: error: Returning Any from
function declared to return "float"  [no-any-return]
                return min(max(consistency, 0.0), 1.0)
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/dimensions/what_organ.py:344: error: Explicit "Any" is not
allowed  [explicit-any]
        def _calculate_signal_strength(self, analysis: Dict[str, Any]) -> ...
        ^
src/sensory/organs/dimensions/what_organ.py:353: error: Returning Any from
function declared to return "float"  [no-any-return]
                return min(max(signal_strength, -1.0), 1.0)
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/dimensions/what_organ.py:359: error: Explicit "Any" is not
allowed  [explicit-any]
        def _calculate_confidence(self, analysis: Dict[str, Any]) -> float...
        ^
src/sensory/organs/dimensions/what_organ.py:370: error: Returning Any from
function declared to return "float"  [no-any-return]
                return min(max(base_confidence, 0.0), 1.0)
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/sensory/organs/dimensions/what_organ.py:389: error: "MarketData" has no
attribute "spread"  [attr-defined]
                    'spread': md.spread,
                              ^~~~~~~~~
src/sensory/organs/dimensions/what_organ.py:390: error: "MarketData" has no
attribute "mid_price"  [attr-defined]
                    'mid_price': md.mid_price
                                 ^~~~~~~~~~~~
src/validation/validation_framework.py:27: error: Function is missing a return
type annotation  [no-untyped-def]
        def __init__(self):
        ^
src/validation/validation_framework.py:27: note: Use "-> None" if function does not return a value
src/validation/validation_framework.py:28: error: Missing type parameters for
generic type "Callable"  [type-arg]
            self.validators: Dict[str, Callable] = {}
                                       ^
src/validation/validation_framework.py:56: error: Missing positional arguments
"strategy_id", "symbols", "params" in call to "MovingAverageStrategy" 
[call-arg]
                    strategy = MovingAverageStrategy()
                               ^~~~~~~~~~~~~~~~~~~~~~~
src/validation/validation_framework.py:341: error: Explicit "Any" is not
allowed  [explicit-any]
        async def run_comprehensive_validation(self) -> Dict[str, Any]:
        ^
src/validation/validation_framework.py:387: error: Explicit "Any" is not
allowed  [explicit-any]
        def print_report(self, report: Dict[str, Any]) -> None:
        ^
src/validation/validation_framework.py:412: error: Function is missing a return
type annotation  [no-untyped-def]
    async def main():
    ^
src/validation/validation_framework.py:412: note: Use "-> None" if function does not return a value
Found 1674 errors in 187 files (checked 341 source files)
