from __future__ import annotations

from typing import Sequence, Any
import numpy as np
from numpy.typing import NDArray


class StandardScaler:
    def __init__(self, **kwargs: Any) -> None: ...
    def fit(self, X: NDArray[np.float64] | Sequence[Sequence[float]]) -> StandardScaler: ...
    def transform(self, X: NDArray[np.float64] | Sequence[Sequence[float]]) -> NDArray[np.float64]: ...
    def fit_transform(self, X: NDArray[np.float64] | Sequence[Sequence[float]]) -> NDArray[np.float64]: ...


class LabelEncoder:
    def __init__(self, **kwargs: Any) -> None: ...
    def fit(self, y: Sequence[Any]) -> LabelEncoder: ...
    def transform(self, y: Sequence[Any]) -> NDArray[np.int64]: ...
    def fit_transform(self, y: Sequence[Any]) -> NDArray[np.int64]: ...
    def inverse_transform(self, y: Sequence[int] | NDArray[np.int64]) -> list[Any]: ...