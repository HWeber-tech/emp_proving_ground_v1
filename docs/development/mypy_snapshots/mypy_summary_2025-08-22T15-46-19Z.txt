src/core/interfaces.py: note: In member "get" of class "Cache":
src/core/interfaces.py:20: error: Explicit "Any" is not allowed  [explicit-any]
        def get(self, key: str) -> Optional[Any]: ...
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/core/interfaces.py: note: In member "publish" of class "EventBus":
src/core/interfaces.py:31: error: Explicit "Any" is not allowed  [explicit-any]
        def publish(self, event: str, payload: Mapping[str, Any] | None = ...
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/core/interfaces.py: note: In member "get" of class "ConfigProvider":
src/core/interfaces.py:55: error: Explicit "Any" is not allowed  [explicit-any]
        def get(self, key: str, default: Any | None = ...) -> object: ...
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/core/interfaces.py: note: In member "evaluate_portfolio_risk" of class "RiskManager":
src/core/interfaces.py:64: error: Explicit "Any" is not allowed  [explicit-any]
        def evaluate_portfolio_risk(
        ^
src/core/interfaces.py: note: In member "propose_rebalance" of class "RiskManager":
src/core/interfaces.py:69: error: Explicit "Any" is not allowed  [explicit-any]
        def propose_rebalance(
        ^
src/core/interfaces.py: note: In member "initialize_population" of class "PopulationManager":
src/core/interfaces.py:94: error: Missing type parameters for generic type
"Callable"  [type-arg]
    ... def initialize_population(self, genome_factory: Callable) -> None: .....
                                                        ^
src/core/interfaces.py: note: In member "initialize_population" of class "IPopulationManager":
src/core/interfaces.py:111: error: Missing type parameters for generic type
"Callable"  [type-arg]
    ... def initialize_population(self, genome_factory: Callable) -> None:  #...
                                                        ^
src/core/interfaces.py: note: At top level:
src/core/interfaces.py:260: error: Name "RegimeClassifier" already defined
(possibly by an import)  [no-redef]
        class RegimeClassifier(Protocol):
        ^
src/core/instrument.py:132: error: Unused "type: ignore" comment 
[unused-ignore]
            return cls(**cast(InstrumentPayload, payload))  # type: ignore...
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~...
src/core/base.py:96: error: Unused "type: ignore" comment  [unused-ignore]
                    return float(x)  # type: ignore[arg-type]
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/core/base.py: note: In member "__init__" of class "MarketData":
src/core/base.py:100: error: Incompatible types in assignment (expression has
type "object", variable has type "float | int | str | None")  [assignment]
    ...   val_price: Optional[Union[float, int, str]] = kwargs.pop("price", N...
                                                        ^~~~~~~~~~~~~~~~~~~~~...
src/core/base.py:101: error: Incompatible types in assignment (expression has
type "object", variable has type "float | int | str | None")  [assignment]
    ...     val_bid: Optional[Union[float, int, str]] = kwargs.pop("bid", Non...
                                                        ^~~~~~~~~~~~~~~~~~~~~~~
src/core/base.py:102: error: Incompatible types in assignment (expression has
type "object", variable has type "float | int | str | None")  [assignment]
    ...     val_ask: Optional[Union[float, int, str]] = kwargs.pop("ask", Non...
                                                        ^~~~~~~~~~~~~~~~~~~~~~~
src/core/base.py:108: error: Incompatible types in assignment (expression has
type "object", variable has type "float | int | str | None")  [assignment]
    ...    close_in: Optional[Union[float, int, str]] = kwargs.pop("close", N...
                                                        ^~~~~~~~~~~~~~~~~~~~~...
src/core/base.py:117: error: Incompatible types in assignment (expression has
type "object", variable has type "float | int | str | None")  [assignment]
    ...     open_in: Optional[Union[float, int, str]] = kwargs.pop("open", No...
                                                        ^~~~~~~~~~~~~~~~~~~~~~~~
src/core/base.py:118: error: Incompatible types in assignment (expression has
type "object", variable has type "float | int | str | None")  [assignment]
    ...     high_in: Optional[Union[float, int, str]] = kwargs.pop("high", No...
                                                        ^~~~~~~~~~~~~~~~~~~~~~~~
src/core/base.py:119: error: Incompatible types in assignment (expression has
type "object", variable has type "float | int | str | None")  [assignment]
    ...      low_in: Optional[Union[float, int, str]] = kwargs.pop("low", Non...
                                                        ^~~~~~~~~~~~~~~~~~~~~~~
src/core/base.py:126: error: Argument 1 to "_to_float" has incompatible type
"object"; expected "float | int | str | None"  [arg-type]
            self.volume: float = _to_float(kwargs.pop("volume", None), def...
                                           ^~~~~~~~~~~~~~~~~~~~~~~~~~
src/core/strategy/engine.py: note: In member "generate_signal" of class "BaseStrategy":
src/core/strategy/engine.py:23: error: Function is missing a return type
annotation  [no-untyped-def]
        async def generate_signal(self, market_data, symbol: str):
        ^
src/core/strategy/engine.py:23: error: Function is missing a type annotation
for one or more arguments  [no-untyped-def]
        async def generate_signal(self, market_data, symbol: str):
        ^
src/trading/strategy_engine/__init__.py:6: error: Unused "type: ignore" comment
 [unused-ignore]
    from src.core.strategy.engine import StrategyEngine  # type: ignore
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/thinking/models/normalizers.py: note: In function "_to_float":
src/thinking/models/normalizers.py:21: error: Explicit "Any" is not allowed 
[explicit-any]
    def _to_float(value: Any, default: float = 0.0) -> float:
    ^
src/thinking/models/normalizers.py: note: At top level:
src/thinking/models/normalizers.py:23: error: Unused "type: ignore" comment 
[unused-ignore]
            return float(value)  # type: ignore[arg-type]
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/thinking/models/normalizers.py: note: In function "normalize_attack_report":
src/thinking/models/normalizers.py:95: error: Explicit "Any" is not allowed 
[explicit-any]
    def normalize_attack_report(a: Mapping[str, Any] | object) -> AttackRe...
    ^
src/thinking/models/normalizers.py:107: error: Explicit "Any" is not allowed 
[explicit-any]
        def _as_mapping(obj: object) -> Optional[Mapping[str, Any]]:
        ^
src/thinking/models/normalizers.py: note: At top level:
src/thinking/models/normalizers.py:113: error: Unused "type: ignore" comment 
[unused-ignore]
                    d = obj.dict()  # type: ignore[attr-defined]
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/operational/mock_fix.py: note: In member "__init__" of class "_MockTradeConnection":
src/operational/mock_fix.py:18: error: Explicit "Any" is not allowed 
[explicit-any]
        def __init__(self, order_cbs: List[Callable[[Any], None]]):
        ^
src/operational/mock_fix.py: note: In member "send_message_and_track" of class "_MockTradeConnection":
src/operational/mock_fix.py:21: error: Explicit "Any" is not allowed 
[explicit-any]
        def send_message_and_track(self, msg: Any) -> bool:
        ^
src/operational/mock_fix.py: note: In function "send_message_and_track":
src/operational/mock_fix.py:24: error: Function is missing a return type
annotation  [no-untyped-def]
                def _emit_reject():
                ^
src/operational/mock_fix.py:24: note: Use "-> None" if function does not return a value
src/operational/mock_fix.py:25: error: Explicit "Any" is not allowed 
[explicit-any]
                    info: Any = type("OrderInfo", (), {})()
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/operational/mock_fix.py:37: error: Function is missing a return type
annotation  [no-untyped-def]
                def _emit_cancel():
                ^
src/operational/mock_fix.py:37: note: Use "-> None" if function does not return a value
src/operational/mock_fix.py:38: error: Explicit "Any" is not allowed 
[explicit-any]
                    info: Any = type("OrderInfo", (), {})()
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/operational/mock_fix.py:50: error: Function is missing a return type
annotation  [no-untyped-def]
            def _emit_new():
            ^
src/operational/mock_fix.py:50: note: Use "-> None" if function does not return a value
src/operational/mock_fix.py:51: error: Explicit "Any" is not allowed 
[explicit-any]
                info: Any = type("OrderInfo", (), {})()
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/operational/mock_fix.py:59: error: Function is missing a return type
annotation  [no-untyped-def]
            def _emit_partial():
            ^
src/operational/mock_fix.py:59: note: Use "-> None" if function does not return a value
src/operational/mock_fix.py:61: error: Explicit "Any" is not allowed 
[explicit-any]
                info: Any = type("OrderInfo", (), {})()
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/operational/mock_fix.py:69: error: Function is missing a return type
annotation  [no-untyped-def]
            def _emit_fill():
            ^
src/operational/mock_fix.py:69: note: Use "-> None" if function does not return a value
src/operational/mock_fix.py:71: error: Explicit "Any" is not allowed 
[explicit-any]
                info: Any = type("OrderInfo", (), {})()
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/operational/mock_fix.py: note: In member "__init__" of class "MockFIXManager":
src/operational/mock_fix.py:86: error: Function is missing a return type
annotation  [no-untyped-def]
        def __init__(self):
        ^
src/operational/mock_fix.py:86: note: Use "-> None" if function does not return a value
src/operational/mock_fix.py:87: error: Explicit "Any" is not allowed 
[explicit-any]
            self._md_cbs: List[Callable[[str, Any], None]] = []
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/operational/mock_fix.py:88: error: Explicit "Any" is not allowed 
[explicit-any]
            self._order_cbs: List[Callable[[Any], None]] = []
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/operational/mock_fix.py: note: In member "add_market_data_callback" of class "MockFIXManager":
src/operational/mock_fix.py:92: error: Explicit "Any" is not allowed 
[explicit-any]
        def add_market_data_callback(self, cb: Callable[[str, Any], None])...
        ^
src/operational/mock_fix.py: note: In member "add_order_callback" of class "MockFIXManager":
src/operational/mock_fix.py:95: error: Explicit "Any" is not allowed 
[explicit-any]
        def add_order_callback(self, cb: Callable[[Any], None]) -> None:
        ^
src/operational/mock_fix.py: note: In function "start":
src/operational/mock_fix.py:101: error: Function is missing a return type
annotation  [no-untyped-def]
            def _emit_md_loop():
            ^
src/operational/mock_fix.py:101: note: Use "-> None" if function does not return a value
src/operational/mock_fix.py:104: error: Explicit "Any" is not allowed 
[explicit-any]
