version: '3.9'

x-engine-env: &engine-env
  EMP_ENV: production
  PYTHONPATH: /app
  PYTHONUNBUFFERED: '1'
  TIMESCALEDB_URL: postgresql+psycopg2://emp_user:emp_password@timescale:5432/emp_db
  TIMESCALEDB_APP: emp-engine
  REDIS_URL: redis://redis:6379/0
  REDIS_CLIENT_NAME: emp-engine
  KAFKA_BOOTSTRAP_SERVERS: kafka:9092
  KAFKA_CLIENT_ID: emp-engine

services:
  timescale:
    image: timescale/timescaledb:2.14.3-pg15
    container_name: hetzner-timescale
    environment:
      POSTGRES_DB: emp_db
      POSTGRES_USER: emp_user
      POSTGRES_PASSWORD: emp_password
      TIMESCALEDB_TELEMETRY: 'off'
    ports:
      - '5432:5432'
    volumes:
      - timescale_data:/var/lib/postgresql/data
      - ../../config/database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ['CMD', 'pg_isready', '-U', 'emp_user']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    command:
      - postgres
      - -c
      - listen_addresses=*
      - -c
      - max_connections=200
      - -c
      - shared_preload_libraries=timescaledb
      - -c
      - timescaledb.telemetry_level=off
    networks:
      - hetzner
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: hetzner-redis
    command: redis-server --appendonly yes
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - hetzner
    restart: unless-stopped

  kafka:
    image: bitnami/kafka:3.7
    container_name: hetzner-kafka
    ports:
      - '9094:9094'
    environment:
      KAFKA_CFG_NODE_ID: 0
      KAFKA_CFG_PROCESS_ROLES: broker,controller
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_CFG_LISTENERS: CONTROLLER://:9093,PLAINTEXT://:9092,EXTERNAL://:9094
      KAFKA_CFG_ADVERTISED_LISTENERS: CONTROLLER://hetzner-kafka:9093,PLAINTEXT://hetzner-kafka:9092,EXTERNAL://localhost:9094
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 0@hetzner-kafka:9093
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_CFG_NUM_PARTITIONS: 3
      KAFKA_CFG_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_ENABLE_KRAFT: 'yes'
      KAFKA_KRAFT_CLUSTER_ID: oZ4d5P7nTbm1lYvA6w9xBg
      KAFKA_BROKER_ID: 0
      ALLOW_PLAINTEXT_LISTENER: 'yes'
      BITNAMI_DEBUG: 'false'
    volumes:
      - kafka_data:/bitnami/kafka
    healthcheck:
      test:
        - CMD
        - /opt/bitnami/kafka/bin/kafka-topics.sh
        - --bootstrap-server
        - localhost:9092
        - --list
      interval: 15s
      timeout: 10s
      retries: 6
    networks:
      - hetzner
    restart: unless-stopped

  engine:
    build:
      context: ../..
      dockerfile: Dockerfile
      target: production
    container_name: hetzner-engine
    depends_on:
      timescale:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment: *engine-env
    ports:
      - '8000:8000'
    volumes:
      - ../../artifacts:/app/artifacts
      - ../../data:/app/data
      - ../../logs:/app/logs
      - ../../config:/app/config
    healthcheck:
      test: ['CMD', 'curl', '-fsS', 'http://localhost:8000/health']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    networks:
      - hetzner
    restart: unless-stopped

networks:
  hetzner:
    driver: bridge

volumes:
  timescale_data:
  redis_data:
  kafka_data:
