name: CI
on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  policy:
    uses: ./.github/workflows/forbidden-integrations.yml

  lint:
    runs-on: ubuntu-latest
    needs: [policy]
    steps:
      - uses: ./.github/actions/python-setup
      - name: Ruff (lint)
        run: ruff check .
      - name: Ruff (format)
        run: ruff format --check .

  types:
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
      - uses: ./.github/actions/python-setup
      - name: Guard single mypy source
        run: |
          set -euo pipefail
          if grep -n '^\[tool\.mypy\]' pyproject.toml >/dev/null 2>&1; then
            echo "[tool.mypy] found in pyproject.toml; use mypy.ini"; exit 1; fi
          test -f mypy.ini || { echo "mypy.ini missing"; exit 1; }
      - name: mypy
        env:
          MYPY_FORCE_COLOR: '1'
        run: mypy --config-file mypy.ini src
      - name: Upload typing snapshot
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: mypy-snapshot-${{ github.run_id }}
          path: .mypy_cache

  tests:
    runs-on: ubuntu-latest
    needs: [types]
    steps:
      - uses: ./.github/actions/python-setup
      - name: Pytest (coverage)
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: |
          set -euo pipefail
          pytest tests/current --cov=src --cov-report=term -q | tee pytest.log
      - name: Publish pytest summary
        if: always()
        run: |
          {
            echo "## Pytest summary";
            if [ -f pytest.log ]; then
              tail -n 40 pytest.log;
            else
              echo "pytest.log missing";
            fi
          } >> "$GITHUB_STEP_SUMMARY"
      - name: Upload pytest log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pytest-log-${{ github.run_id }}
          path: pytest.log
          if-no-files-found: ignore

  backtest:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/main'
    needs: [tests]
    steps:
      - uses: ./.github/actions/python-setup
      - name: Prepare fixtures
        run: |
          mkdir -p data/md_capture data/macro docs/reports/backtests
          printf '{"symbol":"EURUSD","timestamp":"2025-01-01T00:00:00","bids":[[1.1,1000000]],"asks":[[1.1002,1200000]]}\n' > data/md_capture/capture.jsonl
          printf '{"timestamp":"2025-01-01T00:30:00","event":"CPI","currency":"EUR"}\n' > data/macro/calendar.jsonl
      - name: Run backtest
        run: |
          set -euo pipefail
          python scripts/backtest_report.py --file data/md_capture/capture.jsonl --macro-file data/macro/calendar.jsonl --out-dir docs/reports/backtests
          if test -f docs/reports/backtests/why_features.csv; then
            python scripts/generate_html_report.py --csv docs/reports/backtests/why_features.csv --out docs/reports/backtests/WHY_FEATURES.html
          else
            echo "why_features.csv missing; skipping HTML."
          fi
      - uses: actions/upload-artifact@v4
        with:
          name: backtest-report
          path: docs/reports/backtests
