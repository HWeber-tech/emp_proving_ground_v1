# EMP Ultimate Architecture v1.1 - Docker Compose
# Development and testing environment

version: '3.8'

services:
  # Core EMP engine
  engine:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: emp-engine
    ports:
      - "8000:8000"
      - "8081:8081"
    environment:
      - EMP_ENV=development
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
      - TIMESCALEDB_URL=postgresql+psycopg2://emp_user:emp_password@timescaledb:5432/emp_db
      - TIMESCALEDB_APP=emp-dev-app
      - REDIS_URL=redis://redis:6379/0
      - REDIS_CLIENT_NAME=emp-dev-cache
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - KAFKA_CLIENT_ID=emp-dev-app
      - METRICS_EXPORTER_ENABLED=1
      - EMP_METRICS_PORT=8081
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./reports:/app/reports
      - ./config:/app/config
    depends_on:
      - timescaledb
      - redis
      - kafka
    networks:
      - emp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching and event bus
  redis:
    image: redis:7-alpine
    container_name: emp-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - emp-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # TimescaleDB instance for market data and journals
  timescaledb:
    image: timescale/timescaledb:2.14.3-pg15
    container_name: emp-timescaledb
    environment:
      POSTGRES_DB: emp_db
      POSTGRES_USER: emp_user
      POSTGRES_PASSWORD: emp_password
      TIMESCALEDB_TELEMETRY: 'off'
    ports:
      - "5432:5432"
    volumes:
      - timescaledb_data:/var/lib/postgresql/data
      - ./config/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - emp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "emp_user"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    command: [
      "postgres",
      "-c",
      "listen_addresses=*",
      "-c",
      "max_connections=200",
      "-c",
      "shared_preload_libraries=timescaledb",
      "-c",
      "timescaledb.telemetry_level=off"
    ]

  # Kafka for streaming ingest telemetry
  kafka:
    image: bitnami/kafka:3.7
    container_name: emp-kafka
    ports:
      - "9094:9094"
    environment:
      KAFKA_CFG_NODE_ID: 0
      KAFKA_CFG_PROCESS_ROLES: broker,controller
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_CFG_LISTENERS: CONTROLLER://:9093,PLAINTEXT://:9092,EXTERNAL://:9094
      KAFKA_CFG_ADVERTISED_LISTENERS: CONTROLLER://emp-kafka:9093,PLAINTEXT://emp-kafka:9092,EXTERNAL://localhost:9094
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 0@emp-kafka:9093
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_CFG_NUM_PARTITIONS: 3
      KAFKA_CFG_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_ENABLE_KRAFT: 'yes'
      KAFKA_KRAFT_CLUSTER_ID: oZ4d5P7nTbm1lYvA6w9xBg
      KAFKA_BROKER_ID: 0
      ALLOW_PLAINTEXT_LISTENER: 'yes'
      BITNAMI_DEBUG: 'false'
    volumes:
      - kafka_data:/bitnami/kafka
    healthcheck:
      test:
        - CMD
        - /opt/bitnami/kafka/bin/kafka-topics.sh
        - --bootstrap-server
        - localhost:9092
        - --list
      interval: 15s
      timeout: 10s
      retries: 6
    networks:
      - emp-network
    restart: unless-stopped

  redis-exporter:
    image: oliver006/redis_exporter:v1.58.0
    container_name: emp-redis-exporter
    command:
      - "--redis.addr=redis://redis:6379"
    ports:
      - "9121:9121"
    depends_on:
      - redis
    networks:
      - emp-network
    restart: unless-stopped

  timescaledb-exporter:
    image: quay.io/prometheuscommunity/postgres-exporter:v0.15.0
    container_name: emp-timescaledb-exporter
    environment:
      DATA_SOURCE_NAME: postgresql://emp_user:emp_password@timescaledb:5432/emp_db?sslmode=disable
    ports:
      - "9187:9187"
    depends_on:
      - timescaledb
    networks:
      - emp-network
    restart: unless-stopped

  kafka-exporter:
    image: danielqsj/kafka-exporter:v1.7.0
    container_name: emp-kafka-exporter
    command:
      - --kafka.server=kafka:9092
    ports:
      - "9308:9308"
    depends_on:
      - kafka
    networks:
      - emp-network
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:v2.52.0
    container_name: emp-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./config/prometheus/emp_rules.yml:/etc/prometheus/emp_rules.yml:ro
      - prometheus_data:/prometheus
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --storage.tsdb.retention.time=15d
      - --web.console.libraries=/usr/share/prometheus/console_libraries
      - --web.console.templates=/usr/share/prometheus/consoles
    depends_on:
      - engine
      - redis-exporter
      - timescaledb-exporter
      - kafka-exporter
    networks:
      - emp-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:10.4.2
    container_name: emp-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./config/grafana/dashboards/json:/etc/grafana/provisioning/dashboards/json:ro
    depends_on:
      - prometheus
    networks:
      - emp-network
    restart: unless-stopped

volumes:
  redis_data:
  timescaledb_data:
  kafka_data:
  prometheus_data:
  grafana_data:

networks:
  emp-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
