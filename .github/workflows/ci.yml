name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      RUN_MODE: paper
      EMP_ENVIRONMENT: demo
      EMP_TIER: tier_0
      CONFIRM_LIVE: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install ruff mypy

      - name: Ruff Lint
        run: |
          ruff check .

      - name: Type Check (mypy)
        run: |
          mypy src

      - name: Run tests with coverage
        run: |
          python -m pytest --cov=src --cov-report=term-missing --cov-fail-under=70 -q

name: CI Gate

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  validate:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements-fixed.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-fixed.txt
    
    - name: Validate Python syntax
      run: |
        python -m compileall src/ -q
        python -m compileall main.py -q
    
    - name: Set up Python path
      run: |
        echo "PYTHONPATH=$PWD" >> $GITHUB_ENV
    
    - name: Test core imports
      run: |
        python -c "
        import sys
        import os
        sys.path.insert(0, os.getcwd())
        
        try:
            from src.core import *
            from src.sensory.dimensions import WhatDimension, WhenDimension, AnomalyDimension, ChaosDimension
            from src.core.events import PerformanceMetrics, RiskMetrics
            from src.governance.system_config import SystemConfig
            print('‚úÖ All core modules import successfully')
        except ImportError as e:
            print(f'‚ùå Import error: {e}')
            import traceback
            traceback.print_exc()
            sys.exit(1)
        "
    
    - name: Test main application startup
      run: |
        python -c "
        import sys
        import os
        sys.path.insert(0, os.getcwd())
        
        try:
            # Test configuration loading
            from src.core.configuration import load_config
            config = load_config('config.yaml')
            print('‚úÖ Configuration loaded successfully')
            
            # Test basic imports
            from src.governance.system_config import SystemConfig
            from src.operational.event_bus import EventBus
            print('‚úÖ Main application components import successfully')
            
        except Exception as e:
            print(f'‚ùå Application startup test failed: {e}')
            import traceback
            traceback.print_exc()
            sys.exit(1)
        "
    
    - name: Validate configuration
      run: |
        python -c "
        import yaml
        import os
        try:
            with open('config.yaml', 'r') as f:
                config = yaml.safe_load(f)
            print('‚úÖ Configuration file is valid YAML')
            print(f'üìã System name: {config.get(\"system_name\", \"Not specified\")}')
        except Exception as e:
            print(f'‚ùå Configuration error: {e}')
            exit(1)
        "
    
    - name: Check for merge conflicts
      run: |
        if grep -r '<<<<<<< HEAD' . --exclude-dir=.git --exclude-dir=archive --exclude-dir=.github; then
            echo "‚ùå Merge conflicts detected"
            exit 1
        else
            echo "‚úÖ No merge conflicts found"
        fi

    - name: Run stub detector
      run: |
        python tools/truth_validator.py --validate
    
    - name: Run basic functionality test
      run: |
        python -c "
        import sys
        import os
        sys.path.insert(0, os.getcwd())
        
        try:
            # Test sensory dimensions
            from src.sensory.dimensions import WhatDimension, WhenDimension, AnomalyDimension, ChaosDimension
            
            # Test instantiation
            what = WhatDimension()
            when = WhenDimension()
            anomaly = AnomalyDimension()
            chaos = ChaosDimension()
            
            print('‚úÖ All sensory dimensions instantiated successfully')
            
            # Test basic functionality
            import pandas as pd
            test_data = pd.DataFrame({
                'close': [100, 101, 102, 101, 100],
                'volume': [1000, 1100, 1200, 1100, 1000]
            })
            
            result = what.analyze_pattern(test_data)
            print('‚úÖ WHAT dimension functionality test passed')
            
            result = when.analyze_timing(test_data)
            print('‚úÖ WHEN dimension functionality test passed')
            
            result = anomaly.detect_anomalies(test_data)
            print('‚úÖ ANOMALY dimension functionality test passed')
            
            result = chaos.analyze_chaos(test_data)
            print('‚úÖ CHAOS dimension functionality test passed')
            
            print('üéâ All functionality tests passed!')
            
        except Exception as e:
            print(f'‚ùå Functionality test failed: {e}')
            import traceback
            traceback.print_exc()
            sys.exit(1)
        "
