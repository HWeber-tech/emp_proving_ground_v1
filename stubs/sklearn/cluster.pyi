from __future__ import annotations

from typing import Sequence

import numpy as np
from numpy.typing import NDArray

class KMeans:
    def __init__(self, n_clusters: int = ..., random_state: int | None = ..., **kwargs: object) -> None: ...
    def fit(self, X: NDArray[np.float64] | Sequence[Sequence[float]]) -> KMeans: ...
    def fit_predict(self, X: NDArray[np.float64] | Sequence[Sequence[float]]) -> NDArray[np.int64]: ...


class AgglomerativeClustering:
    def __init__(self, n_clusters: int = ..., **kwargs: object) -> None: ...
    def fit(self, X: NDArray[np.float64] | Sequence[Sequence[float]]) -> AgglomerativeClustering: ...
    def fit_predict(self, X: NDArray[np.float64] | Sequence[Sequence[float]]) -> NDArray[np.int64]: ...


class DBSCAN:
    eps: float
    min_samples: int
    labels_: NDArray[np.int64]
    def __init__(self, eps: float = ..., min_samples: int = ..., **kwargs: object) -> None: ...
    def fit(self, X: NDArray[np.float64] | Sequence[Sequence[float]]) -> DBSCAN: ...
    def fit_predict(self, X: NDArray[np.float64] | Sequence[Sequence[float]]) -> NDArray[np.int64]: ...