from typing import Iterable

class Module:
    def __init__(self) -> None: ...
    def forward(self, *args: object, **kwargs: object) -> object: ...
    def parameters(self) -> Iterable[object]: ...
    def __call__(self, *args: object, **kwargs: object) -> object: ...

class Sequential(Module):
    def __init__(self, *modules: Module) -> None: ...

class Linear(Module):
    def __init__(self, in_features: int, out_features: int, bias: bool = ...) -> None: ...

class ReLU(Module):
    def __init__(self, inplace: bool = ...) -> None: ...

class Sigmoid(Module):
    def __init__(self) -> None: ...

class Dropout(Module):
    def __init__(self, p: float = ...) -> None: ...

class LSTM(Module):
    def __init__(self, input_size: int, hidden_size: int, num_layers: int = ..., bias: bool = ..., batch_first: bool = ..., dropout: float = ..., bidirectional: bool = ...) -> None: ...

class CrossEntropyLoss(Module):
    def __init__(self) -> None: ...
    # __call__ inherited from Module